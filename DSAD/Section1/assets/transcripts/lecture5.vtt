WEBVTT

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/42-0
00:00:17.845 --> 00:00:18.445
Hi, good morning.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/51-0
00:00:21.435 --> 00:00:23.395
So the salaried employee
example.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/70-0
00:00:23.405 --> 00:00:28.523
Uh, did soujanya talk about that
in the webinar for amortized

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/70-1
00:00:28.523 --> 00:00:29.265
analysis?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/75-0
00:00:36.355 --> 00:00:36.605
Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/83-0
00:00:36.615 --> 00:00:38.665
So where exactly you guys?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/90-0
00:00:38.735 --> 00:00:39.915
Uh did not understand it.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/93-0
00:00:49.085 --> 00:00:49.435
OK.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/98-0
00:00:49.445 --> 00:00:49.715
OK.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/107-0
00:00:50.365 --> 00:00:52.735
Who I think I will quickly
describe it.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/117-0
00:00:52.745 --> 00:00:54.775
I mean, it's not very important.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/136-0
00:00:54.785 --> 00:00:57.620
It is not directly there in the
course, but it's important for

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/136-1
00:00:57.620 --> 00:00:59.015
you to know about those things.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/154-0
00:00:59.645 --> 00:01:04.631
So yeah, I think, uh, if you
consider our own expenses,

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/154-1
00:01:04.631 --> 00:01:05.165
right.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/174-0
00:01:05.515 --> 00:01:09.323
So for example, say this is the
year end season, and I might

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/174-1
00:01:09.323 --> 00:01:11.445
want to go for a vacation,
right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/191-0
00:01:11.455 --> 00:01:14.885
And let's assume that you are
going on a big vacation.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/209-0
00:01:15.375 --> 00:01:19.903
And let's assume we are going to
spend a bomb on it and say, say,

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/209-1
00:01:19.903 --> 00:01:21.275
three to five lakes.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/236-0
00:01:21.285 --> 00:01:25.089
You're spending on this
vacation, so that is the maximum

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/236-1
00:01:25.089 --> 00:01:28.025
you have spent in this year in
every month.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/255-0
00:01:28.035 --> 00:01:30.691
If you see in December, you have
spent about 5,00,000 because you

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/255-1
00:01:30.691 --> 00:01:31.415
have taken a trip.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/261-0
00:01:32.875 --> 00:01:34.215
That is the worst case, right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/274-0
00:01:34.265 --> 00:01:35.835
Worst case you are spending
5,00,000 a month.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/291-0
00:01:36.615 --> 00:01:39.595
But does that mean every month
you are going to spend 5 bucks?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/295-0
00:01:41.415 --> 00:01:41.705
Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/298-0
00:01:41.715 --> 00:01:42.495
Anyone real quick?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/399-0
00:01:44.995 --> 00:01:48.598
Every month you have spent about
8:20, thousand, 30,000 and so

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/399-1
00:01:48.598 --> 00:01:51.743
on, but certainly in December
because you have taken a

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/399-2
00:01:51.743 --> 00:01:55.174
vacation, you have, you know,
also maybe you have paid your

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/399-3
00:01:55.174 --> 00:01:58.776
next some fees and all that and
you have spent around 5,00,000

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/399-4
00:01:58.776 --> 00:02:02.436
and that is the worst case and
if you consider N months it is N

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/399-5
00:02:02.436 --> 00:02:05.867
into 5,00,000 and that is what
is the worst case and if you

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/399-6
00:02:05.867 --> 00:02:09.412
consider worst case complexity
big O notation that is correct

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/399-7
00:02:09.412 --> 00:02:09.755
right.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/420-0
00:02:09.765 --> 00:02:12.312
Going by that logic, you can
tell that you know here spend

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/420-1
00:02:12.312 --> 00:02:13.305
5,00,000 in this month.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/445-0
00:02:13.455 --> 00:02:16.684
Maybe he's going to spend
5,00,000 every month, so that is

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/445-1
00:02:16.684 --> 00:02:19.255
the worst case which is also not
wrong, right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/471-0
00:02:19.265 --> 00:02:23.599
That is worst case, but in real
life, if I ask you, are you

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/471-1
00:02:23.599 --> 00:02:26.055
going to do that for every
month?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/475-0
00:02:26.225 --> 00:02:26.955
You guys told me that.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/496-0
00:02:26.965 --> 00:02:31.118
No, I will actually match it up
and I will not be spending that

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/496-1
00:02:31.118 --> 00:02:32.675
much every month, right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/523-0
00:02:32.745 --> 00:02:37.134
Even in algorithms also that is
what also happens that the worst

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/523-1
00:02:37.134 --> 00:02:41.050
case is not going to always
happen in certain algorithms,

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/523-2
00:02:41.050 --> 00:02:41.455
right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/540-0
00:02:41.465 --> 00:02:44.675
So that is what is called as
amortized analysis.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/549-0
00:02:45.125 --> 00:02:49.275
Meaning, whenever we want to
keep our analysis tight, right.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/554-0
00:02:49.325 --> 00:02:50.785
Uh, and not very.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/608-0
00:02:52.425 --> 00:02:55.569
Pessimistic telling that you
know this is what is the worst

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/608-1
00:02:55.569 --> 00:02:58.869
case and this is what is going
to always happen in those cases

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/608-2
00:02:58.869 --> 00:03:02.222
you can use amortized analysis
where you can tell that you know

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/608-3
00:03:02.222 --> 00:03:04.055
what there are hundred
operations.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/625-0
00:03:04.165 --> 00:03:07.727
I mean the same operation is
happening 100 times in one or

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/625-1
00:03:07.727 --> 00:03:09.175
two of those operations.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/640-0
00:03:09.185 --> 00:03:12.262
The complexity goes very high,
whereas all other times it is

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/640-1
00:03:12.262 --> 00:03:12.615
normal.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/664-0
00:03:13.715 --> 00:03:17.887
So because of only that one or
two bad operations, I should not

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/664-1
00:03:17.887 --> 00:03:21.015
deem the whole data structure to
be bad, right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/696-0
00:03:21.025 --> 00:03:24.168
If you consider that RA
insertion alright, let me you

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/696-1
00:03:24.168 --> 00:03:27.602
know give a simple example of I
have a small array of five

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/696-2
00:03:27.602 --> 00:03:28.125
elements.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/706-0
00:03:29.045 --> 00:03:32.305
So I want to insert into that
array.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/717-0
00:03:32.455 --> 00:03:34.545
So what are the complexity to
insert the first number?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/732-0
00:03:36.785 --> 00:03:38.495
I go to array of zeroth
location.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/738-0
00:03:38.505 --> 00:03:39.505
I just put my number there.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/749-0
00:03:40.335 --> 00:03:42.425
So what was the complexity
constant right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/770-0
00:03:42.715 --> 00:03:45.796
Again, I want to insert the next
element I go it's this constant

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/770-1
00:03:45.796 --> 00:03:48.165
again, third element, 4th
element, Fifth element.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/779-0
00:03:48.755 --> 00:03:50.315
Now there is a problem, right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/812-0
00:03:50.325 --> 00:03:54.394
Because I'm not able to insert
now because the whole array is

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/812-1
00:03:54.394 --> 00:03:58.134
full, so at that point, what
should I be doing when data

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/812-2
00:03:58.134 --> 00:03:59.315
structure is full?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/830-0
00:03:59.325 --> 00:04:01.265
What is the very obvious choice
that we have to do?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/844-0
00:04:03.135 --> 00:04:05.402
If it's linguist, there was no
problem because it can

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/844-1
00:04:05.402 --> 00:04:06.115
dynamically grow.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/867-0
00:04:06.435 --> 00:04:10.290
But here, since it was an array
I my array is exhausted so I'll

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/867-1
00:04:10.290 --> 00:04:11.855
have to increase the size.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/873-0
00:04:11.865 --> 00:04:13.485
Very good new array, right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/900-0
00:04:13.575 --> 00:04:17.176
I cannot increase the length as
in when I go in an array because

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/900-1
00:04:17.176 --> 00:04:19.945
the next location might not have
space in memory.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/935-0
00:04:20.365 --> 00:04:23.540
So I should create a new array,
so I create a new array

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/935-1
00:04:23.540 --> 00:04:26.998
somewhere in memory, ideally
double the size and then I copy

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/935-2
00:04:26.998 --> 00:04:28.925
all these elements again into
it.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/945-0
00:04:29.325 --> 00:04:30.855
So it is all extra work right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/976-0
00:04:30.935 --> 00:04:34.153
I'm creating a new array and
then I'm copying all these

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/976-1
00:04:34.153 --> 00:04:37.716
existing file elements into it
and then I'm inserting the 6th

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/976-2
00:04:37.716 --> 00:04:38.175
element.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1014-0
00:04:39.685 --> 00:04:43.467
So far, this particular
insertion was the complexity

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1014-1
00:04:43.467 --> 00:04:47.676
still constant, or was the
complexity N because you had to

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1014-2
00:04:47.676 --> 00:04:51.814
copy all the elements and then
you are inserting this new

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1014-3
00:04:51.814 --> 00:04:53.455
element but it perfect.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1022-0
00:04:53.625 --> 00:04:55.225
What about the 7th element
again?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1028-0
00:04:56.085 --> 00:04:57.055
Yeah, 7th element.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1041-0
00:04:57.065 --> 00:05:00.507
It's again, go back now that
array size has become ten,

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1041-1
00:05:00.507 --> 00:05:00.875
right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1048-0
00:05:00.885 --> 00:05:02.035
Because 5I doubled it.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1057-0
00:05:02.045 --> 00:05:02.675
Now it's 10.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1093-0
00:05:03.165 --> 00:05:06.080
So for the 6th element, again
there was a problem because I

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1093-1
00:05:06.080 --> 00:05:08.995
had to copy all the elements,
then the 6th element I had to

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1093-2
00:05:08.995 --> 00:05:10.695
insert, but again for 7th
element.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1097-0
00:05:10.705 --> 00:05:11.125
What is it?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1104-0
00:05:12.265 --> 00:05:13.475
I'll be having space in daray.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1115-0
00:05:13.565 --> 00:05:15.325
I'll just go to a of, you know,
six.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1120-0
00:05:15.335 --> 00:05:16.125
I'll put my element there.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1127-0
00:05:17.045 --> 00:05:18.195
What about the 8th element?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1137-0
00:05:18.405 --> 00:05:20.795
What about the 9th element for
all these?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1145-0
00:05:20.805 --> 00:05:22.455
Again, it has become normal,
right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1153-0
00:05:22.465 --> 00:05:23.605
It is a constant complexity.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1156-0
00:05:24.395 --> 00:05:24.625
Right.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1169-0
00:05:24.635 --> 00:05:27.218
Again, there will be a problem
when the array gets filled

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1169-1
00:05:27.218 --> 00:05:27.485
right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1175-0
00:05:27.495 --> 00:05:28.805
I'll have to double it.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1185-0
00:05:28.815 --> 00:05:30.505
I'll make the array says AS20.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1196-0
00:05:30.695 --> 00:05:32.525
I'll copy all this 10 elements.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1206-0
00:05:32.685 --> 00:05:34.045
Then there will be one problem.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1229-0
00:05:34.215 --> 00:05:37.761
Again, it will get bit normal
right for inserting the 12th

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1229-1
00:05:37.761 --> 00:05:40.165
element, 13th element 14151617
and all.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1308-0
00:05:40.275 --> 00:05:44.640
It will be again back to just a
constant complexity, so this bad

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1308-1
00:05:44.640 --> 00:05:48.938
operation is it coming always is
every insert a bad insert like

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1308-2
00:05:48.938 --> 00:05:53.102
you know complexity of north or
is it just happening here and

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1308-3
00:05:53.102 --> 00:05:57.198
there it's just happening here
and there right only when the

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1308-4
00:05:57.198 --> 00:06:01.429
array is exhausted at that point
I'm having that problem where

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1308-5
00:06:01.429 --> 00:06:05.525
complexity goes high but all
other times it is still normal.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1336-0
00:06:06.015 --> 00:06:10.385
So this amortized analysis tells
you that just because there is

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1336-1
00:06:10.385 --> 00:06:14.550
that bad operation, but that
doesn't happen frequently, that

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1336-2
00:06:14.550 --> 00:06:15.915
happens only rarely.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1349-0
00:06:16.895 --> 00:06:20.510
Because of that, we should not
deem the whole data structure to

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1349-1
00:06:20.510 --> 00:06:20.905
be bad.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1364-0
00:06:21.305 --> 00:06:24.465
I should not tell that inserting
in an array is N square, right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1388-0
00:06:24.475 --> 00:06:28.581
Because worst case it is north
and I'm inserting N elements, so

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1388-1
00:06:28.581 --> 00:06:30.505
it is North Square complexity.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1398-0
00:06:30.655 --> 00:06:33.755
We should not be doing that
right because we are.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1407-0
00:06:33.765 --> 00:06:35.365
We are very pessimistic in it,
right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1432-0
00:06:35.375 --> 00:06:37.937
We're telling that every
operation is bad and it is going

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1432-1
00:06:37.937 --> 00:06:40.145
to take more, but that is not
the real situation.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1439-0
00:06:41.745 --> 00:06:43.835
So that is where amortized
analysis comes in.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1463-0
00:06:44.205 --> 00:06:48.218
So the whole philosophy of
amortized analysis comes in when

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1463-1
00:06:48.218 --> 00:06:51.895
the same operation is repeated
again and again, right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1471-0
00:06:51.905 --> 00:06:53.395
It is not different different
steps.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1486-0
00:06:53.805 --> 00:06:57.495
It is the same insertion only,
but sometimes it is normal.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1522-0
00:06:57.785 --> 00:07:01.893
Some rare cases the complexity
goes high, but because of that

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1522-1
00:07:01.893 --> 00:07:06.068
rare situations we should not
deem the whole data structure to

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1522-2
00:07:06.068 --> 00:07:08.585
be bad or having a larger
complexity.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1532-0
00:07:09.475 --> 00:07:13.145
And this philosophy is called
you're amortized analysis.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1548-0
00:07:14.445 --> 00:07:15.955
So what will be the final
complexity for?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1555-0
00:07:16.025 --> 00:07:17.035
It has been the normal.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1570-0
00:07:17.045 --> 00:07:20.175
You should just tell it As for
inserting one element in array.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1585-0
00:07:20.185 --> 00:07:23.655
It is constant and for inserting
N elements it is big of north.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1587-0
00:07:25.095 --> 00:07:25.305
Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1593-0
00:07:25.315 --> 00:07:25.905
Is that right, Krishna?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1601-0
00:07:27.075 --> 00:07:28.245
Then this is also average.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1609-0
00:07:28.255 --> 00:07:29.825
Is it related to Theta notation?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1615-0
00:07:29.835 --> 00:07:30.305
No, no, no.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1643-0
00:07:30.315 --> 00:07:34.054
It is independent only, so we
are just telling that on an

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1643-1
00:07:34.054 --> 00:07:37.535
average and then Irene
insertion, it is all the same.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1666-0
00:07:37.595 --> 00:07:41.807
It is not, you know, because at
some times only rarely it picks

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1666-1
00:07:41.807 --> 00:07:44.505
up, so this is not the average
analysis.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1686-0
00:07:44.585 --> 00:07:48.613
Yeah, this is still worst case
analysis only, but then there's

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1686-1
00:07:48.613 --> 00:07:50.595
a special case of amortization.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1691-0
00:07:51.735 --> 00:07:51.985
Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1702-0
00:07:51.995 --> 00:07:54.265
When the same operation is again
and again performed.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1707-0
00:07:56.165 --> 00:07:56.575
Yeah, it does.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1712-0
00:07:56.585 --> 00:07:57.765
It throw some light all of you.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1721-0
00:08:00.105 --> 00:08:01.755
And we ignore these during
analysis, right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1723-0
00:08:01.765 --> 00:08:01.955
Yes.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1729-0
00:08:01.965 --> 00:08:03.195
So yeah, you can ignore that.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1741-0
00:08:05.965 --> 00:08:07.505
This is slightly higher concept.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1744-0
00:08:07.515 --> 00:08:07.885
Yeah, it is.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1766-0
00:08:07.895 --> 00:08:11.157
Not just a basic worst case, but
we are telling you the same

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1766-1
00:08:11.157 --> 00:08:13.295
operation is happening again and
again.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1776-0
00:08:14.265 --> 00:08:15.905
Then how do you go about, you
know, doing it?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1782-0
00:08:21.645 --> 00:08:21.905
Pull.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1792-0
00:08:21.915 --> 00:08:24.947
Vivek, just for another minute
and then we will get started,

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1792-1
00:08:24.947 --> 00:08:25.195
yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1797-0
00:08:30.275 --> 00:08:30.685
Yeah. Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1803-0
00:08:30.695 --> 00:08:31.955
SURBHI I'll get it uploaded.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1805-0
00:08:31.965 --> 00:08:32.245
Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1815-0
00:08:32.255 --> 00:08:34.505
So I think Soujanya has
forgotten it.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1828-0
00:08:35.075 --> 00:08:38.155
I will ask her to upload it and
also put an announcement.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1830-0
00:08:42.065 --> 00:08:42.225
Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1835-0
00:08:45.035 --> 00:08:45.305
Cool.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1846-0
00:08:45.315 --> 00:08:46.985
I think it's good time for us to
get started.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1859-0
00:08:46.995 --> 00:08:49.085
We'll just have a recap and we
will get started.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1867-0
00:08:49.395 --> 00:08:52.505
And yeah, there's also our
message.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1889-0
00:08:52.895 --> 00:08:58.437
Essentially we are saying they
we deem, say 2IN into two plus

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1889-1
00:08:58.437 --> 00:08:58.705
uh.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1909-0
00:08:59.545 --> 00:09:03.375
The fact that two into N square
is a coefficient so that small

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1909-1
00:09:03.375 --> 00:09:04.955
SHINDE is not tight bound.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1926-0
00:09:04.965 --> 00:09:07.089
So I didn't really quite get
that, but let's come back to

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1926-1
00:09:07.089 --> 00:09:07.565
that, Rajesh.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1928-0
00:09:07.575 --> 00:09:07.785
Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1935-0
00:09:07.795 --> 00:09:09.335
So let's I will complete.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1952-0
00:09:09.345 --> 00:09:12.400
Go ahead with this and we will
come back to that amortization

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1952-1
00:09:12.400 --> 00:09:12.695
again.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1970-0
00:09:12.705 --> 00:09:15.701
So there's a good explanation
about it, even your text, but we

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1970-1
00:09:15.701 --> 00:09:16.985
will come back to it, yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1980-0
00:09:19.245 --> 00:09:20.425
So what did we do in the last
class?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1990-0
00:09:23.845 --> 00:09:25.015
Oh, OK well canvas.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1996-0
00:09:25.025 --> 00:09:25.815
So is it there?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/1999-0
00:09:25.825 --> 00:09:27.045
The webinar slides?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2005-0
00:09:39.255 --> 00:09:39.545
Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2014-0
00:09:39.555 --> 00:09:41.145
So what exactly did we do in
trees?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2021-0
00:09:41.215 --> 00:09:42.525
We did a lot of things.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2023-0
00:09:42.535 --> 00:09:42.805
Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2036-0
00:09:42.815 --> 00:09:44.345
So we got introduced to what is
trees.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2043-0
00:09:44.355 --> 00:09:45.955
It is a hierarchical data
structure.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2049-0
00:09:45.965 --> 00:09:46.805
Why do we need it?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2062-0
00:09:47.175 --> 00:09:50.005
We took a lot of terminologies,
I hope you remember that.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2064-0
00:09:50.415 --> 00:09:50.545
Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2089-0
00:09:51.755 --> 00:09:54.626
And then we also got started
with the different operations

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2089-1
00:09:54.626 --> 00:09:57.643
and also about the different
types of trees, right, which was

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2089-2
00:09:57.643 --> 00:09:58.665
very important. Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2099-0
00:09:59.735 --> 00:10:00.695
What is the binary tree?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2106-0
00:10:02.125 --> 00:10:02.855
Binary tree.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2117-0
00:10:02.865 --> 00:10:05.495
Someone who can have at most two
children, right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2139-0
00:10:05.505 --> 00:10:08.809
All internal nodes at most two,
meaning it can even have you

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2139-1
00:10:08.809 --> 00:10:09.675
know one or two.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2156-0
00:10:10.555 --> 00:10:14.048
But as proper binary tree was
the one where he has to have

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2156-1
00:10:14.048 --> 00:10:15.705
exactly two children, right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2170-0
00:10:15.955 --> 00:10:18.605
And then you had complete binary
tree which was very important.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2191-0
00:10:19.035 --> 00:10:22.928
Complete binary tree is A1 where
until the last but one level it

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2191-1
00:10:22.928 --> 00:10:24.185
is completely filled.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2200-0
00:10:24.555 --> 00:10:26.405
Meaning in level 0 there can
only be one node.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2209-0
00:10:26.415 --> 00:10:27.785
It is there in level one.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2213-0
00:10:27.795 --> 00:10:28.585
There can be 2 nodes.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2222-0
00:10:28.595 --> 00:10:30.205
It is there in L2.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2231-0
00:10:30.215 --> 00:10:31.685
It can be 2 power two which is
4.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2248-0
00:10:31.725 --> 00:10:35.455
All four are there, and in the
last level it is not fully

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2248-1
00:10:35.455 --> 00:10:35.905
filled.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2266-0
00:10:35.915 --> 00:10:39.022
That's fine, but nodes are
filled from left to right, so

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2266-1
00:10:39.022 --> 00:10:39.785
this is first.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2275-0
00:10:39.795 --> 00:10:40.515
Then there's a second.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2282-0
00:10:40.745 --> 00:10:42.175
Then this node should have, and
so on.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2297-0
00:10:42.505 --> 00:10:46.362
It should not be somewhere in
the middle like this and so on,

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2297-1
00:10:46.362 --> 00:10:46.735
right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2312-0
00:10:46.805 --> 00:10:49.182
And how do you represent a
complete binary tree in a

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2312-1
00:10:49.182 --> 00:10:49.585
computer?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2315-0
00:10:51.935 --> 00:10:52.145
Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2322-0
00:10:52.155 --> 00:10:52.995
Do you remember that part?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2333-0
00:10:54.855 --> 00:10:56.705
Maybe it's a complete binary
tree like this?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2339-0
00:10:56.855 --> 00:10:59.355
Which mechanism should we use?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2354-0
00:10:59.365 --> 00:11:01.295
Should we use an array or should
we use a linked list?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2363-0
00:11:01.525 --> 00:11:02.615
We should be using a array.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2391-0
00:11:02.765 --> 00:11:06.095
We need not use link list and so
on because if you use an array

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2391-1
00:11:06.095 --> 00:11:08.695
we are still not going to waste
any space, right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2416-0
00:11:08.705 --> 00:11:12.946
And how was that representation
all of you real quick, you draw

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2416-1
00:11:12.946 --> 00:11:16.855
the complete binary tree, you
start the indexing with one.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2420-0
00:11:16.865 --> 00:11:17.555
Yeah, very good.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2578-0
00:11:17.565 --> 00:11:21.285
Yeah, you will start it from one
you will number it from top to

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2578-1
00:11:21.285 --> 00:11:24.714
bottom left to right and then
you will create an array and

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2578-2
00:11:24.714 --> 00:11:28.201
whatever numbers that you had
put that becomes your indices

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2578-3
00:11:28.201 --> 00:11:31.920
and inside that you actually put
your elements and you are done

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2578-4
00:11:31.920 --> 00:11:35.175
and for any element the left
child of it will be in two

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2578-5
00:11:35.175 --> 00:11:38.836
position right child will be in
two I plus one and parent will

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2578-6
00:11:38.836 --> 00:11:42.265
be I by two the floor value
right it was very simple stuff

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2578-7
00:11:42.265 --> 00:11:45.520
but again we had taken this
example that if it is not a

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2578-8
00:11:45.520 --> 00:11:49.123
complete binary tree then what
happens then what would happen

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2578-9
00:11:49.123 --> 00:11:52.436
is if you take the same
mechanism if you start numbering

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2578-10
00:11:52.436 --> 00:11:55.981
it from top to bottom left to
right you will realize that in

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2578-11
00:11:55.981 --> 00:11:59.643
this case A doesn't have a right
child at all right and that C

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2578-12
00:11:59.643 --> 00:12:02.025
will again not have two children
at all.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2619-0
00:12:02.535 --> 00:12:06.469
But you should imagine that such
nodes are there and you should

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2619-1
00:12:06.469 --> 00:12:10.034
number it right 123 is not
there, 4567 is not there again

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2619-2
00:12:10.034 --> 00:12:11.755
8-9 are not there and so on.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2639-0
00:12:11.765 --> 00:12:15.192
You should number it in that way
and then if you translate that

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2639-1
00:12:15.192 --> 00:12:17.975
into your array, all those
positions will be empty.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2700-0
00:12:19.015 --> 00:12:22.652
So ideally what you are doing is
you are wasting a lot of space

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2700-1
00:12:22.652 --> 00:12:26.119
for non existing nodes and we
are again considering those to

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2700-2
00:12:26.119 --> 00:12:29.585
be a position because otherwise
those formulas will not work

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2700-3
00:12:29.585 --> 00:12:33.279
right this two, I2I plus one and
so on will work only if all the

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2700-4
00:12:33.279 --> 00:12:34.245
nodes are filled.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2728-0
00:12:35.125 --> 00:12:38.408
So we should imagine that three
is there and so on and we should

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2728-1
00:12:38.408 --> 00:12:41.185
number it like that we should
not number the CS three.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2730-0
00:12:42.335 --> 00:12:42.945
Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2732-0
00:12:43.055 --> 00:12:43.365
Yes.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2739-0
00:12:43.375 --> 00:12:44.225
No, all of you are getting this.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2751-0
00:12:46.355 --> 00:12:48.995
Like this, although imaginary,
there is no node.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2768-0
00:12:49.005 --> 00:12:51.315
Here we are just putting some
dotted nodes and we are

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2768-1
00:12:51.315 --> 00:12:52.255
numbering it as three.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2779-0
00:12:52.265 --> 00:12:54.045
Then you know 6-7 and so on.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2785-0
00:12:54.435 --> 00:12:56.725
But those positions are becoming
empty here.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2796-0
00:12:56.955 --> 00:12:58.125
So which is a bad approach?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2802-0
00:12:58.135 --> 00:12:59.225
We should not be doing that.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2827-0
00:12:59.635 --> 00:13:03.743
So only when it is a complete
binary tree or a perfect binary

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2827-1
00:13:03.743 --> 00:13:05.465
tree, we will use a array.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2849-0
00:13:05.895 --> 00:13:09.781
In all other cases, we will use
a linked list and how is the

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2849-1
00:13:09.781 --> 00:13:12.965
link list representation very
simple again right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2859-0
00:13:13.255 --> 00:13:15.225
A binary tree is a linked data
structure.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2891-0
00:13:15.465 --> 00:13:19.328
Each node contains a data and a
pointer left, right and P the

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2891-1
00:13:19.328 --> 00:13:23.190
left points to the left child of
the node right points to the

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2891-2
00:13:23.190 --> 00:13:24.685
right child of the node.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2912-0
00:13:24.895 --> 00:13:28.024
P points to the parent of the
node, and if a child is not

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2912-1
00:13:28.024 --> 00:13:30.505
there, right, maybe left is not
there, right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2917-0
00:13:30.515 --> 00:13:31.005
Is not there.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2923-0
00:13:31.015 --> 00:13:32.305
That child is not there.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2931-0
00:13:32.455 --> 00:13:34.525
That will become null or null,
right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2945-0
00:13:35.055 --> 00:13:38.365
And if a parent is missing, then
the P pointer will become nil.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2956-0
00:13:38.375 --> 00:13:39.895
What is the only case when this
can happen?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2960-0
00:13:41.305 --> 00:13:41.795
Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2980-0
00:13:41.885 --> 00:13:44.754
What is the only node where the
parent will be missing and

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2980-1
00:13:44.754 --> 00:13:46.795
someone real quick tell that
route right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/2994-0
00:13:46.945 --> 00:13:49.115
So for root, the parent will not
be there, he'll be nil.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/3003-0
00:13:49.385 --> 00:13:51.795
And what about leads for leaves?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/3009-0
00:13:51.805 --> 00:13:53.295
Both the sides will be null,
right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/3020-0
00:13:53.305 --> 00:13:55.755
Because it doesn't have left
child also right child also.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/3033-0
00:13:55.865 --> 00:13:59.315
So for leaves, both of them left
and right will be null.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/3052-0
00:13:59.845 --> 00:14:03.495
So if you take an example like
this, each of them have 4

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/3052-1
00:14:03.495 --> 00:14:04.775
compartments, right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/3059-0
00:14:04.785 --> 00:14:05.475
This is the root.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/3070-0
00:14:05.725 --> 00:14:07.965
His parent becomes empty because
he doesn't have a parent.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/3095-0
00:14:08.775 --> 00:14:12.430
The left points to the left
child, the right compartment

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/3095-1
00:14:12.430 --> 00:14:16.340
points to the right child and
the actual data points to some

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/3095-2
00:14:16.340 --> 00:14:17.045
data value.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/3113-0
00:14:17.375 --> 00:14:20.157
Similarly, if you go to this
particular node, its parent

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/3113-1
00:14:20.157 --> 00:14:21.425
points to the root, right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/3149-0
00:14:21.435 --> 00:14:24.328
Because that was its parent and
the left points to the left

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/3149-1
00:14:24.328 --> 00:14:27.222
child right point to the right
child, and this data element

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/3149-2
00:14:27.222 --> 00:14:29.825
points to Chicago, which is a
data element and so on.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/3182-0
00:14:30.115 --> 00:14:32.951
So if you now want to insert a
new element, you will just

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/3182-1
00:14:32.951 --> 00:14:36.032
create a new node somewhere in
memory which will have you know

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/3182-2
00:14:36.032 --> 00:14:36.765
4 compartments.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/3246-0
00:14:37.075 --> 00:14:40.516
If you want to make that as the
right child of this node, right

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/3246-1
00:14:40.516 --> 00:14:43.904
instead of this null, this will
point to our new node, our new

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/3246-2
00:14:43.904 --> 00:14:47.237
nodes parent compartment will
point to this node and then for

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/3246-3
00:14:47.237 --> 00:14:50.409
the new node you will put the
data elements, say India and

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/3246-4
00:14:50.409 --> 00:14:53.743
then for the new node India the
left and right will be empty,

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/3246-5
00:14:53.743 --> 00:14:54.065
right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/3305-0
00:14:54.075 --> 00:14:56.846
A simple insertion we'll be able
to do, and in some

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/3305-1
00:14:56.846 --> 00:15:00.203
representations, if you don't
want the parent if you just want

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/3305-2
00:15:00.203 --> 00:15:03.347
to start from root and go down
if you don't want to have a

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/3305-3
00:15:03.347 --> 00:15:06.650
parent pointer, you can also
have a representation like this,

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/3305-4
00:15:06.650 --> 00:15:08.195
but this is not very helpful.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/3356-0
00:15:08.575 --> 00:15:11.832
This is the right way to do it
so that you have comprehensive

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/3356-1
00:15:11.832 --> 00:15:15.088
information, not just from root
to child, but if you are in a

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/3356-2
00:15:15.088 --> 00:15:18.239
leaf, you can also go back to
the root because you have the

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/3356-3
00:15:18.239 --> 00:15:20.865
parent informations catching
hold of that parent.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/3366-0
00:15:20.875 --> 00:15:23.535
You will be able to go up the
tree also.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/3368-0
00:15:25.375 --> 00:15:25.565
Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/3373-0
00:15:25.575 --> 00:15:26.005
Is that clear?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/3377-0
00:15:26.015 --> 00:15:26.245
Race.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/3386-0
00:15:26.255 --> 00:15:29.505
All of you linked list
representation of a tree.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/3389-0
00:15:31.365 --> 00:15:33.005
Yeah, simple stuff.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/3394-0
00:15:35.035 --> 00:15:35.325
OK.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/3410-0
00:15:35.335 --> 00:15:38.101
That being said, we have just
one last, you know, small

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/3410-1
00:15:38.101 --> 00:15:40.225
concept which is called
traversals, right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/3420-0
00:15:40.335 --> 00:15:42.085
So what exactly is that
traversal?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/3429-0
00:15:42.195 --> 00:15:45.701
Right traversal simply means
walking through a data

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/3429-1
00:15:45.701 --> 00:15:46.375
structure.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/3443-0
00:15:46.705 --> 00:15:49.405
I want to visit all the elements
of a data structure.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/3447-0
00:15:49.825 --> 00:15:51.435
That simply means I'm
traversing.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/3457-0
00:15:52.475 --> 00:15:54.985
Can I do a stack traversal?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/3476-0
00:15:55.215 --> 00:15:59.406
Is that possible if I'm able to
do that, whose help will it

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/3476-1
00:15:59.406 --> 00:15:59.755
take?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/3487-0
00:16:01.395 --> 00:16:05.795
Anyone in Stack who's that
element who's always?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/3506-0
00:16:05.805 --> 00:16:08.900
Yeah, very good top element
using top element, I'll be able

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/3506-1
00:16:08.900 --> 00:16:10.395
to traverse all the elements.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/3529-0
00:16:10.465 --> 00:16:13.346
Similarly for a queue, I'll
start from say front or I'll

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/3529-1
00:16:13.346 --> 00:16:15.215
start from say you know you're
rare.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/3547-0
00:16:15.365 --> 00:16:18.351
I will just traverse all of them
by traversing we mean just

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/3547-1
00:16:18.351 --> 00:16:19.395
visiting all of them.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/3562-0
00:16:19.405 --> 00:16:22.089
Either I can print them or I
can, you know, do some operation

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/3562-1
00:16:22.089 --> 00:16:22.435
on them.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/3573-0
00:16:22.445 --> 00:16:22.935
Whatever.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/3584-0
00:16:23.365 --> 00:16:25.845
It's just that I want to touch
all the elements I want to see

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/3584-1
00:16:25.845 --> 00:16:26.045
them.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/3598-0
00:16:27.535 --> 00:16:29.685
So even for a tree, we will be
able to do that.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/3617-0
00:16:30.655 --> 00:16:33.777
So to traverse or walk the
binary tree is to visit each

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/3617-1
00:16:33.777 --> 00:16:36.285
node in the binary tree exactly
once, right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/3655-0
00:16:36.295 --> 00:16:40.159
We should not be repeating them
exactly once and treat ourselves

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/3655-1
00:16:40.159 --> 00:16:43.548
are naturally recursive, and
there are three ways we can

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/3655-2
00:16:43.548 --> 00:16:45.985
traverse right for a normal
binary tree.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/3671-0
00:16:46.235 --> 00:16:50.355
There are three ways which is
preorder, inorder and postorder.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/3699-0
00:16:52.015 --> 00:16:56.088
If I first visit the route, then
go to the left side and then go

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/3699-1
00:16:56.088 --> 00:16:59.095
to the right side, it is called
preorder, yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/3723-0
00:16:59.245 --> 00:17:02.378
If I go to the left and then
finish all that left and then

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/3723-1
00:17:02.378 --> 00:17:04.395
root and then right that is in
order.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/3744-0
00:17:05.225 --> 00:17:08.868
And if we complete the whole
left, whole right and then come

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/3744-1
00:17:08.868 --> 00:17:11.675
to the root, that is called post
order, right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/3753-0
00:17:12.745 --> 00:17:13.965
Have given some quick examples.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/3759-0
00:17:13.975 --> 00:17:14.755
It is the same thing.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/3766-0
00:17:14.765 --> 00:17:16.015
Yeah, I've just explained it.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/3784-0
00:17:16.385 --> 00:17:20.425
It is the root left, right that
is nothing but preorder.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/3795-0
00:17:21.385 --> 00:17:23.975
If it is left root right, that
is in order.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/3807-0
00:17:24.325 --> 00:17:27.315
If it is left right root, it is
postorder right.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/3814-0
00:17:27.325 --> 00:17:28.785
A very small example is here.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/3821-0
00:17:29.165 --> 00:17:30.635
So this is a binary tree, right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/3826-0
00:17:30.645 --> 00:17:31.245
There is a node.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/3842-0
00:17:31.255 --> 00:17:33.805
There are two children and I
have numbered them 123.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/3861-0
00:17:34.805 --> 00:17:39.785
The preorder of this output will
be root, left, right, right.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/3887-0
00:17:39.795 --> 00:17:43.805
SO123 will be the preorder
traversal output, whereas for

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/3887-1
00:17:43.805 --> 00:17:48.378
inorder we have to 1st go to the
left side, finish all the left,

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/3887-2
00:17:48.378 --> 00:17:49.925
then come to the root.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/3931-0
00:17:50.175 --> 00:17:54.915
So in this case I'm having two,
then one, then three right 213

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/3931-1
00:17:54.915 --> 00:17:59.354
is the output for in order,
whereas for post order it will

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/3931-2
00:17:59.354 --> 00:18:02.815
be left right, root so it is 2/3
and one yes.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/3940-0
00:18:02.825 --> 00:18:03.695
No, all of you got this.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/3973-0
00:18:03.705 --> 00:18:07.541
The three traversals preorder,
inorder, postorder, right

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/3973-1
00:18:07.541 --> 00:18:11.645
preorder means it is first the
root process, the root first,

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/3973-2
00:18:11.645 --> 00:18:15.345
then the left side left means
not just the left child.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/3981-0
00:18:15.595 --> 00:18:16.085
Yeah, it is.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/3990-0
00:18:16.095 --> 00:18:18.805
The whole left sub tree and then
the right.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4014-0
00:18:19.135 --> 00:18:22.963
Similarly, in order means the
whole left side, then the root,

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4014-1
00:18:22.963 --> 00:18:26.605
then the right and post order is
left, right, root, right.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4027-0
00:18:26.615 --> 00:18:28.365
So this was a very, very trivial
example.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4037-0
00:18:28.375 --> 00:18:30.665
You will have to actually do it
in this particular tree.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4040-0
00:18:31.325 --> 00:18:31.505
Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4049-0
00:18:32.765 --> 00:18:34.285
It's exactly what Krishna
wanted.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4058-0
00:18:34.595 --> 00:18:36.665
You should be practicing this in
the next deck.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4065-0
00:18:36.675 --> 00:18:38.025
I have this solution for this.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4067-0
00:18:38.315 --> 00:18:38.565
Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4083-0
00:18:38.575 --> 00:18:41.827
So I want you to first try this
and then you can also check

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4083-1
00:18:41.827 --> 00:18:42.585
those answers.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4091-0
00:18:43.535 --> 00:18:44.645
Have you be able to do this?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4102-0
00:18:45.115 --> 00:18:46.785
But let me just give you a quick
hint.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4127-0
00:18:47.295 --> 00:18:51.328
If you are doing a post order
right, if you are doing a post

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4127-1
00:18:51.328 --> 00:18:54.105
order on this tree, where will
this a be?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4144-0
00:18:54.115 --> 00:18:57.152
There in the output will it be
there in the beginning or will

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4144-1
00:18:57.152 --> 00:18:58.425
it be there in the middle?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4151-0
00:18:58.435 --> 00:18:59.855
Or will it be there in the last?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4157-0
00:19:00.365 --> 00:19:01.055
Yeah, very good.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4188-0
00:19:01.265 --> 00:19:04.498
It'll be in the last because in
post order traversal we are

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4188-1
00:19:04.498 --> 00:19:07.839
going to finish the whole left
side, then right side and then

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4188-2
00:19:07.839 --> 00:19:08.755
come to the root.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4205-0
00:19:08.965 --> 00:19:12.655
So A is going to be in the last,
whereas what about preorder?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4230-0
00:19:13.185 --> 00:19:17.018
It is going to be the first one
and then in order it will be

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4230-1
00:19:17.018 --> 00:19:18.965
somewhere in the middle, right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4233-0
00:19:18.975 --> 00:19:19.565
Give it a shot.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4267-0
00:19:19.575 --> 00:19:22.614
Yeah, do practice this because
when I talk, it might seem

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4267-1
00:19:22.614 --> 00:19:25.862
simpler, but only when you do
this it will be, you know, more

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4267-2
00:19:25.862 --> 00:19:26.385
effective.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4283-0
00:19:26.515 --> 00:19:29.129
And then the very next, you know
slide, I have the answers for

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4283-1
00:19:29.129 --> 00:19:29.585
these also.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4289-0
00:19:29.835 --> 00:19:31.555
So you can cross check the
answers.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4291-0
00:19:31.695 --> 00:19:32.185
Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4293-0
00:19:33.235 --> 00:19:33.505
Cool.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4311-0
00:19:33.515 --> 00:19:36.349
What about this question
represent the below in array and

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4311-1
00:19:36.349 --> 00:19:36.935
linked list.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4324-0
00:19:37.015 --> 00:19:40.270
But I'm asking you a different
question for this type of a

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4324-1
00:19:40.270 --> 00:19:40.545
tree.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4331-0
00:19:40.935 --> 00:19:42.895
Which representation is
effective?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4348-0
00:19:43.625 --> 00:19:45.920
Should I be using an array here
or should I be using a linked

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4348-1
00:19:45.920 --> 00:19:46.105
list?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4354-0
00:19:47.395 --> 00:19:47.935
Yeah, you can.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4362-0
00:19:47.945 --> 00:19:49.775
You can expect such questions in
the quizzes.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4367-0
00:19:49.785 --> 00:19:50.705
Yeah, very good.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4389-0
00:19:50.715 --> 00:19:53.768
It is a linked list because this
is not a complete binary tree,

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4389-1
00:19:53.768 --> 00:19:54.865
right there is Mt here.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4407-0
00:19:54.875 --> 00:19:58.066
There is empty here, so this is
not a complete binary tree, so I

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4407-1
00:19:58.066 --> 00:19:59.195
will use a linked list.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4411-0
00:20:01.385 --> 00:20:01.715
Pull.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4444-0
00:20:01.785 --> 00:20:04.904
That's pretty much that we had
and we had to cover all this in

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4444-1
00:20:04.904 --> 00:20:07.825
the last class and we just, you
know, pushed it for today.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4455-0
00:20:09.315 --> 00:20:10.425
Any doubt so far guys.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4464-0
00:20:10.495 --> 00:20:12.985
Apart from that, you know you
practicing that question.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4474-0
00:20:13.535 --> 00:20:15.235
Are there any other doubts or
are you good?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4501-0
00:20:18.385 --> 00:20:21.844
Well, if that's it, then, uh,
welcome to the fifth contact

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4501-1
00:20:21.844 --> 00:20:24.775
session for data structures and
algorithm design.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4512-0
00:20:25.145 --> 00:20:27.635
And today we will start a new
concept called heaps.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4516-0
00:20:27.935 --> 00:20:28.955
Yeah, very interesting.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4519-0
00:20:29.025 --> 00:20:29.515
Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4541-0
00:20:29.565 --> 00:20:32.071
And we'll also see some
applications of heap like

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4541-1
00:20:32.071 --> 00:20:34.075
heapsort and priority queues and
so on.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4550-0
00:20:34.125 --> 00:20:36.155
Maybe if possible today.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4553-0
00:20:36.165 --> 00:20:37.065
Otherwise, in the next class.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4573-0
00:20:38.985 --> 00:20:41.577
We already had a recap of what
we did in the last class, right,

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4573-1
00:20:41.577 --> 00:20:42.225
which was trees.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4600-0
00:20:43.475 --> 00:20:45.997
Today we'll have a look at what
is the heap, what are the

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4600-1
00:20:45.997 --> 00:20:48.648
different types, what are the P
fication, how do you build a

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4600-2
00:20:48.648 --> 00:20:48.865
heap?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4606-0
00:20:48.875 --> 00:20:49.945
How do you insert something?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4617-0
00:20:49.955 --> 00:20:51.565
How do you remove something and
all that?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4619-0
00:20:51.675 --> 00:20:52.065
Right.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4625-0
00:20:52.635 --> 00:20:54.285
It's a very, very important
topic.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4656-0
00:20:54.295 --> 00:20:58.331
It's a beautiful data structure,
so I want you all to focus and

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4656-1
00:20:58.331 --> 00:21:01.735
as I told the answers of those 3
traversals are here.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4670-0
00:21:01.865 --> 00:21:04.815
So you can practice and then
come to this particular slides.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4680-0
00:21:05.735 --> 00:21:08.775
Yeah, and there are many
applications of binary tree.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4695-0
00:21:08.785 --> 00:21:12.335
I've just listed a couple of
them here, like databases,

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4695-1
00:21:12.335 --> 00:21:12.715
right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4732-0
00:21:12.725 --> 00:21:16.163
If you have heard about indexing
in databases, yeah, any of you,

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4732-1
00:21:16.163 --> 00:21:19.124
there's something called as
primary indexing, secondary

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4732-2
00:21:19.124 --> 00:21:22.085
indexing, right, all those you
know, database concepts.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4744-0
00:21:22.355 --> 00:21:25.875
You can actually view those
indexing as binary trees.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4758-0
00:21:25.885 --> 00:21:28.005
Yeah, it's called B3B plus tree
and so on.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4785-0
00:21:28.275 --> 00:21:31.608
So in indexing it is used in
video games you know trees are

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4785-1
00:21:31.608 --> 00:21:34.885
being used, every move can be,
you know, mapped as a tree.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4798-0
00:21:35.115 --> 00:21:38.056
You know Huffman coding, we will
learn in this course later,

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4798-1
00:21:38.056 --> 00:21:38.345
right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4815-0
00:21:38.355 --> 00:21:41.380
And a lot of other AI
applications also use trees

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4815-1
00:21:41.380 --> 00:21:42.105
inside them.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4818-0
00:21:43.545 --> 00:21:45.095
Yeah, cool.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4827-0
00:21:45.105 --> 00:21:47.475
That being said, let's go to our
heap.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4829-0
00:21:47.745 --> 00:21:47.905
Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4835-0
00:21:49.585 --> 00:21:50.495
So something like this?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4843-0
00:21:50.505 --> 00:21:52.075
Have you seen the heap of
clothes like this?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4873-0
00:21:54.735 --> 00:21:58.083
Maybe kids do this, or some of
us also may do this, just, you

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4873-1
00:21:58.083 --> 00:22:01.161
know, dumb things which might
look like a heap of thing,

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4873-2
00:22:01.161 --> 00:22:01.485
right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4880-0
00:22:02.095 --> 00:22:03.525
So what really is a heap?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4903-0
00:22:03.835 --> 00:22:07.551
Yeah, a heap is a special tree
based data structure that

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4903-1
00:22:07.551 --> 00:22:10.745
satisfies the following special
heap properties.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4918-0
00:22:11.125 --> 00:22:14.125
So first thing first, it is
starting the whole definition

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4918-1
00:22:14.125 --> 00:22:14.745
starts with.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4938-0
00:22:14.755 --> 00:22:17.625
It is a special tree, so can I
call it as a tree?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4945-0
00:22:17.635 --> 00:22:19.905
First of all, how many of you
agree?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4962-0
00:22:21.945 --> 00:22:24.955
Someone just blindly, you know,
tells you that heap is a tree.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4968-0
00:22:25.065 --> 00:22:25.915
Do you agree or not?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4977-0
00:22:26.315 --> 00:22:27.315
You should be telling yes.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4993-0
00:22:27.805 --> 00:22:31.316
Firstly, it is a tree, but it
has certain special qualities or

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4993-1
00:22:31.316 --> 00:22:32.375
special properties.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/4999-0
00:22:32.765 --> 00:22:33.955
What are those properties?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5017-0
00:22:34.165 --> 00:22:38.318
There are two properties, one is
the shape property and one is

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5017-1
00:22:38.318 --> 00:22:39.965
the heap property, right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5051-0
00:22:40.595 --> 00:22:44.389
So any three that is given to
you, yeah, you will inspect

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5051-1
00:22:44.389 --> 00:22:47.855
these two properties and if
these two properties are

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5051-2
00:22:47.855 --> 00:22:50.275
satisfied, then that becomes a
heap.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5062-0
00:22:51.555 --> 00:22:52.945
Is it making sense for all of
you?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5073-0
00:22:53.015 --> 00:22:53.205
Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5083-0
00:22:53.215 --> 00:22:56.498
These are all very, very simple
concepts, but nine out of 10

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5083-1
00:22:56.498 --> 00:22:57.735
students make mistakes.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5100-0
00:22:57.745 --> 00:23:01.072
They have misconceptions about
this which I don't want you to

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5100-1
00:23:01.072 --> 00:23:01.715
have, right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5113-0
00:23:03.425 --> 00:23:07.235
It's a normal tree, but it has
these two special qualities.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5117-0
00:23:07.245 --> 00:23:08.095
Or these two properties?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5134-0
00:23:09.285 --> 00:23:12.225
Any tree that is given to you if
you inspect it.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5137-0
00:23:13.605 --> 00:23:13.995
I live.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5155-0
00:23:14.005 --> 00:23:17.199
These two properties are
satisfied in it then that is

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5155-1
00:23:17.199 --> 00:23:18.855
qualifying to become a heap.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5157-0
00:23:19.665 --> 00:23:19.915
No.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5171-0
00:23:19.925 --> 00:23:23.255
Let's see each of these two
properties share property.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5215-0
00:23:24.025 --> 00:23:27.693
He data structure is always a
complete binary tree, which

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5215-1
00:23:27.693 --> 00:23:31.740
means all the levels of the tree
are fully filled till the last

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5215-2
00:23:31.740 --> 00:23:35.471
but one level and at the last
level H the nodes are filled

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5215-3
00:23:35.471 --> 00:23:37.115
from left to right, right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5223-0
00:23:37.345 --> 00:23:38.605
This is a complete binary tree.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5233-0
00:23:38.645 --> 00:23:40.415
All of you know what is a
complete binary tree.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5239-0
00:23:40.465 --> 00:23:41.405
We just revised it.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5273-0
00:23:41.415 --> 00:23:45.448
You all learned it in the last
class, so that is the first

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5273-1
00:23:45.448 --> 00:23:49.550
property if a non complete
binary tree is given, then there

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5273-2
00:23:49.550 --> 00:23:51.395
is no way it can be a heap.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5299-0
00:23:53.015 --> 00:23:55.977
Yeah, we're still clear the
moment someone gives you a tree

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5299-1
00:23:55.977 --> 00:23:59.087
which is not a complete binary
tree right away, you can reject

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5299-2
00:23:59.087 --> 00:23:59.235
it.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5334-0
00:23:59.245 --> 00:24:03.313
You can tell that this cannot be
a heap if it is a complete

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5334-1
00:24:03.313 --> 00:24:07.652
binary tree, then you will go do
the second check, which is the

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5334-2
00:24:07.652 --> 00:24:09.075
heap property, right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5361-0
00:24:09.085 --> 00:24:13.877
What does the heap property all
nodes are either greater than or

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5361-1
00:24:13.877 --> 00:24:18.005
equal to or less than or equal
to each of its children?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5365-0
00:24:18.595 --> 00:24:18.775
Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5382-0
00:24:18.785 --> 00:24:23.073
What does it mean if the parent
nodes are greater than their

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5382-1
00:24:23.073 --> 00:24:23.705
children?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5407-0
00:24:24.035 --> 00:24:28.255
Then such a heap is called as
Max heap, so the root of any sub

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5407-1
00:24:28.255 --> 00:24:31.335
tree holds the greatest value in
the subtree.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5434-0
00:24:32.435 --> 00:24:35.861
Similarly, the opposite of it,
if the parent nodes are smaller

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5434-1
00:24:35.861 --> 00:24:39.015
than the children, then such a
heap is called a min heap.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5454-0
00:24:39.775 --> 00:24:44.634
So the root of any subtree holds
the least value in that subtree,

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5454-1
00:24:44.634 --> 00:24:45.075
right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5496-0
00:24:45.085 --> 00:24:49.127
For math lovers, for Max Heap is
nothing but for every node V

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5496-1
00:24:49.127 --> 00:24:53.038
other than the root, because
root doesn't have a parent for

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5496-2
00:24:53.038 --> 00:24:57.015
every other node, the parent
element will be greater than or

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5496-3
00:24:57.015 --> 00:24:58.905
equal to its children, right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5522-0
00:24:59.775 --> 00:25:02.695
It is for min heap apart from
the root for all the other

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5522-1
00:25:02.695 --> 00:25:05.665
nodes, the parent node will be
smaller than the children.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5552-0
00:25:06.035 --> 00:25:09.051
This equal to is not very
commonly used, but technically

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5552-1
00:25:09.051 --> 00:25:12.278
you can have it, but in most
applications that equal to will

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5552-2
00:25:12.278 --> 00:25:12.965
not be there.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5568-0
00:25:12.975 --> 00:25:16.580
It will be strictly greater than
or less than, so let's put these

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5568-1
00:25:16.580 --> 00:25:17.945
into, you know, practice.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5576-0
00:25:17.955 --> 00:25:20.325
Let's look at some examples,
right.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5584-0
00:25:21.965 --> 00:25:23.265
So let's look at this left side.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5596-0
00:25:24.235 --> 00:25:25.935
So is this a heap or not?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5615-0
00:25:27.795 --> 00:25:32.205
If it is a heap, it should be
either a min heap or a Max heap.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5624-0
00:25:32.515 --> 00:25:33.895
Otherwise it is not a heap at
all.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5644-0
00:25:34.545 --> 00:25:36.878
So if you have a look at this,
what is the first thing that

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5644-1
00:25:36.878 --> 00:25:37.655
goes into your mind?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5657-0
00:25:37.665 --> 00:25:41.035
You will first check if this is
a complete binary tree or not.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5664-0
00:25:41.255 --> 00:25:42.455
Is this a complete binary tree?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5672-0
00:25:44.435 --> 00:25:46.145
Yeah, let's not jump the bridge.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5679-0
00:25:46.155 --> 00:25:47.685
Let's take it step by step.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5687-0
00:25:47.755 --> 00:25:49.205
It is a complete binary tree.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5689-0
00:25:49.415 --> 00:25:49.825
Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5704-0
00:25:49.835 --> 00:25:52.135
Again, for all of you, why is it
not a complete binary tree?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5718-0
00:25:53.825 --> 00:25:56.995
Completely filled level 0 level
1-2 nodes can be there.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5743-0
00:25:57.005 --> 00:26:00.005
All two are there, so this is
the last but one level in the

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5743-1
00:26:00.005 --> 00:26:02.205
last level it is filled from
left to right.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5748-0
00:26:02.485 --> 00:26:03.305
This is filled.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5762-0
00:26:03.315 --> 00:26:05.515
This is filled and then the next
thing can be here.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5772-0
00:26:05.645 --> 00:26:07.955
So this is the perfectly valid
complete binary tree.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5775-0
00:26:09.785 --> 00:26:10.055
Yes.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5790-0
00:26:10.065 --> 00:26:13.328
No, all of you convinced that is
why again kept on repeating

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5790-1
00:26:13.328 --> 00:26:13.595
that.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5800-0
00:26:13.605 --> 00:26:16.235
Please watch recordings and
revise the concepts.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5813-0
00:26:16.665 --> 00:26:19.535
These two are perfectly valid
complete binary trees.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5830-0
00:26:19.865 --> 00:26:23.288
So till this last but one level,
they are fully filled in the

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5830-1
00:26:23.288 --> 00:26:23.895
last level.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5836-0
00:26:23.905 --> 00:26:25.045
They are filled from left to
right.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5838-0
00:26:26.825 --> 00:26:27.005
Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5849-0
00:26:28.585 --> 00:26:29.815
So to be for all of you.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5859-0
00:26:29.865 --> 00:26:33.915
Yeah, everyone first property,
do both of them satisfy?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5867-0
00:26:34.995 --> 00:26:36.345
They are complete binary trees.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5882-0
00:26:36.935 --> 00:26:39.395
Now I'm going to do the next
check right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5904-0
00:26:40.295 --> 00:26:45.509
66 is smaller than seven and six
is smaller than 12, so six is

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5904-1
00:26:45.509 --> 00:26:48.405
smaller than both of its
children.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5908-0
00:26:48.835 --> 00:26:49.115
OK.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5924-0
00:26:50.085 --> 00:26:54.743
What about the next Level 7 is
smaller than 10 and seven is

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5924-1
00:26:54.743 --> 00:26:55.985
smaller than 15.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5927-0
00:26:56.955 --> 00:26:57.215
OK.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5941-0
00:26:58.065 --> 00:27:00.525
12 is smaller than 17 and were
released.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5956-0
00:27:00.535 --> 00:27:02.495
There is no problem because
there is no children at all.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5987-0
00:27:02.965 --> 00:27:06.811
So for all internal nodes, if
you see that node value is

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5987-1
00:27:06.811 --> 00:27:10.858
smaller than its children, so I
can tell that this is a min

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5987-2
00:27:10.858 --> 00:27:11.195
heap.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/5993-0
00:27:13.015 --> 00:27:14.105
What about the right side?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6001-0
00:27:14.755 --> 00:27:16.345
It is a complete binary tree.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6009-0
00:27:16.395 --> 00:27:18.005
OK, first property satisfied.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6017-0
00:27:18.355 --> 00:27:19.435
What about the second property?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6047-0
00:27:20.685 --> 00:27:24.906
17 is greater than its children,
15 and 10:15 is greater than its

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6047-1
00:27:24.906 --> 00:27:28.295
children 6 and 10, and 10 is
greater than its child.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6049-0
00:27:28.305 --> 00:27:28.635
Seven.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6062-0
00:27:29.085 --> 00:27:31.182
And for leaves, there are no
children, so there is no

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6062-1
00:27:31.182 --> 00:27:32.075
question of comparison.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6069-0
00:27:32.345 --> 00:27:34.225
So this is a Max heap.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6071-0
00:27:36.695 --> 00:27:36.835
Cool.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6083-0
00:27:38.765 --> 00:27:41.315
Let me know what do you think
about this one.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6096-0
00:27:41.745 --> 00:27:44.355
Is it a min heap or is it a Max
heap?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6106-0
00:27:44.445 --> 00:27:45.825
Or is it not a heap at all?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6117-0
00:27:47.485 --> 00:27:49.965
If it is not a heap, why is it
not a heap?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6127-0
00:27:51.195 --> 00:27:52.835
Yeah, I got the answers none.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6132-0
00:27:52.845 --> 00:27:53.685
Not a heap, not a heap.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6135-0
00:27:53.695 --> 00:27:54.145
Very good.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6142-0
00:27:54.155 --> 00:27:55.115
But why is it not a heap?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6146-0
00:27:57.285 --> 00:27:57.795
Very good.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6155-0
00:27:57.805 --> 00:27:59.115
Yeah, Vinay was bang on, he
told.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6163-0
00:27:59.125 --> 00:28:01.315
It's not even a complete binary
tree, right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6175-0
00:28:01.325 --> 00:28:03.775
The very first step is whatever
tree is given.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6190-0
00:28:04.065 --> 00:28:06.755
You will check if it is a
complete binary tree or not.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6197-0
00:28:07.025 --> 00:28:07.975
In this case it is not.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6211-0
00:28:07.985 --> 00:28:11.550
Because of this, you know,
notorious guy, he's not as left

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6211-1
00:28:11.550 --> 00:28:12.275
as possible.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6224-0
00:28:12.545 --> 00:28:15.615
He should have been the child
here, but he's somewhere here.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6245-0
00:28:15.725 --> 00:28:19.205
So this whole tree is not a
complete binary tree because it

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6245-1
00:28:19.205 --> 00:28:20.945
is not a complete binary tree.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6258-0
00:28:21.035 --> 00:28:22.625
There is no way this can be a
heap.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6260-0
00:28:23.655 --> 00:28:23.935
Perfect.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6264-0
00:28:25.475 --> 00:28:26.335
What about this guy?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6270-0
00:28:28.465 --> 00:28:28.855
Easy.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6275-0
00:28:28.865 --> 00:28:30.045
Satisfying the shape property.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6283-0
00:28:32.605 --> 00:28:33.855
Still, here it is fully filled.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6298-0
00:28:33.865 --> 00:28:37.425
Here it is left as possible, so
this is a complete binary tree.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6305-0
00:28:37.525 --> 00:28:38.775
But what about the next step?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6310-0
00:28:38.785 --> 00:28:39.615
Let's inspect it.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6317-0
00:28:39.985 --> 00:28:40.935
Right, let's inspect it.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6326-0
00:28:40.945 --> 00:28:42.315
A couple of you are jumping the
bridge.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6340-0
00:28:42.325 --> 00:28:46.095
You're telling min heap and you
know that can deceive you.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6361-0
00:28:46.145 --> 00:28:50.066
It is not a heap actually, but
let's see one is smaller than

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6361-1
00:28:50.066 --> 00:28:52.315
five and it is smaller than
seven.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6366-0
00:28:52.325 --> 00:28:53.415
OK, it is promising.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6386-0
00:28:53.465 --> 00:28:57.022
Maybe it looks like a min heap,
but I should check every node

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6386-1
00:28:57.022 --> 00:28:57.595
like that.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6404-0
00:28:57.645 --> 00:28:59.851
Yeah, I should not jump the
bridge just by, you know,

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6404-1
00:28:59.851 --> 00:29:01.035
looking at one or two values.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6418-0
00:29:01.705 --> 00:29:04.825
So one is smaller than five and
seven no problem.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6428-0
00:29:05.175 --> 00:29:08.625
But here, if you see five is
smaller than 10.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6432-0
00:29:08.685 --> 00:29:09.605
OK, very good.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6459-0
00:29:09.685 --> 00:29:14.503
But what about this five is not
smaller than four, so here there

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6459-1
00:29:14.503 --> 00:29:18.505
is a problem coming up right
because of this problem.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6465-0
00:29:18.595 --> 00:29:20.515
This whole thing is not a heap
now.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6470-0
00:29:22.665 --> 00:29:23.175
Perfect.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6479-0
00:29:23.475 --> 00:29:25.595
Is everyone clear with what is a
heap now?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6506-0
00:29:27.315 --> 00:29:30.981
A heap is a special data
structure, a tree based data

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6506-1
00:29:30.981 --> 00:29:34.646
structure which follows 2
properties, complete binary

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6506-2
00:29:34.646 --> 00:29:34.985
tree.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6517-0
00:29:34.995 --> 00:29:37.537
That is the first property,
second property is the heap

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6517-1
00:29:37.537 --> 00:29:37.945
property.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6525-0
00:29:37.955 --> 00:29:39.645
That is, it cannot be a mixture.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6529-0
00:29:39.655 --> 00:29:40.085
And so on.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6568-0
00:29:40.475 --> 00:29:44.312
It should either be a min heap
where every node is smaller than

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6568-1
00:29:44.312 --> 00:29:48.028
its children, or it is a Max
heap where every node is greater

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6568-2
00:29:48.028 --> 00:29:50.785
than its children or it is not a
heap at all.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6580-0
00:29:51.935 --> 00:29:54.365
Yeah, it is only min heap or Max
heap.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6597-0
00:29:54.435 --> 00:29:57.178
We cannot have a mixture of both
of them, like some parts are

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6597-1
00:29:57.178 --> 00:29:57.355
Max.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6605-0
00:29:57.365 --> 00:30:00.765
Some parts are men that cannot
be there, yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6614-0
00:30:02.795 --> 00:30:03.595
These are not heaps.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6628-0
00:30:04.575 --> 00:30:07.365
You can say it's complete binary
tree based data structure.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6633-0
00:30:07.375 --> 00:30:07.955
Yeah, exactly.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6638-0
00:30:07.965 --> 00:30:09.005
We can also say like that.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6644-0
00:30:09.335 --> 00:30:13.515
Yeah, well, deep representation.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6668-0
00:30:14.095 --> 00:30:17.151
How do you represent a heap if
you have listened to the last

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6668-1
00:30:17.151 --> 00:30:19.805
classes carefully, you will
immediately answer this.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6676-0
00:30:21.195 --> 00:30:22.345
So what is a heap?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6684-0
00:30:22.555 --> 00:30:25.125
Heap is a complete binary tree,
right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6697-0
00:30:25.655 --> 00:30:27.985
If it is a complete binary tree,
I will use an array.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6699-0
00:30:28.295 --> 00:30:28.575
Simple.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6706-0
00:30:30.245 --> 00:30:30.565
Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6711-0
00:30:30.575 --> 00:30:32.095
When all the elements are equal,
is it?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6718-0
00:30:32.105 --> 00:30:33.535
Yeah, you can call it either.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6754-0
00:30:33.545 --> 00:30:37.417
I mean heap or Max heap but but
as I told in most applications

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6754-1
00:30:37.417 --> 00:30:41.412
of heap we will not be allowing
equal numbers, we will only have

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6754-2
00:30:41.412 --> 00:30:42.395
distinct values.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6771-0
00:30:42.845 --> 00:30:46.040
But still with the definition
you can have some equals 2 S

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6771-1
00:30:46.040 --> 00:30:47.285
that is still possible.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6797-0
00:30:47.465 --> 00:30:50.844
Yeah, but in that case it will
depend on the other nodes you

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6797-1
00:30:50.844 --> 00:30:53.225
know, if it is, I mean heap or a
Max heap.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6826-0
00:30:55.945 --> 00:30:58.671
Since the heap is always a
complete, my retreat can be

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6826-1
00:30:58.671 --> 00:31:01.495
represent a heap as a array
easily and effectively, yes?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6867-0
00:31:02.865 --> 00:31:06.258
So the exact same slide that we
had in the last class, whatever

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6867-1
00:31:06.258 --> 00:31:09.703
we have, we will just, you know,
put the numbers 12345 and so on

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6867-2
00:31:09.703 --> 00:31:11.505
from top to bottom left to
right.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6880-0
00:31:11.805 --> 00:31:15.405
I'll put it inside an array and
left for any node.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6907-0
00:31:15.415 --> 00:31:18.381
The left child will be in two I
position right child will be two

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6907-1
00:31:18.381 --> 00:31:21.255
I plus one parent will be I by
two floor the exact same slide.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6912-0
00:31:22.375 --> 00:31:23.155
Yeah, so far, so good.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6939-0
00:31:24.495 --> 00:31:28.473
What all have you learned now if
a tree is given to you, will you

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6939-1
00:31:28.473 --> 00:31:31.185
be able to recognize if it is a
heap or not?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6946-0
00:31:32.565 --> 00:31:33.675
So far it is fine.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6968-0
00:31:33.725 --> 00:31:36.259
We have not learned anything
complex like building a heap or,

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6968-1
00:31:36.259 --> 00:31:38.015
you know, removing insertion and
all that.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/6979-0
00:31:38.285 --> 00:31:40.905
But you know how to inspect what
is a heap or not?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7008-0
00:31:41.925 --> 00:31:46.012
Yeah, these all correlate to the
basic understanding of bloom

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7008-1
00:31:46.012 --> 00:31:49.175
stacks onomy, meaning, you know
what is a heap?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7015-0
00:31:49.185 --> 00:31:50.345
You know the definition of it.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7021-0
00:31:50.355 --> 00:31:51.555
You know the property of it.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7030-0
00:31:51.825 --> 00:31:53.815
You know how to identify
something?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7039-0
00:31:53.825 --> 00:31:55.675
Ah, epoch, which is very
important.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7041-0
00:31:55.985 --> 00:31:56.815
Before we go further.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7052-0
00:31:59.615 --> 00:32:02.045
OK, let's have a look at this
example.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7069-0
00:32:02.115 --> 00:32:06.350
Interesting one and you will let
me know if this is a heap or not

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7069-1
00:32:06.350 --> 00:32:07.055
real quick.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7076-0
00:32:13.155 --> 00:32:14.025
Yeah, real quick.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7080-0
00:32:14.035 --> 00:32:14.605
Not a heap.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7090-0
00:32:14.615 --> 00:32:17.825
If not heap, why is it violating
shape property?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7098-0
00:32:17.835 --> 00:32:19.155
Or is it violating keep
property?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7104-0
00:32:20.215 --> 00:32:21.415
Which property is it violating?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7115-0
00:32:24.005 --> 00:32:26.335
It is perfectly valid complete
binary tree, right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7134-0
00:32:26.345 --> 00:32:29.823
Because until the last Butler
one level all are completely

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7134-1
00:32:29.823 --> 00:32:30.235
filled.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7142-0
00:32:30.245 --> 00:32:32.125
Last level is from left to right
no problem.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7153-0
00:32:32.935 --> 00:32:35.888
So it is violating the heap
property which which guy is

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7153-1
00:32:35.888 --> 00:32:36.415
violating.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7166-0
00:32:37.865 --> 00:32:40.365
Yeah, but before that, maybe
let's take a different route.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7177-0
00:32:42.015 --> 00:32:46.265
For now, let's just imagine the
left part of it right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7210-0
00:32:46.275 --> 00:32:49.922
Maybe only the left part of it
that I've highlighted try to

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7210-1
00:32:49.922 --> 00:32:53.325
only look at this and tell me if
this is a heap or not.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7224-0
00:32:54.935 --> 00:32:57.325
All of us agreed that the whole
tree was not a heap.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7230-0
00:32:57.335 --> 00:32:57.855
OK, fine.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7237-0
00:32:58.245 --> 00:32:59.745
I have now drawn something for
you.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7245-0
00:32:59.755 --> 00:33:00.985
I've highlighted something.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7251-0
00:33:01.295 --> 00:33:02.325
Is that a heap?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7264-0
00:33:02.335 --> 00:33:04.565
And if that is a heap, what type
of a heap is it?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7280-0
00:33:05.095 --> 00:33:08.025
Yes, it is a Max heap right 14
is greater than.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7301-0
00:33:08.035 --> 00:33:10.787
It's still run 10 and 12:10 is
greater than 7:00 and 9:12 is

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7301-1
00:33:10.787 --> 00:33:11.915
greater than five and 11.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7313-0
00:33:12.685 --> 00:33:15.915
So this part of it is a Max
heap.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7319-0
00:33:17.615 --> 00:33:18.875
What about this right part?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7327-0
00:33:19.715 --> 00:33:21.495
He just focus on this one.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7330-0
00:33:21.785 --> 00:33:22.415
Is this a heap?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7346-0
00:33:24.995 --> 00:33:28.245
Eight is greater than four and
six, four is greater than three.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7357-0
00:33:28.355 --> 00:33:30.395
So this side also is a Max heap.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7360-0
00:33:31.465 --> 00:33:32.035
No problem.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7373-0
00:33:32.045 --> 00:33:35.355
All of these are fine, but who
played the spoilsport here?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7384-0
00:33:35.735 --> 00:33:38.285
The root this theory not obeyed.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7395-0
00:33:39.065 --> 00:33:41.515
If this was a 20 instead of A2.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7411-0
00:33:41.525 --> 00:33:46.292
If this was a 20 then I could
have called the whole tree as a

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7411-1
00:33:46.292 --> 00:33:47.445
Max heap right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7428-0
00:33:47.575 --> 00:33:50.745
So in this example, the left
side was also a Max heap.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7446-0
00:33:51.075 --> 00:33:55.154
Right side is also a Max heap,
whereas that one element

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7446-1
00:33:55.154 --> 00:33:56.465
notorious element.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7458-0
00:33:56.575 --> 00:33:59.735
Because of that, this whole tree
is now not a heap.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7463-0
00:34:01.245 --> 00:34:01.535
Correct.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7480-0
00:34:02.855 --> 00:34:06.660
Is this part clear for everyone
and this notorious node could

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7480-1
00:34:06.660 --> 00:34:07.825
have been anywhere?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7488-0
00:34:07.835 --> 00:34:09.325
Also, do you agree to that?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7506-0
00:34:09.335 --> 00:34:12.172
Also, it may not always been the
route it could have been

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7506-1
00:34:12.172 --> 00:34:12.905
somewhere here.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7526-0
00:34:12.915 --> 00:34:15.701
It could have been somewhere
here or it can be anywhere in

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7526-1
00:34:15.701 --> 00:34:16.125
the tree.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7539-0
00:34:16.555 --> 00:34:21.006
But even if there is one
violating node, then that is no

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7539-1
00:34:21.006 --> 00:34:22.645
longer a heap, right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7550-0
00:34:22.775 --> 00:34:25.855
So this is a common thing that
can happen, right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7578-0
00:34:26.075 --> 00:34:29.210
So all of those are proper, but
there are certain nodes who are

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7578-1
00:34:29.210 --> 00:34:32.100
violating and because of that
the whole tree becomes not a

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7578-2
00:34:32.100 --> 00:34:32.345
heap.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7591-0
00:34:32.445 --> 00:34:34.115
This is this is just a normal
tree.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7597-0
00:34:34.125 --> 00:34:35.395
Now complete binary tree.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7616-0
00:34:36.545 --> 00:34:42.187
So in this cases, if they want
to make it a hit, what should I

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7616-1
00:34:42.187 --> 00:34:42.455
do?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7636-0
00:34:43.905 --> 00:34:47.283
Yeah, one clever answer could be
that I will just replace the two

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7636-1
00:34:47.283 --> 00:34:48.715
with, you know, some number.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7669-0
00:34:48.865 --> 00:34:53.384
So something like say 20 or 15
or something which is greater

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7669-1
00:34:53.384 --> 00:34:57.902
than this 14 and eight so that
it becomes a heap but that is

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7669-2
00:34:57.902 --> 00:34:59.235
not the right way.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7687-0
00:34:59.365 --> 00:35:01.945
So in this case, what we are
doing is we are actually

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7687-1
00:35:01.945 --> 00:35:03.235
updating some value, right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7707-0
00:35:03.245 --> 00:35:06.653
We are just manipulating the
node itself and then we are

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7707-1
00:35:06.653 --> 00:35:08.745
claiming that this becomes a
keep.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7714-0
00:35:09.115 --> 00:35:10.385
We are not telling about that.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7753-0
00:35:10.885 --> 00:35:14.534
We are telling just with the
present elements, whatever is

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7753-1
00:35:14.534 --> 00:35:17.998
there instead of updating or
changing the value, can we

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7753-2
00:35:17.998 --> 00:35:21.956
rotate or move some things here
and there in order to make it a

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7753-3
00:35:21.956 --> 00:35:22.265
heap?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7755-0
00:35:23.455 --> 00:35:23.685
Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7760-0
00:35:23.695 --> 00:35:24.205
Is that possible?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7768-0
00:35:26.045 --> 00:35:27.805
Yeah, NANDINI and others.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7774-0
00:35:28.035 --> 00:35:29.885
You in the right direction,
right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7816-0
00:35:31.305 --> 00:35:34.108
We were discussing the methods
we looked at it, so in this

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7816-1
00:35:34.108 --> 00:35:37.053
whole example we saw that you
know this part is a heap, right

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7816-2
00:35:37.053 --> 00:35:39.665
side is also a heap, but there
was a problematic node.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7834-0
00:35:40.585 --> 00:35:45.361
So if I somehow move this or you
know do something, will I be

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7834-1
00:35:45.361 --> 00:35:47.055
able to create a heap?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7840-0
00:35:47.345 --> 00:35:48.595
Let's look at it.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7854-0
00:35:49.245 --> 00:35:52.595
Compare this problematic node
with its children 14 and eight.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7860-0
00:35:52.725 --> 00:35:54.085
So who's the largest among them?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7869-0
00:35:56.055 --> 00:35:56.855
Yahoo's the largest 14.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7890-0
00:35:58.275 --> 00:36:03.971
14 So can I swap them if I swap
them like this 14 comes here and

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7890-1
00:36:03.971 --> 00:36:05.285
two comes here.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7910-0
00:36:06.315 --> 00:36:09.731
So is it the top part now
satisfying 14 is greater than

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7910-1
00:36:09.731 --> 00:36:10.585
two and eight?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7918-0
00:36:10.655 --> 00:36:12.205
No problem there is now.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7944-0
00:36:12.215 --> 00:36:15.671
If you see the below part here,
it is violating now right

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7944-1
00:36:15.671 --> 00:36:19.365
because two is not greater than
its children 10 and 12 right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7954-0
00:36:19.375 --> 00:36:21.985
Again same problem, but here it
was all good.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7961-0
00:36:22.035 --> 00:36:23.685
It is greater than four and six.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7986-0
00:36:23.695 --> 00:36:27.415
Four is greater than three no
problem, but in this part, after

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7986-1
00:36:27.415 --> 00:36:29.895
this swap you have not fixed the
problem.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7999-0
00:36:29.965 --> 00:36:32.924
You have just postponed the
problem or you have pushed the

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/7999-1
00:36:32.924 --> 00:36:33.575
problem down.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8005-0
00:36:34.675 --> 00:36:35.505
Do you realize this?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8008-0
00:36:35.995 --> 00:36:36.695
All of you guys?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8014-0
00:36:36.705 --> 00:36:37.535
Yeah, it's very important.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8039-0
00:36:38.375 --> 00:36:41.505
You swapped the top level
because that was a problematic

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8039-1
00:36:41.505 --> 00:36:44.745
node, and then after the swap
that became clear till here.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8060-0
00:36:44.755 --> 00:36:47.387
If you just observe 14 is
greater than its child two and

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8060-1
00:36:47.387 --> 00:36:48.495
eight, it became a heap.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8069-0
00:36:49.255 --> 00:36:51.925
But you have actually not solved
the complete problem.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8078-0
00:36:52.215 --> 00:36:53.945
The problem has just been pushed
below.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8092-0
00:36:54.345 --> 00:36:57.725
If you see here, 2 is not
greater than 10 and 12.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8098-0
00:36:58.175 --> 00:36:59.825
Again, it is a violation, right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8106-0
00:37:00.915 --> 00:37:02.085
So what should I be doing now?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8122-0
00:37:02.415 --> 00:37:06.535
Can I again take the maximum
value out of 210 and 12?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8126-0
00:37:06.545 --> 00:37:07.345
Who is largest?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8137-0
00:37:07.595 --> 00:37:10.385
A very good 12, so I will swap
these two people.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8149-0
00:37:10.915 --> 00:37:13.595
So now this will become 12 and
this will become two.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8167-0
00:37:14.575 --> 00:37:17.894
So now 12 is greater than 10 and
then you know 12 is greater than

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8167-1
00:37:17.894 --> 00:37:18.095
two.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8176-0
00:37:18.105 --> 00:37:19.645
So till here it is perfect.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8186-0
00:37:20.185 --> 00:37:22.245
But now again there is a problem
here, right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8201-0
00:37:22.255 --> 00:37:24.975
You have again pushed the
problem down, so I will take.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8211-0
00:37:25.035 --> 00:37:26.985
I'll compare these two with five
and 11.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8217-0
00:37:27.195 --> 00:37:28.665
So 11 is the greatest.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8236-0
00:37:28.935 --> 00:37:32.812
So I will again swap them so 11
will come here and two will come

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8236-1
00:37:32.812 --> 00:37:33.945
here in that stage.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8248-0
00:37:33.955 --> 00:37:35.715
Can I call that whole tree to be
a heap?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8251-0
00:37:37.945 --> 00:37:38.255
Yes.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8253-0
00:37:38.265 --> 00:37:38.595
No, maybe.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8261-0
00:37:40.535 --> 00:37:42.005
More 11 to root?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8263-0
00:37:42.575 --> 00:37:42.885
No.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8265-0
00:37:42.895 --> 00:37:43.165
Why?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8276-0
00:37:43.175 --> 00:37:44.665
Why should I move to root and so
on?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8283-0
00:37:44.675 --> 00:37:47.005
No, that's it here.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8289-0
00:37:47.015 --> 00:37:48.645
I could have just stopped it,
yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8300-0
00:37:52.645 --> 00:37:55.085
Who is this concept clear guys
for everyone? Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8312-0
00:38:01.445 --> 00:38:04.015
Do operation left tree and right
Tree as a.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8318-0
00:38:05.585 --> 00:38:06.475
So what does that do?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8326-0
00:38:06.485 --> 00:38:07.875
Operations or I didn't get that
part.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8332-0
00:38:10.005 --> 00:38:10.575
Yeah, all of you.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8345-0
00:38:10.585 --> 00:38:12.435
Let let me just repeat what we
just did.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8353-0
00:38:13.655 --> 00:38:15.665
There was a particular tree
given to us.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8429-0
00:38:15.795 --> 00:38:20.060
It was already a complete binary
tree and it was obeying some

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8429-1
00:38:20.060 --> 00:38:24.393
sort of a Max heap, but there
were some node who was violating

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8429-2
00:38:24.393 --> 00:38:28.795
that property and that node is
called as a problematic node and

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8429-3
00:38:28.795 --> 00:38:33.198
we look at the problematic node
with its children and we try to

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8429-4
00:38:33.198 --> 00:38:37.325
somehow swap it and we keep
doing that until the whole tree

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8429-5
00:38:37.325 --> 00:38:38.975
becomes my desired heap.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8433-0
00:38:39.855 --> 00:38:40.245
Right.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8443-0
00:38:40.635 --> 00:38:43.815
This process is called as hippie
fication.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8449-0
00:38:44.875 --> 00:38:45.485
Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8462-0
00:38:45.635 --> 00:38:49.365
And now in this case, my desire
was to create a Max heap.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8485-0
00:38:50.065 --> 00:38:54.574
That is why I compared my two
with OT and eight and I took my

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8485-1
00:38:54.574 --> 00:38:56.755
largest element at every swap.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8504-0
00:38:56.765 --> 00:39:01.784
I was taking the largest, so my
intention here was to create a

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8504-1
00:39:01.784 --> 00:39:03.855
Max heap out of it, right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8515-0
00:39:04.345 --> 00:39:08.045
So this whole process is then
called as Max EP 5.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8521-0
00:39:09.835 --> 00:39:10.035
Right.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8551-0
00:39:11.465 --> 00:39:15.095
If my intention was to create a
min heap, then I could have

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8551-1
00:39:15.095 --> 00:39:18.664
compared and in every stage I
would have swapped it to the

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8551-2
00:39:18.664 --> 00:39:20.055
minimum element, right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8567-0
00:39:20.225 --> 00:39:24.367
And then at that time, I will
tell I'm doing min EPP file

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8567-1
00:39:24.367 --> 00:39:24.795
right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8587-0
00:39:25.065 --> 00:39:29.035
So these are all just umbrella
terms, but this whole concept is

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8587-1
00:39:29.035 --> 00:39:30.895
called hippie fication, right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8629-0
00:39:31.125 --> 00:39:34.688
I'll again repeat when there is
a tree given to you which is

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8629-1
00:39:34.688 --> 00:39:38.368
already a complete binary tree,
but there are some nodes which

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8629-2
00:39:38.368 --> 00:39:42.105
are problematic or meaning who
are violating the heap property.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8644-0
00:39:43.395 --> 00:39:47.364
And if you want to convert it
into a heap of your desired

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8644-1
00:39:47.364 --> 00:39:48.185
form, right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8666-0
00:39:48.195 --> 00:39:51.167
Maybe you want to create a Max
heap or you want to create a min

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8666-1
00:39:51.167 --> 00:39:52.095
heap from that tree.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8689-0
00:39:53.025 --> 00:39:57.088
That process of somehow swapping
the elements and getting to the

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8689-1
00:39:57.088 --> 00:39:59.525
desired heap is called heap
ification.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8693-0
00:40:01.155 --> 00:40:01.745
Is that clear?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8695-0
00:40:01.755 --> 00:40:02.155
All of you?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8710-0
00:40:04.765 --> 00:40:07.075
Yes, 2 and 14 that will not
solve the problem.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8717-0
00:40:07.085 --> 00:40:08.275
Again, you should do a swap.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8728-0
00:40:08.285 --> 00:40:09.595
That is what I was again
repeating.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8733-0
00:40:09.605 --> 00:40:11.235
Amit, 14, will come here.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8746-0
00:40:11.245 --> 00:40:13.015
Two will come here that will not
solve the problem.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8762-0
00:40:13.065 --> 00:40:15.775
Again, you will swap 2 and 12,
so two will come here.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8771-0
00:40:15.835 --> 00:40:16.885
Well, will come here.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8803-0
00:40:16.995 --> 00:40:19.845
That will also not solve the
problem, so again you will swap

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8803-1
00:40:19.845 --> 00:40:22.741
this so this will become 11 and
this will become two and that

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8803-2
00:40:22.741 --> 00:40:23.815
will solve the problem.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8814-0
00:40:23.825 --> 00:40:27.905
In that case, the whole tree
will look like a maxim, right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8859-0
00:40:28.925 --> 00:40:31.954
So there are a lot of
misconceptions on these

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8859-1
00:40:31.954 --> 00:40:36.168
terminologies, so let's be very
clear from not a heap to making

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8859-2
00:40:36.168 --> 00:40:39.855
it a heap by this process of,
you know, again and again

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8859-3
00:40:39.855 --> 00:40:42.225
swapping is called hippie
fication.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8884-0
00:40:43.085 --> 00:40:46.999
And if your aim is to create a
Max heap, then you apply

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8884-1
00:40:46.999 --> 00:40:48.955
something called as Max CP5.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8901-0
00:40:49.345 --> 00:40:52.160
If you want to create a min
heap, you apply something called

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8901-1
00:40:52.160 --> 00:40:52.575
as a min.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8904-0
00:40:52.585 --> 00:40:53.075
Heapify.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8909-0
00:40:53.465 --> 00:40:54.515
That's pretty much right.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8918-0
00:40:57.065 --> 00:40:58.195
Let's let's you know quickly.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8922-0
00:40:58.205 --> 00:40:59.165
Look at this. Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8931-0
00:41:02.345 --> 00:41:03.435
I have something even here.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8964-0
00:41:03.485 --> 00:41:07.334
It was the same note, so I just
swapped those two elements and I

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8964-1
00:41:07.334 --> 00:41:10.175
made it something like this as
Amit and others.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8969-0
00:41:10.185 --> 00:41:12.701
All of you are telling the
problem is still not solved

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8969-1
00:41:12.701 --> 00:41:12.975
right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/8985-0
00:41:13.165 --> 00:41:16.265
So I'll have to again compare
this and swap with the largest.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9000-0
00:41:16.275 --> 00:41:19.535
So two is compared with 10 and
12, so 12 was the largest.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9035-0
00:41:19.545 --> 00:41:23.884
So I'll swap 12 and two how it
became like this again, still it

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9035-1
00:41:23.884 --> 00:41:28.155
is not a heap because the two is
not greater than five and 11.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9048-0
00:41:28.425 --> 00:41:31.355
So again, I will compare them
and I will swap them.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9066-0
00:41:31.365 --> 00:41:36.888
And now this tree is a maxim,
and in this whole problem my

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9066-1
00:41:36.888 --> 00:41:39.695
focus was to create a maximum.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9080-0
00:41:40.235 --> 00:41:43.105
So the process that I've applied
here becomes Max.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9088-0
00:41:43.115 --> 00:41:46.475
CP5, let me now just take some
questions.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9096-0
00:41:46.635 --> 00:41:47.715
So Surendran had a question.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9099-0
00:41:47.725 --> 00:41:48.505
My assumption right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9118-0
00:41:48.515 --> 00:41:52.008
Uh, if parent is problematic,
move the node downward and if

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9118-1
00:41:52.008 --> 00:41:54.045
child is the problem, move
upward.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9123-0
00:41:54.055 --> 00:41:54.825
No, not at all.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9138-0
00:41:55.475 --> 00:41:59.845
Always the problem will be in an
internal node only, right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9162-0
00:42:00.195 --> 00:42:02.827
A leaf node can never have a
problem because it doesn't have

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9162-1
00:42:02.827 --> 00:42:05.285
a children's, so only the
internal nodes have a problem.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9164-0
00:42:05.295 --> 00:42:05.805
Problem.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9180-0
00:42:06.135 --> 00:42:09.913
So compare it with its children
and take the maximum and swap

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9180-1
00:42:09.913 --> 00:42:10.095
it.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9186-0
00:42:11.055 --> 00:42:11.905
That's pretty much right.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9199-0
00:42:11.915 --> 00:42:15.345
There is no this shortcuts of
downward upward and so on.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9211-0
00:42:15.675 --> 00:42:17.815
This is the exact same process
that you have to follow.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9222-0
00:42:18.755 --> 00:42:20.805
Take the problematic node
wherever he is.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9232-0
00:42:21.255 --> 00:42:24.335
Compare it with its your
children, right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9251-0
00:42:24.345 --> 00:42:27.592
Or one children wherever
possible, compare it with its

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9251-1
00:42:27.592 --> 00:42:29.835
children and swap accordingly,
right.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9266-0
00:42:29.845 --> 00:42:33.455
If you are aim is to create a
Max heap, take the largest.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9279-0
00:42:33.525 --> 00:42:36.125
If your aim is to create a min
heap, take this smallest.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9298-0
00:42:37.705 --> 00:42:39.992
So what is the process we need
to follow when there is a

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9298-1
00:42:39.992 --> 00:42:41.195
problem in more than one node?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9308-0
00:42:41.205 --> 00:42:42.795
This is exactly what we
followed, right.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9313-0
00:42:43.005 --> 00:42:43.855
You'll have two.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9336-0
00:42:44.725 --> 00:42:48.081
Let's take one problematic node
complete that whole thing, and

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9336-1
00:42:48.081 --> 00:42:50.105
then go for another problematic
node.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9339-0
00:42:50.115 --> 00:42:51.685
And so on, right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9346-0
00:42:54.225 --> 00:42:54.875
So what are?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9355-0
00:42:54.885 --> 00:42:57.065
Uh, So what do the numbers in
these nodes are?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9362-0
00:42:57.075 --> 00:42:58.115
They are just elements.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9364-0
00:42:58.185 --> 00:42:58.535
Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9384-0
00:42:58.545 --> 00:43:01.348
So they are say it is the roll
number of someone or marks of

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9384-1
00:43:01.348 --> 00:43:01.715
someone.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9396-0
00:43:01.845 --> 00:43:04.335
It just like your presentation,
right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9410-0
00:43:04.705 --> 00:43:06.705
Or it could be the agent,
whatever, right.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9434-0
00:43:07.925 --> 00:43:11.297
If one node is problematic, then
we can do typification of our N

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9434-1
00:43:11.297 --> 00:43:13.475
or north number of nodes are
problematic.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9439-0
00:43:13.485 --> 00:43:14.635
Then we can do application.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9456-0
00:43:14.765 --> 00:43:17.415
Yeah, you can do for one also or
for north also, right.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9496-0
00:43:17.885 --> 00:43:22.078
So for one problematic node, if
you apply application on that

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9496-1
00:43:22.078 --> 00:43:26.067
node, he will rectify that
whoever is their children, they

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9496-2
00:43:26.067 --> 00:43:30.462
will get, you know keeping fried
or they will get, you know into

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9496-3
00:43:30.462 --> 00:43:30.935
a heap.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9510-0
00:43:30.985 --> 00:43:33.672
But what if there were some
other problems here near 8 or

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9510-1
00:43:33.672 --> 00:43:34.135
something?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9518-0
00:43:34.145 --> 00:43:36.105
Also, so I should have again
applied there.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9521-0
00:43:37.815 --> 00:43:38.145
Right.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9535-0
00:43:38.555 --> 00:43:42.065
Do we do if there is only one
bad node or even there?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9568-0
00:43:42.075 --> 00:43:45.392
Yeah, the same question we can
keep doing that in this example

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9568-1
00:43:45.392 --> 00:43:48.762
22826 swap will be faster, but
yeah, we should not be doing all

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9568-2
00:43:48.762 --> 00:43:49.025
that.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9572-0
00:43:49.035 --> 00:43:49.305
Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9577-0
00:43:49.315 --> 00:43:51.145
Again, this is the process.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9609-0
00:43:51.155 --> 00:43:54.275
That is, what is application and
we should not be resorting to

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9609-1
00:43:54.275 --> 00:43:57.444
some other random swaps and one
yeah, you should start from the

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9609-2
00:43:57.444 --> 00:43:58.285
problematic node.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9619-0
00:43:58.375 --> 00:44:00.295
Look at their children and do
the swap.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9638-0
00:44:00.495 --> 00:44:03.904
We should not restructure the
tree in some other, you know,

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9638-1
00:44:03.904 --> 00:44:05.495
faster ways and so on, yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9651-0
00:44:07.315 --> 00:44:09.579
The the IT will definitely
disturb the parent child

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9651-1
00:44:09.579 --> 00:44:10.145
relationship.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9674-0
00:44:10.155 --> 00:44:13.227
What you will get will be a
completely different tree, but

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9674-1
00:44:13.227 --> 00:44:15.205
that is what you intend to do,
right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9701-0
00:44:15.215 --> 00:44:18.378
You intend to create a maxim,
then this is the only option,

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9701-1
00:44:18.378 --> 00:44:21.645
but definitely you're right,
this swapping will cost certain.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9707-0
00:44:21.655 --> 00:44:23.545
You know, disruptions here,
right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9749-0
00:44:23.555 --> 00:44:26.912
For example, here two was the
parent of 14, whereas at the end

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9749-1
00:44:26.912 --> 00:44:30.162
of the day, if you see two and
14 are, you know not even you

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9749-2
00:44:30.162 --> 00:44:32.773
know closely related that
becomes like the great

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9749-3
00:44:32.773 --> 00:44:33.945
grandfather and so on.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9752-0
00:44:34.635 --> 00:44:35.215
But that's fine.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9756-0
00:44:37.495 --> 00:44:37.715
Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9777-0
00:44:37.725 --> 00:44:38.375
Is this clear guys?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9781-0
00:44:38.385 --> 00:44:41.391
For all of you, how do we decide
we need to do min heap or Max

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9781-1
00:44:41.391 --> 00:44:41.915
separation?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9792-0
00:44:41.925 --> 00:44:44.285
That is, that will be known or
that is your decision.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9800-0
00:44:44.295 --> 00:44:45.275
Like what do you want?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9812-0
00:44:45.795 --> 00:44:48.215
If you want a Max heap, you will
do Max CP5.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9822-0
00:44:48.455 --> 00:44:50.585
If you want a min heap you will
do min heapify.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9825-0
00:44:52.635 --> 00:44:52.845
Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9834-0
00:44:52.855 --> 00:44:53.975
Is this clear guys for all of
you?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9843-0
00:44:55.975 --> 00:44:56.945
We'll we'll proceed ahead.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9852-0
00:44:56.955 --> 00:44:58.525
I think most of the answers have
already.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9855-0
00:44:58.535 --> 00:45:00.125
You know, given right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9859-0
00:45:01.085 --> 00:45:01.315
Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9864-0
00:45:01.325 --> 00:45:02.665
We will take some other
examples.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9873-0
00:45:02.675 --> 00:45:04.985
Yeah, but this is the code for
it.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9886-0
00:45:05.095 --> 00:45:07.425
Yeah, we will keep doing the,
you know such swaps.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9915-0
00:45:07.735 --> 00:45:11.107
So basically if majority of heap
notes no that it's not majority

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9915-1
00:45:11.107 --> 00:45:13.545
and so on ways it it depends on
what you want.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9919-0
00:45:14.115 --> 00:45:15.365
I have a non heap.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9932-0
00:45:15.415 --> 00:45:17.805
Do I want a Max heap or do I
want a min heap?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9950-0
00:45:18.015 --> 00:45:21.193
Both are possible right at the
end of the day, it's all just

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9950-1
00:45:21.193 --> 00:45:21.505
swaps.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9963-0
00:45:21.745 --> 00:45:24.345
So if you want a maxi, you will
apply Max CP5.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9976-0
00:45:24.675 --> 00:45:28.185
If you want a min heap, you will
apply min heapify right.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9994-0
00:45:28.195 --> 00:45:31.750
It's just a requirement based on
the requirement you will decide

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/9994-1
00:45:31.750 --> 00:45:33.335
what application to do right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10006-0
00:45:33.465 --> 00:45:35.425
It is not based on the majority,
and so on.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10025-0
00:45:36.495 --> 00:45:39.338
Is it clear for all of you and
it just doesn't apply to

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10025-1
00:45:39.338 --> 00:45:39.845
numerical?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10053-0
00:45:39.855 --> 00:45:43.274
It can be for characters also,
because at the end of the day

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10053-1
00:45:43.274 --> 00:45:46.189
they are all, you know,
represented as number only,

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10053-2
00:45:46.189 --> 00:45:46.525
right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10065-0
00:45:46.535 --> 00:45:50.515
Puja, if you have a is nothing
but 65, right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10082-0
00:45:50.605 --> 00:45:54.896
The ASCII value of it and askey
value can be used for that,

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10082-1
00:45:54.896 --> 00:45:55.325
right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10109-0
00:45:55.335 --> 00:45:58.133
Your name can be also be
translated into your askey or

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10109-1
00:45:58.133 --> 00:46:01.338
unique code or whatever number,
and you can use that number or

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10109-2
00:46:01.338 --> 00:46:01.795
directly.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10115-0
00:46:01.805 --> 00:46:03.815
Also you can apply right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10128-0
00:46:05.025 --> 00:46:07.225
So how does this Max CP
algorithm look like?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10136-0
00:46:07.235 --> 00:46:08.965
This is exactly what we did now,
right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10156-0
00:46:10.395 --> 00:46:13.347
Uh, so you have an input array
which is the representation of

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10156-1
00:46:13.347 --> 00:46:14.585
that complete binary tree.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10164-0
00:46:14.915 --> 00:46:16.715
And yes, is an index of that
node.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10166-0
00:46:16.725 --> 00:46:17.065
Who?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10174-0
00:46:17.075 --> 00:46:18.325
What is a, you know?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10181-0
00:46:19.265 --> 00:46:19.395
Yes.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10188-0
00:46:20.725 --> 00:46:22.135
Can anyone take a guess what is
that?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10192-0
00:46:22.145 --> 00:46:22.685
Yes, node.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10205-0
00:46:23.685 --> 00:46:26.515
Yes, there's actually that
problematic note right.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10213-0
00:46:26.985 --> 00:46:29.735
And the results should be a heap
actually, right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10224-0
00:46:30.105 --> 00:46:31.855
So what does that Max CP
algorithm?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10247-0
00:46:31.865 --> 00:46:35.133
It is that whole array
representation of that complete

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10247-1
00:46:35.133 --> 00:46:37.865
binary tree and the problematic
node it left.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10263-0
00:46:37.875 --> 00:46:40.465
Tail will be in 2 S it's right,
tail will be in 2S plus one.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10276-0
00:46:40.735 --> 00:46:44.056
You do a simple if else
comparison this whole if else

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10276-1
00:46:44.056 --> 00:46:44.425
lines.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10291-0
00:46:44.435 --> 00:46:47.765
You are doing to get to know who
is the largest, right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10300-0
00:46:47.775 --> 00:46:49.085
That is what we have been doing
here.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10317-0
00:46:49.395 --> 00:46:51.445
We compared 214 and eight in
this case.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10322-0
00:46:51.455 --> 00:46:52.885
We compared 1210 and two.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10328-0
00:46:53.155 --> 00:46:54.325
Here we compared 11.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10359-0
00:46:54.375 --> 00:46:58.692
You know your 2511, you compare
them to find out the largest and

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10359-1
00:46:58.692 --> 00:47:02.876
after this line you would have
had the largest element in your

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10359-2
00:47:02.876 --> 00:47:04.005
largest variable.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10381-0
00:47:04.805 --> 00:47:07.990
Once you have that variable, if
that largest is not equal to

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10381-1
00:47:07.990 --> 00:47:10.495
your position, in some cases it
might be right.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10404-0
00:47:10.505 --> 00:47:13.944
For example, I run this on 11/5,
two eleven is the largest and

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10404-1
00:47:13.944 --> 00:47:16.455
that is where my mouth is
currently imagined.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10414-0
00:47:16.705 --> 00:47:19.025
Then I don't need to do any
swap, right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10436-0
00:47:19.275 --> 00:47:22.850
But if that largest is not that
you know parent position, then

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10436-1
00:47:22.850 --> 00:47:24.155
I'll have to swap that.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10441-0
00:47:25.145 --> 00:47:26.175
But that is not it.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10474-0
00:47:26.565 --> 00:47:29.953
Swapping one time will not do
the trick for me, because, as

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10474-1
00:47:29.953 --> 00:47:33.115
you saw in this example, you
might have just pushed the

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10474-2
00:47:33.115 --> 00:47:35.825
problem down, but you have not
fully solved it.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10492-0
00:47:36.535 --> 00:47:40.609
So what does this last line
again mean, and what does that

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10492-1
00:47:40.609 --> 00:47:43.095
comment about this whole
algorithm?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10497-0
00:47:46.595 --> 00:47:47.345
Yeah, very good.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10506-0
00:47:47.355 --> 00:47:51.015
Yeah, it is a recursive
algorithm.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10511-0
00:47:51.065 --> 00:47:51.665
You're right.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10562-0
00:47:51.845 --> 00:47:55.049
After every swap, again we
should have Max CP5B comma

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10562-1
00:47:55.049 --> 00:47:58.727
largest because in that position
I might have a problem again

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10562-2
00:47:58.727 --> 00:48:02.168
like this and after this web
again on this we know tree I

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10562-3
00:48:02.168 --> 00:48:06.024
should be running that algorithm
so that everything then becomes

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10562-4
00:48:06.024 --> 00:48:06.795
a heap right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10585-0
00:48:06.805 --> 00:48:11.225
So this particular algorithm
will take a problematic node and

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10585-1
00:48:11.225 --> 00:48:15.288
it will ensure that anything
that is rooted on this node

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10585-2
00:48:15.288 --> 00:48:15.715
right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10589-0
00:48:15.725 --> 00:48:16.585
Anything below that?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10603-0
00:48:16.595 --> 00:48:19.755
Yes, all of them will become a
heap in this case.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10610-0
00:48:19.765 --> 00:48:21.235
I passed the essays this node.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10623-0
00:48:21.545 --> 00:48:25.945
Finally, it ensured that all of
them have become a heap, right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10638-0
00:48:26.875 --> 00:48:29.822
If you had to write a min
heapify algorithm, what will

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10638-1
00:48:29.822 --> 00:48:30.625
change in this?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10641-0
00:48:33.035 --> 00:48:33.185
Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10653-0
00:48:34.305 --> 00:48:36.248
How do we identify the
problematic uh node

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10653-1
00:48:36.248 --> 00:48:37.015
programmatically?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10662-0
00:48:37.025 --> 00:48:38.175
Yeah, you should be comparing,
right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10683-0
00:48:39.475 --> 00:48:42.067
The same first topic how will
you analyze if there is

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10683-1
00:48:42.067 --> 00:48:43.315
something Max or min heap.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10702-0
00:48:44.025 --> 00:48:46.715
You will start comparing with
the children and you will get to

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10702-1
00:48:46.715 --> 00:48:48.295
know that if who is violating
right.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10712-0
00:48:49.545 --> 00:48:51.855
That is why initially I asked
you before proceeding.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10742-0
00:48:51.935 --> 00:48:55.624
Do you now know how to check if
something is a hip or not right

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10742-1
00:48:55.624 --> 00:48:59.197
that first node who is violating
will become your problematic

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10742-2
00:48:59.197 --> 00:48:59.485
node.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10749-0
00:49:00.555 --> 00:49:01.545
Yeah, very good, all of you.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10799-0
00:49:01.555 --> 00:49:05.720
So instead of these largest you
will have a smallest variable

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10799-1
00:49:05.720 --> 00:49:10.019
and here you will have a check
where instead of largest element

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10799-2
00:49:10.019 --> 00:49:14.183
you will use the lesser than
symbol right in code how will we

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10799-3
00:49:14.183 --> 00:49:15.795
check for uh brute yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10807-0
00:49:15.805 --> 00:49:17.315
The first node is always the
root. Guys.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10810-0
00:49:17.325 --> 00:49:17.715
Come on.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10813-0
00:49:18.515 --> 00:49:18.665
Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10820-0
00:49:19.785 --> 00:49:21.265
Please go through the notebooks.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10823-0
00:49:21.315 --> 00:49:21.715
Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10835-0
00:49:21.725 --> 00:49:25.075
So always the first element is
the root, right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10844-0
00:49:26.175 --> 00:49:28.975
Is it correct all of you when
you translate?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10864-0
00:49:30.865 --> 00:49:34.176
Your array like this 25 is
always the first element and

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10864-1
00:49:34.176 --> 00:49:35.595
that is the route right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10869-0
00:49:36.765 --> 00:49:37.965
It's all very simple stuff.
Cool.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10885-0
00:49:41.685 --> 00:49:44.735
The time complexity of Max CP5IS
log N why is it log in?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10887-0
00:49:47.275 --> 00:49:47.435
Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10902-0
00:49:50.195 --> 00:49:53.145
Think this is a binary tree or a
complete binary tree?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10913-0
00:49:54.095 --> 00:49:56.855
Maximum how much can a node get
swapped?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10917-0
00:49:57.635 --> 00:49:58.195
Any ideas?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10931-0
00:49:59.825 --> 00:50:04.020
Let's say suppose I have the
root element as the problematic

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10931-1
00:50:04.020 --> 00:50:04.845
node, right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10941-0
00:50:05.855 --> 00:50:08.495
This node, how much can he get
swapped?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10969-0
00:50:09.745 --> 00:50:14.522
Yeah, from root he can get
swapped until leaf right he in

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10969-1
00:50:14.522 --> 00:50:19.545
this case from 14 he came here.
But again two was a problem.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10980-0
00:50:19.605 --> 00:50:20.325
We go to app again.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/10983-0
00:50:20.335 --> 00:50:20.875
There's a problem.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11024-0
00:50:20.885 --> 00:50:24.534
He got swapped so that swap can
happen from top till it can

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11024-1
00:50:24.534 --> 00:50:28.426
happen until the root level also
from the leaf level also which

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11024-2
00:50:28.426 --> 00:50:32.075
is nothing but the height of the
tree right from top level.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11032-0
00:50:32.085 --> 00:50:34.205
Every stage there is some swaps
that is happening.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11043-0
00:50:34.715 --> 00:50:37.965
So what is the height of a
complete binary tree?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11045-0
00:50:40.865 --> 00:50:41.005
Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11058-0
00:50:42.875 --> 00:50:44.855
What is the height of a complete
binary tree?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11068-0
00:50:45.825 --> 00:50:49.025
It is nothing but log in right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11076-0
00:50:49.825 --> 00:50:51.035
We learned it in the last class.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11101-0
00:50:51.365 --> 00:50:54.067
So what happens is since the
complete binary tree is

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11101-1
00:50:54.067 --> 00:50:57.330
perfectly balanced, shifting up
a single node takes log N time,

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11101-2
00:50:57.330 --> 00:50:57.635
right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11107-0
00:50:57.645 --> 00:50:58.535
Maximum log in only.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11111-0
00:50:58.545 --> 00:50:59.415
It can swap.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11121-0
00:50:59.485 --> 00:51:01.685
It cannot go and swaps and so
on.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11125-0
00:51:04.095 --> 00:51:04.315
Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11131-0
00:51:04.325 --> 00:51:04.795
Is this clear?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11133-0
00:51:04.805 --> 00:51:05.395
Guys, all of you?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11136-0
00:51:08.015 --> 00:51:08.315
Yes.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11141-0
00:51:08.325 --> 00:51:08.765
No, maybe.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11147-0
00:51:08.775 --> 00:51:09.945
So what all do we know now?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11157-0
00:51:10.235 --> 00:51:13.435
I'll keep asking if a tree is
given.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11171-0
00:51:13.545 --> 00:51:15.985
Do we know how to check if it is
a heap or not?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11181-0
00:51:16.855 --> 00:51:18.605
We will check if it is CBT or
not.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11194-0
00:51:18.615 --> 00:51:21.485
We'll also see if it is Max CP
or min heap.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11234-0
00:51:21.555 --> 00:51:25.563
If it is not, then it is not a
heap at all that we know, and

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11234-1
00:51:25.563 --> 00:51:29.769
then we also saw that something
is a CPT, but it is not a heap,

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11234-2
00:51:29.769 --> 00:51:32.725
some some problematic nodes are
there right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11241-0
00:51:32.735 --> 00:51:34.345
Then how do I convert it?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11247-0
00:51:34.555 --> 00:51:35.605
It's your requirement.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11261-0
00:51:35.675 --> 00:51:39.405
If I want a Max heap, I will
apply Max CP5.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11278-0
00:51:39.895 --> 00:51:44.329
If you want a min heap, I will
apply min heap 5 and what are

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11278-1
00:51:44.329 --> 00:51:45.055
these two?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11291-0
00:51:45.125 --> 00:51:48.591
What is this whole technique
called and someone reply on

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11291-1
00:51:48.591 --> 00:51:48.895
that?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11303-0
00:51:50.295 --> 00:51:52.295
What is this Max CP5 meaning P5
etcetera.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11316-0
00:51:55.255 --> 00:51:56.425
And then they're all swaps.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11340-0
00:51:56.435 --> 00:52:00.585
Technically they are just swaps,
but this whole concept is called

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11340-1
00:52:00.585 --> 00:52:04.168
hippie fication, meaning
converting a non heap into heap

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11340-2
00:52:04.168 --> 00:52:04.545
right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11352-0
00:52:04.725 --> 00:52:07.955
That is called help if you right
Max CP5.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11390-0
00:52:07.965 --> 00:52:11.320
If you do, you will get maxi min
he P5P you do, you'll get min

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11390-1
00:52:11.320 --> 00:52:14.674
heap the whole point there is
you are just, you know, checking

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11390-2
00:52:14.674 --> 00:52:16.005
at every stage comparing.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11408-0
00:52:16.015 --> 00:52:19.047
If you know you want to Max, you
will choose the largest and

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11408-1
00:52:19.047 --> 00:52:19.295
swap.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11423-0
00:52:19.555 --> 00:52:23.327
If you are performing min heap,
you will choose the min and swap

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11423-1
00:52:23.327 --> 00:52:23.675
right.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11446-0
00:52:23.945 --> 00:52:28.635
As simple as that, but so far
have we learned about how to

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11446-1
00:52:28.635 --> 00:52:31.655
build a heap or how to insert a
heap?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11459-0
00:52:31.665 --> 00:52:33.715
How to remove from a heap all
those have you learned?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11463-0
00:52:34.245 --> 00:52:34.755
Not yet.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11472-0
00:52:34.985 --> 00:52:36.255
So that is what we will learn
now.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11481-0
00:52:37.825 --> 00:52:39.915
Building a heap can be done in
two ways.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11485-0
00:52:40.085 --> 00:52:41.285
OK, don't get confused.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11495-0
00:52:41.345 --> 00:52:43.655
You can do building a heap in
two ways.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11504-0
00:52:43.825 --> 00:52:45.235
We will learn both the
techniques.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11541-0
00:52:45.485 --> 00:52:49.112
The first technique is using
this typification itself keep

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11541-1
00:52:49.112 --> 00:52:53.169
building can be done effectively
using bottom up fashion given an

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11541-2
00:52:53.169 --> 00:52:56.918
arbitrary complete binary tree,
we can assume each leaf is a

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11541-3
00:52:56.918 --> 00:52:57.225
heap.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11579-0
00:52:58.495 --> 00:53:02.175
Yeah, this line is there any
confusion so the whole heap

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11579-1
00:53:02.175 --> 00:53:05.855
property or heap concept
revolves around this parent and

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11579-2
00:53:05.855 --> 00:53:09.858
child right the parent if it is
greater than child then it is

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11579-3
00:53:09.858 --> 00:53:10.245
Maxim.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11596-0
00:53:10.615 --> 00:53:14.794
If the parent is smaller than
leap or children, then it is min

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11596-1
00:53:14.794 --> 00:53:15.125
heap.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11605-0
00:53:15.625 --> 00:53:18.645
But for leaf nodes, there is no
children at all.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11618-0
00:53:19.885 --> 00:53:24.925
Then can I assume that all the
leaves are already heaps?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11622-0
00:53:27.405 --> 00:53:27.695
Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11643-0
00:53:27.705 --> 00:53:31.716
Can someone tell me that and
making a claim that all the

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11643-1
00:53:31.716 --> 00:53:33.475
leaves are already heaps?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11652-0
00:53:34.355 --> 00:53:37.675
For example, this 79523.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11672-0
00:53:37.785 --> 00:53:41.668
The six there's no problem with
it because it doesn't have a

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11672-1
00:53:41.668 --> 00:53:42.495
child at all.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11698-0
00:53:42.825 --> 00:53:45.540
If there is no child, then there
is no question of you know, it

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11698-1
00:53:45.540 --> 00:53:48.255
being greater than the child or
it being lesser than the child.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11724-0
00:53:48.265 --> 00:53:53.581
There is no question at all, so
I can very clearly comment that

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11724-1
00:53:53.581 --> 00:53:57.485
all these leaf nodes are already
heaps, right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11731-0
00:53:58.665 --> 00:54:00.235
So where can a problem happen?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11755-0
00:54:01.375 --> 00:54:04.786
Can a problem happen on a leaf
node or can it happen on an

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11755-1
00:54:04.786 --> 00:54:05.595
internal node?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11775-0
00:54:07.525 --> 00:54:10.300
If at all something is
violating, yeah, it need not be

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11775-1
00:54:10.300 --> 00:54:12.015
root, it can be here also,
right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11782-0
00:54:12.025 --> 00:54:13.375
In this case, it violated here.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11789-0
00:54:13.605 --> 00:54:15.995
In this case, it violated here,
right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11821-0
00:54:16.055 --> 00:54:19.911
So the violation might happen
only in the internal node and of

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11821-1
00:54:19.911 --> 00:54:23.827
course root is also an internal
node, but an eleaf there cannot

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11821-2
00:54:23.827 --> 00:54:24.745
be any problem.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11840-0
00:54:25.685 --> 00:54:28.294
So now if we proceed ahead with
this definitions, given an

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11840-1
00:54:28.294 --> 00:54:29.665
arbitrary complete binary tree.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11852-0
00:54:31.325 --> 00:54:33.175
We assume each leaf is a heap,
no problem.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11883-0
00:54:33.885 --> 00:54:38.579
Start building the heap from the
parents of these leaves, meaning

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11883-1
00:54:38.579 --> 00:54:42.703
internal notes, right, Max
Heapify the subtrees rooted at

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11883-2
00:54:42.703 --> 00:54:43.485
the parent.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11899-0
00:54:43.495 --> 00:54:46.145
If you apply Max CPU, what will
the be the result you will get?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11910-0
00:54:47.715 --> 00:54:49.025
What type of a heap you will
get?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11935-0
00:54:50.305 --> 00:54:53.582
You'll get a maximum because you
are applying Max CP5, but if you

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11935-1
00:54:53.582 --> 00:54:55.915
wanted them in heap you can
apply min heapify.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11961-0
00:54:56.305 --> 00:54:59.510
I have not given that version of
Min Heapify which is exactly

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11961-1
00:54:59.510 --> 00:55:02.405
opposite where you will take the
minimum of them right.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11975-0
00:55:03.845 --> 00:55:06.381
The hippie process continues
till we reach the root of the

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11975-1
00:55:06.381 --> 00:55:06.595
tree.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11981-0
00:55:07.675 --> 00:55:09.365
Let's firstly take this
particular.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11988-0
00:55:11.315 --> 00:55:11.945
Example.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11992-0
00:55:12.175 --> 00:55:13.365
Is this a complete binary tree?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/11995-0
00:55:16.505 --> 00:55:16.835
Yes.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12003-0
00:55:16.845 --> 00:55:17.055
No.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12011-0
00:55:17.065 --> 00:55:20.385
Maybe it's a complete binary, no
problem.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12018-0
00:55:21.635 --> 00:55:22.695
Is this a heap or not?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12028-0
00:55:23.725 --> 00:55:26.615
Two is smaller than five and six
no.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12037-0
00:55:26.625 --> 00:55:32.935
Problem 5 is smaller than nine
and seven, right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12045-0
00:55:32.945 --> 00:55:34.315
So what type of a heap is this?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12052-0
00:55:38.685 --> 00:55:39.435
It is a min heap.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12054-0
00:55:39.445 --> 00:55:39.995
Perfect.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12056-0
00:55:40.345 --> 00:55:40.485
Cool.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12066-0
00:55:41.595 --> 00:55:43.085
Let's assume this was not a
heap.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12080-0
00:55:43.095 --> 00:55:47.405
Also, right in that case also
these leaves are not a problem.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12093-0
00:55:47.455 --> 00:55:50.460
The problem could have been
somewhere here in the internal

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12093-1
00:55:50.460 --> 00:55:51.325
node only, right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12133-0
00:55:51.335 --> 00:55:55.892
So this whole algorithm tells me
that don't worry about the leaf

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12133-1
00:55:55.892 --> 00:56:00.029
leaves are going to be always
heap start from the internal

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12133-2
00:56:00.029 --> 00:56:04.235
node and perform hyperfixation
right perform hyperfixation.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12143-0
00:56:04.305 --> 00:56:07.125
For example, I want a maximum
this this is a Max heap.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12146-0
00:56:09.115 --> 00:56:09.445
Yes.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12148-0
00:56:09.455 --> 00:56:09.805
No, maybe.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12184-0
00:56:12.275 --> 00:56:16.049
This is not a maximum, but let's
say I wanted a maxim this is not

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12184-1
00:56:16.049 --> 00:56:19.479
a maxi, so I should perform
hippie fication in order to get

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12184-2
00:56:19.479 --> 00:56:20.165
the maximum.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12191-0
00:56:20.265 --> 00:56:21.005
How do I do that?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12207-0
00:56:21.545 --> 00:56:24.216
This algorithm says start
building the heat from the

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12207-1
00:56:24.216 --> 00:56:25.475
parents of these sleeves.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12233-0
00:56:26.125 --> 00:56:29.736
Now, is there any formula to
give me where are internal nodes

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12233-1
00:56:29.736 --> 00:56:33.405
and where are lead so far have
we learned about such concepts?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12235-0
00:56:34.655 --> 00:56:34.885
Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12239-0
00:56:34.895 --> 00:56:35.945
Yeah, Please wait.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12245-0
00:56:35.955 --> 00:56:37.095
Yeah, don't swap it immediately.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12252-0
00:56:38.005 --> 00:56:39.665
We should take it very step by
step.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12284-0
00:56:42.595 --> 00:56:46.567
Given a complete binary tree, is
there any formula that can tell

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12284-1
00:56:46.567 --> 00:56:50.355
me who are all the leaf nodes
and who are all internal nodes?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12287-0
00:56:51.675 --> 00:56:52.305
Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12303-0
00:56:52.435 --> 00:56:57.755
Yes, there is formula and
putting numbers as usual 12345

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12303-1
00:56:57.755 --> 00:56:58.315
right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12314-0
00:57:01.045 --> 00:57:02.955
4 leaf left, right, or uh null.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12316-0
00:57:03.475 --> 00:57:03.875
Beautiful.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12334-0
00:57:03.885 --> 00:57:07.424
That's one way to identify it,
but are there formulas without

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12334-1
00:57:07.424 --> 00:57:08.565
traversing the tree?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12349-0
00:57:09.555 --> 00:57:12.305
Can I write away tell you that
these nodes are internal?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12367-0
00:57:12.315 --> 00:57:16.115
These nodes are external, but is
also possible that is the whole

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12367-1
00:57:16.115 --> 00:57:17.635
beauty of computing right.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12400-0
00:57:18.915 --> 00:57:22.793
Simran sensor was right but that
is for that you have to traverse

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12400-1
00:57:22.793 --> 00:57:26.377
the tree and you should see if
the nodes left and right part

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12400-2
00:57:26.377 --> 00:57:26.905
are null.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12412-0
00:57:27.075 --> 00:57:28.545
Then you can claim that that is
a diff.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12436-0
00:57:28.895 --> 00:57:32.479
Otherwise it is an internal
node, but in that case you'll

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12436-1
00:57:32.479 --> 00:57:35.135
have to traverse it, but without
all that.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12445-0
00:57:35.385 --> 00:57:37.215
Definitely I can do using these
two formula.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12450-0
00:57:38.435 --> 00:57:39.225
What does this say?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12492-0
00:57:39.755 --> 00:57:45.023
All leaf nodes are from north by
two floor value plus one to N

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12492-1
00:57:45.023 --> 00:57:50.040
these positions will be a leaf
node and all non leaf nodes,

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12492-2
00:57:50.040 --> 00:57:55.475
meaning internal nodes are from
one to north by two floor value.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12499-0
00:57:56.025 --> 00:57:57.235
Let's put this into practice.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12507-0
00:57:57.245 --> 00:57:58.285
Let's see if I'm lying.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12517-0
00:57:58.295 --> 00:58:01.135
Or are these formulas actually
working?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12529-0
00:58:01.605 --> 00:58:05.335
So in my case, what is yen in
this example?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12531-0
00:58:05.345 --> 00:58:05.905
Real quick? Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12536-0
00:58:09.305 --> 00:58:10.155
What is my yen?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12545-0
00:58:10.225 --> 00:58:11.515
Yen is nothing but number of
nodes.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12552-0
00:58:11.525 --> 00:58:12.375
How many nodes are here?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12557-0
00:58:12.385 --> 00:58:14.505
5 nodes are there right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12566-0
00:58:14.915 --> 00:58:16.465
So what did this line tell me?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12596-0
00:58:17.295 --> 00:58:22.669
All leaf nodes are from north by
2 + 1, which is nothing but five

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12596-1
00:58:22.669 --> 00:58:26.495
by two floor value plus one to
end which is 5.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12602-0
00:58:26.785 --> 00:58:27.645
What is 5 by two?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12626-0
00:58:27.655 --> 00:58:31.938
Five by two is 2.52 point, five
floor values 2/2 plus one is 3,

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12626-1
00:58:31.938 --> 00:58:33.075
so three to five.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12647-0
00:58:33.925 --> 00:58:37.774
So this formula tells me that
three to five those nodes are

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12647-1
00:58:37.774 --> 00:58:39.955
leaf nodes is what this tells
me?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12656-0
00:58:40.385 --> 00:58:41.585
Let me go check it in the tree.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12663-0
00:58:42.285 --> 00:58:43.395
What about the third position?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12668-0
00:58:44.195 --> 00:58:44.885
It is a leaf.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12675-0
00:58:45.415 --> 00:58:46.625
What about the fourth position?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12680-0
00:58:46.715 --> 00:58:47.405
It is a leaf.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12686-0
00:58:47.755 --> 00:58:49.115
Fifth position is also a leaf.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12695-0
00:58:50.065 --> 00:58:51.175
What about this formula?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12756-0
00:58:52.845 --> 00:58:57.349
This formula told me all non
leaf nodes or internal nodes are

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12756-1
00:58:57.349 --> 00:59:01.853
from one to north by 2412 N by
two floor value is nothing but

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12756-2
00:59:01.853 --> 00:59:06.357
12 N is nothing but five, five
by two floor value is 2 to one

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12756-3
00:59:06.357 --> 00:59:09.625
to two is internal node is what
it tells me.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12773-0
00:59:10.275 --> 00:59:12.719
So one if I look yes, it is an
internal node because it has

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12773-1
00:59:12.719 --> 00:59:13.085
children.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12785-0
00:59:13.545 --> 00:59:15.395
Two is also an internal node
because it has children.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12808-0
00:59:16.435 --> 00:59:20.368
So are these two formulas
working not just for this tree,

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12808-1
00:59:20.368 --> 00:59:24.435
for any complete binary tree,
this formula will work, yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12823-0
00:59:26.375 --> 00:59:29.865
And these type of detections is
what is expected from you.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12833-0
00:59:29.915 --> 00:59:31.995
Yeah, and quizzes and exams.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12853-0
00:59:32.005 --> 00:59:35.371
I might come up with some crazy,
you know, statements you should

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12853-1
00:59:35.371 --> 00:59:37.805
think about it and come up with
such formulas.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12861-0
00:59:39.145 --> 00:59:41.035
Yeah, just by trial and error.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12872-0
00:59:41.045 --> 00:59:43.055
Also, you can actually figure
out these formulas.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12901-0
00:59:44.075 --> 00:59:47.902
Yeah, well, now we understood
the formulas of in what

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12901-1
00:59:47.902 --> 00:59:52.437
positions leaves are there and
in what positions internal nodes

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12901-2
00:59:52.437 --> 00:59:53.145
are there.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12905-0
00:59:53.815 --> 00:59:54.075
Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12917-0
00:59:54.085 --> 00:59:56.399
Second one, will you explain
once again what is the second

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12917-1
00:59:56.399 --> 00:59:56.555
one?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12956-0
00:59:56.565 --> 01:00:03.363
Very simple 12 N by two, floor
value 125 by two floor value 125

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12956-1
01:00:03.363 --> 01:00:09.735
by two is nothing but 2.52 point
five floor values 2 right.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12963-0
01:00:09.985 --> 01:00:12.415
So one to two, meaning one and
two, right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12985-0
01:00:12.565 --> 01:00:16.591
So the formula says in one and
two positions there are non leaf

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12985-1
01:00:16.591 --> 01:00:18.415
nodes, so the first position.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/12999-0
01:00:18.425 --> 01:00:21.375
If you say yes, it is non non
leaf node, it has children.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13005-0
01:00:21.815 --> 01:00:22.945
What about second position?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13017-0
01:00:22.955 --> 01:00:24.945
Yes, it has children, so it is
correct.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13049-0
01:00:25.975 --> 01:00:29.507
The both the formulas are
correct and they give me in a

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13049-1
01:00:29.507 --> 01:00:33.039
complete binary tree which
positions are leaf and which

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13049-2
01:00:33.039 --> 01:00:34.805
positions are internal node.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13054-0
01:00:35.645 --> 01:00:36.415
So far so good.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13056-0
01:00:36.465 --> 01:00:37.985
All of you, Amit.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13076-0
01:00:40.565 --> 01:00:43.199
It just it just giving me
positions where internal node

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13076-1
01:00:43.199 --> 01:00:44.375
and leaf nodes are there.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13108-0
01:00:45.135 --> 01:00:49.388
Now we did all this homework
because whatever positions this

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13108-1
01:00:49.388 --> 01:00:53.989
sensor gives me, I don't need to
worry at all because they're all

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13108-2
01:00:53.989 --> 01:00:54.755
leaf nodes.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13113-0
01:00:54.865 --> 01:00:56.355
Leaf nodes are already heaps.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13144-0
01:00:56.485 --> 01:01:00.473
I don't need to worry at all,
whereas all these positions

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13144-1
01:01:00.473 --> 01:01:04.598
which this formula gives me
right in this case there can be

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13144-2
01:01:04.598 --> 01:01:05.285
a problem.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13182-0
01:01:05.495 --> 01:01:10.269
So I will start heapy flying in
those positions, meaning in this

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13182-1
01:01:10.269 --> 01:01:14.602
second position and in this
first position I'll perform my

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13182-2
01:01:14.602 --> 01:01:17.245
EP fication whatever I want,
right.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13195-0
01:01:17.255 --> 01:01:19.725
If the statement is true, can we
say it's uh CBD?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13197-0
01:01:19.735 --> 01:01:19.985
Uh.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13199-0
01:01:19.995 --> 01:01:20.185
True.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13207-0
01:01:20.195 --> 01:01:21.765
No, no, you should not reverse.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13225-0
01:01:21.775 --> 01:01:25.407
Uh, you know, tell that if it's
a CPT then these formulas will

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13225-1
01:01:25.407 --> 01:01:25.695
work.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13240-0
01:01:25.855 --> 01:01:29.612
Just because these formulas
work, I should not claim that it

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13240-1
01:01:29.612 --> 01:01:30.535
is a CBT, yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13244-0
01:01:33.575 --> 01:01:33.765
Cool.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13269-0
01:01:34.175 --> 01:01:36.676
Have a look at the small
algorithm to build a heap now

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13269-1
01:01:36.676 --> 01:01:38.585
using all these concepts that we
learned.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13273-0
01:01:38.995 --> 01:01:39.155
Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13285-0
01:01:40.035 --> 01:01:42.465
If you look at this, P is an
input array.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13303-0
01:01:42.945 --> 01:01:45.929
This input array is nothing but
that complete binary tree that

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13303-1
01:01:45.929 --> 01:01:46.355
I've got.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13310-0
01:01:47.615 --> 01:01:48.745
The result should be a heap.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13330-0
01:01:50.475 --> 01:01:53.890
Can I just simply tell that the
size of my heap will be the size

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13330-1
01:01:53.890 --> 01:01:54.625
of this array?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13334-0
01:01:56.055 --> 01:01:56.765
Yes, of course.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13336-0
01:01:56.775 --> 01:01:56.995
Right.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13377-0
01:01:58.125 --> 01:02:01.668
I'm just exchanging the things
I'm not going to add any new

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13377-1
01:02:01.668 --> 01:02:05.447
element, so the length of this
complete binary tree is going to

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13377-2
01:02:05.447 --> 01:02:08.635
be the length of my heap, and
then what I do is this.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13403-0
01:02:08.645 --> 01:02:12.655
Same formula I'm doing it in the
reverse right instead of from

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13403-1
01:02:12.655 --> 01:02:15.455
going from one to north by two
floor value.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13415-0
01:02:15.645 --> 01:02:18.025
I'm going from north by two
floor value till one.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13440-0
01:02:19.045 --> 01:02:22.776
And what I'm doing I'm
performing Max Heapify on each

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13440-1
01:02:22.776 --> 01:02:25.815
of that is nothing but that
variable right.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13455-0
01:02:26.045 --> 01:02:29.603
In this example, I will first
take this second position, then

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13455-1
01:02:29.603 --> 01:02:31.095
go to that first position.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13470-0
01:02:31.565 --> 01:02:34.715
I'll start applying my Max CP5
eventually.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13476-0
01:02:34.725 --> 01:02:36.435
This complete thing will become
a heap.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13484-0
01:02:38.445 --> 01:02:39.615
Let's take another example.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13489-0
01:02:39.625 --> 01:02:40.195
Let's take this.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13505-0
01:02:41.795 --> 01:02:45.972
I have this Ariel representation
I've converted into a complete

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13505-1
01:02:45.972 --> 01:02:46.755
binary tree.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13522-0
01:02:47.075 --> 01:02:51.535
This is now a complete binary
tree and I wanted a maxiprep.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13526-0
01:02:51.585 --> 01:02:52.465
Is this a Maxey?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13544-0
01:02:54.845 --> 01:02:57.955
Real quick guys, so we get a CT
and make it a heap.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13546-0
01:02:57.965 --> 01:02:58.575
Exactly.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13572-0
01:02:58.725 --> 01:03:02.255
Yeah, if it is not a complete
binary tree then you cannot do

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13572-1
01:03:02.255 --> 01:03:04.975
anything and you should not do
anything right.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13588-0
01:03:04.985 --> 01:03:07.595
You should not apply these
techniques and try to create a

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13588-1
01:03:07.595 --> 01:03:08.405
heap and all that.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13599-0
01:03:08.625 --> 01:03:11.275
You should right away tell that
you know what this is.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13613-0
01:03:11.285 --> 01:03:15.185
Not even satisfying the shape
property, so this is not a heap.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13634-0
01:03:16.235 --> 01:03:19.376
If it is satisfying the shape
property, if it violates the

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13634-1
01:03:19.376 --> 01:03:22.675
heap property, then I can build
my heap using this technique.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13659-0
01:03:24.725 --> 01:03:29.190
In this case, I was given a list
of numbers and I just translated

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13659-1
01:03:29.190 --> 01:03:31.625
into a complete binary tree,
right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13671-0
01:03:31.935 --> 01:03:33.835
So the order of this algorithm
is N log in.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13675-0
01:03:33.845 --> 01:03:34.425
We will come there.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13681-0
01:03:34.435 --> 01:03:35.185
Yeah, we'll come there.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13696-0
01:03:35.195 --> 01:03:38.815
Let's quickly finish this part
and this is not my Max heap.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13705-0
01:03:40.435 --> 01:03:41.625
What did my algorithm say?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13713-0
01:03:42.055 --> 01:03:44.125
All the leaf nodes don't worry
about it.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13721-0
01:03:44.315 --> 01:03:47.405
Start with the first non leaf
node.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13730-0
01:03:47.475 --> 01:03:48.905
What are all the non leaf nodes?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13738-0
01:03:49.995 --> 01:03:51.225
This five is an odd leaf.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13772-0
01:03:51.595 --> 01:03:55.949
Four is an on Leaf, three is an
on leaf, two is a non leaf, one

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13772-1
01:03:55.949 --> 01:03:59.895
is a non leaf, meaning they all
have children right 4567.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13775-0
01:03:59.905 --> 01:04:00.535
No, that is wrong.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13782-0
01:04:01.715 --> 01:04:02.905
Non leaf guys.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13803-0
01:04:03.035 --> 01:04:10.447
Yeah, 54321 because they have
children 678910 R not having any

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13803-1
01:04:10.447 --> 01:04:11.505
children.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13810-0
01:04:11.875 --> 01:04:13.745
You could have even applied that
formula here.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13831-0
01:04:13.835 --> 01:04:18.053
Yeah, that formula if you apply
12 N by two floor value will be

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13831-1
01:04:18.053 --> 01:04:18.975
internal node.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13843-0
01:04:19.665 --> 01:04:21.535
In this case it is 1010 by two
is 5.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13868-0
01:04:21.665 --> 01:04:26.225
So it told you that 12345
positions are internal, 678910

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13868-1
01:04:26.225 --> 01:04:26.945
are leaf.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13882-0
01:04:28.145 --> 01:04:32.445
So I start from this position
and I will apply Max CP5 there.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13887-0
01:04:33.375 --> 01:04:34.225
So what will happen?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13901-0
01:04:34.235 --> 01:04:37.085
I'll compare 5 and 10/5 is not
greater than 10.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13907-0
01:04:37.195 --> 01:04:37.915
So what should happen?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13912-0
01:04:38.615 --> 01:04:39.265
You'll get swapped.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13928-0
01:04:40.405 --> 01:04:43.413
It will become like this and
then I will go to the next

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13928-1
01:04:43.413 --> 01:04:44.165
internal node.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13937-0
01:04:44.175 --> 01:04:45.385
I will go to this position.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13943-0
01:04:45.435 --> 01:04:46.005
Fourth position.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13968-0
01:04:46.855 --> 01:04:50.946
I'll compare 48 and 9, which is
the largest 9 is the largest, so

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13968-1
01:04:50.946 --> 01:04:54.595
I'll swap it so it'll get
swapped and nine will go there.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13983-0
01:04:57.135 --> 01:04:59.185
So are you slowly understanding
what we are doing?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13999-0
01:04:59.635 --> 01:05:03.208
All the leaps were already
heaps, leaves, and then we

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/13999-1
01:05:03.208 --> 01:05:05.655
started with the last internal
node.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14028-0
01:05:05.825 --> 01:05:09.305
This part became a heap right 10
is greater than five Max heap

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14028-1
01:05:09.305 --> 01:05:12.895
and then we compared here, nine
was greater than four and eight.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14035-0
01:05:12.985 --> 01:05:14.955
So that became the, you know
parent here.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14052-0
01:05:15.365 --> 01:05:19.266
So now this whole portion is
also a heap and is greater than

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14052-1
01:05:19.266 --> 01:05:19.585
five.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14063-0
01:05:19.975 --> 01:05:21.725
Nine is greater than the
children eight and four.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14068-0
01:05:22.035 --> 01:05:22.805
This full is done.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14082-0
01:05:23.275 --> 01:05:26.642
Next we will consider here this
position said, why didn't we

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14082-1
01:05:26.642 --> 01:05:27.525
start with four?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14086-0
01:05:27.535 --> 01:05:28.305
Why only 5?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14094-0
01:05:28.375 --> 01:05:30.665
Because that is the last
internal node.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14120-0
01:05:31.015 --> 01:05:35.452
What did this formula tell me
from B dot length divided by two

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14120-1
01:05:35.452 --> 01:05:39.395
down to one, meaning the last
internal node who's that?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14123-0
01:05:42.015 --> 01:05:42.175
Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14129-0
01:05:43.415 --> 01:05:44.025
OK, that's fine.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14142-0
01:05:44.035 --> 01:05:46.107
If you understood the concept,
if you have not understood the

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14142-1
01:05:46.107 --> 01:05:46.775
formulas, it's fine.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14150-0
01:05:46.785 --> 01:05:48.345
Yeah, you will rewatch the
recording.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14182-0
01:05:48.555 --> 01:05:52.545
It'll strike you why we use the
formula, but a simpler way is if

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14182-1
01:05:52.545 --> 01:05:56.227
you have understood the concept
from the last internal node

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14182-2
01:05:56.227 --> 01:05:56.595
right.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14203-0
01:05:56.605 --> 01:05:59.083
In this case one is internal
node, two is internal, node

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14203-1
01:05:59.083 --> 01:06:01.125
three is internal, node four is
internal node.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14235-0
01:06:01.255 --> 01:06:04.401
This five is internal node, so
this is the last internal node

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14235-1
01:06:04.401 --> 01:06:07.649
right after that the six is the
leaf, 7 is a leaf 8910, they're

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14235-2
01:06:07.649 --> 01:06:08.105
all leaf.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14266-0
01:06:08.275 --> 01:06:11.698
So this last internal node you
picked up, you performed

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14266-1
01:06:11.698 --> 01:06:15.670
hyperfixation on that first and
then you went to the second last

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14266-2
01:06:15.670 --> 01:06:16.525
internal node.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14269-0
01:06:16.535 --> 01:06:16.935
Who was that?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14308-0
01:06:16.945 --> 01:06:21.694
This for so this whole position
also you applied Max CP5 this

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14308-1
01:06:21.694 --> 01:06:26.519
also became a heap who is the
next internal node this three so

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14308-2
01:06:26.519 --> 01:06:29.505
367 are compared seven is the
largest.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14319-0
01:06:29.675 --> 01:06:31.975
So you will swap them and that
will become.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14326-0
01:06:33.095 --> 01:06:35.425
This whole part also now became
a heap.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14332-0
01:06:35.585 --> 01:06:36.755
Who's the next internal node?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14335-0
01:06:36.765 --> 01:06:37.165
This too.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14361-0
01:06:37.655 --> 01:06:41.682
So you will compare them so 2910
you will compare who's the

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14361-1
01:06:41.682 --> 01:06:44.835
largest, 10 is the largest, so
you'll swap it.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14366-0
01:06:45.205 --> 01:06:47.125
But after that swap what will
happen?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14381-0
01:06:51.175 --> 01:06:53.805
Yeah, 10 would have come here to
would have come here.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14398-0
01:06:53.815 --> 01:06:57.045
This part would have become a
heap, but two is here, but two

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14398-1
01:06:57.045 --> 01:06:57.415
is not.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14415-0
01:06:57.475 --> 01:07:01.535
You know greater than five, but
you know what is Max CP5, Max.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14442-0
01:07:01.545 --> 01:07:05.814
CP5 is a recursive algorithm, so
he would have internally swapped

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14442-1
01:07:05.814 --> 01:07:09.629
him and it would have already
converted him something like

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14442-2
01:07:09.629 --> 01:07:10.405
this, right.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14448-0
01:07:10.875 --> 01:07:11.575
You understood, right.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14454-0
01:07:11.585 --> 01:07:12.475
So 10 would have come here.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14460-0
01:07:12.485 --> 01:07:13.395
Two would have come here.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14474-0
01:07:13.625 --> 01:07:16.085
We will not a heap again because
this part is violating.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14490-0
01:07:16.365 --> 01:07:19.808
So, since Max CP5 itself is
recursive again, we swapped and

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14490-1
01:07:19.808 --> 01:07:20.955
it became like this.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14494-0
01:07:21.445 --> 01:07:22.345
Now again, let's recap.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14501-0
01:07:23.065 --> 01:07:23.915
This is a heap.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14510-0
01:07:23.985 --> 01:07:25.455
This whole part is a heap.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14527-0
01:07:25.465 --> 01:07:29.672
The 763 is a heap this whole 10
and it's children is a heap,

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14527-1
01:07:29.672 --> 01:07:30.085
right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14533-0
01:07:30.095 --> 01:07:31.045
All the internal nodes.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14551-0
01:07:31.055 --> 01:07:35.727
Now we will finally go to that
last internal node which was

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14551-1
01:07:35.727 --> 01:07:36.505
root 1071.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14565-0
01:07:36.515 --> 01:07:40.555
We will swap 10 right and then
one would have come here again.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14580-0
01:07:40.565 --> 01:07:43.899
This is not a heap, so nine
would have come one here and so

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14580-1
01:07:43.899 --> 01:07:44.065
on.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14595-0
01:07:44.335 --> 01:07:47.977
And finally would have got a
tree like this which is a Max

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14595-1
01:07:47.977 --> 01:07:48.285
heap.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14627-0
01:07:50.005 --> 01:07:53.373
Yeah, the original Teresa mean
in this case, occasionally it

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14627-1
01:07:53.373 --> 01:07:56.795
happened to be Amandeep, but it
could have been just a normal

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14627-2
01:07:56.795 --> 01:07:58.175
tree also, right, Manish?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14636-0
01:07:59.905 --> 01:08:01.195
And Max application is done.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14640-0
01:08:01.205 --> 01:08:01.375
Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14648-0
01:08:01.385 --> 01:08:02.795
I mean the whole algorithm is
over.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14653-0
01:08:02.885 --> 01:08:03.995
You have built a heap now.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14658-0
01:08:05.235 --> 01:08:06.005
Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14665-0
01:08:06.115 --> 01:08:07.625
And somewhere I saw beautiful
answer.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14694-0
01:08:07.635 --> 01:08:11.928
I think it was Vinay when I told
that we are considering each non

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14694-1
01:08:11.928 --> 01:08:15.505
leaf is problematic heap and
applying the typification

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14694-2
01:08:15.505 --> 01:08:16.805
algorithm beautiful.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14701-0
01:08:16.875 --> 01:08:19.165
That's the exact concept here,
yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14706-0
01:08:21.195 --> 01:08:21.685
Yeah, we can.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14718-0
01:08:21.695 --> 01:08:23.225
We should not call this sorting
and so on.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14727-0
01:08:23.235 --> 01:08:24.155
This is not sorting.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14732-0
01:08:24.165 --> 01:08:25.325
This is CP fication.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14738-0
01:08:25.335 --> 01:08:26.545
In what sense is it sorting?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14746-0
01:08:26.555 --> 01:08:27.585
Are we sorting something here?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14753-0
01:08:28.585 --> 01:08:29.915
No, we are not starting
anything.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14767-0
01:08:30.065 --> 01:08:33.925
We are swapping swapping based
on some concepts, right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14802-0
01:08:35.585 --> 01:08:39.637
It's snow is building the heap
clear, and in this case I wanted

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14802-1
01:08:39.637 --> 01:08:42.675
a Max heap so at every stage I
applied Max CP5.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14812-0
01:08:43.145 --> 01:08:46.478
But if I wanted min heap, I
would have applied min heap

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14812-1
01:08:46.478 --> 01:08:46.775
fine.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14815-0
01:08:48.485 --> 01:08:48.715
Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14826-0
01:08:49.025 --> 01:08:49.945
Which part is not clear.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14829-0
01:08:51.125 --> 01:08:52.035
How quickly recap?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14838-0
01:08:52.045 --> 01:08:53.455
Let's not revolve too much
around this.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14844-0
01:08:53.465 --> 01:08:54.515
It's a very simple concept.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14851-0
01:08:55.485 --> 01:08:56.675
There's an array given to you.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14863-0
01:08:56.685 --> 01:08:58.855
You translated into a complete
binary tree.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14868-0
01:08:59.285 --> 01:08:59.985
So far so good.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14872-0
01:08:59.995 --> 01:09:00.365
All of you.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14878-0
01:09:01.235 --> 01:09:02.995
Don't worry about what this is.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14883-0
01:09:03.005 --> 01:09:03.285
This is.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14890-0
01:09:03.295 --> 01:09:04.885
I mean, he maxim, don't worry
about it.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14898-0
01:09:04.895 --> 01:09:05.665
It can be anything.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14959-0
01:09:06.075 --> 01:09:10.546
It may not be a heap at all
also, but whatever was given you

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14959-1
01:09:10.546 --> 01:09:14.723
translated into a complete
binary tree in that every non

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14959-2
01:09:14.723 --> 01:09:19.046
leaf node, or in other words
every internal node, you will

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14959-3
01:09:19.046 --> 01:09:23.589
consider it and you will apply
the Max CP5 or min he P5AS per

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14959-4
01:09:23.589 --> 01:09:24.615
what you want.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14974-0
01:09:25.395 --> 01:09:28.205
In this case I want to have a
final Max heap.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14998-0
01:09:28.995 --> 01:09:34.427
So on all the internal nodes I
will apply Max CP5, but there is

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/14998-1
01:09:34.427 --> 01:09:39.095
a simple trick that start from
the last internal node.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15013-0
01:09:39.105 --> 01:09:42.778
So in this case, if you see five
is the last internal node,

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15013-1
01:09:42.778 --> 01:09:43.145
right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15041-0
01:09:43.155 --> 01:09:46.453
Because six is a LEAF, 7 is a
leaf, 8910 are all Leafs, so

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15041-1
01:09:46.453 --> 01:09:48.745
this last internal node start
from here.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15044-0
01:09:49.015 --> 01:09:50.285
Apply Max CP5 here.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15059-0
01:09:50.375 --> 01:09:54.205
So this part will become a heap,
then go to its previous internal

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15059-1
01:09:54.205 --> 01:09:54.495
node.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15071-0
01:09:54.815 --> 01:09:56.945
This part again apply Max CP5.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15077-0
01:09:56.955 --> 01:09:57.925
This will become a heap.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15091-0
01:09:58.055 --> 01:10:00.355
Then this whole 3 then this two
and whole.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15106-0
01:10:00.365 --> 01:10:03.628
You know, people will become
complete by tree, will become a

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15106-1
01:10:03.628 --> 01:10:03.895
heap.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15116-0
01:10:04.075 --> 01:10:07.995
It will become Max CP5 because I
applied Max CP Fication.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15120-0
01:10:10.075 --> 01:10:10.425
Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15127-0
01:10:10.435 --> 01:10:11.215
Is this part clear?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15149-0
01:10:11.225 --> 01:10:14.219
And then he now and again urge
you to try some numbers like

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15149-1
01:10:14.219 --> 01:10:15.965
this random numbers try to
create.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15159-0
01:10:15.975 --> 01:10:18.025
Of course, there are a lot of
exercises in this deck.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15199-0
01:10:18.135 --> 01:10:22.866
You will get a better hang of
it, but what you are essentially

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15199-1
01:10:22.866 --> 01:10:26.996
trying to do is you are
repeatedly applying Max CP5 or

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15199-2
01:10:26.996 --> 01:10:31.125
min PY as per what you want on
all the internal nodes.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15201-0
01:10:31.195 --> 01:10:31.325
This.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15227-0
01:10:33.355 --> 01:10:36.726
Sir, we are saying that leaf is
not considered as non

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15227-1
01:10:36.726 --> 01:10:40.345
problematic as we do swap two
and five and one and eight.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15246-0
01:10:40.435 --> 01:10:43.836
Yeah, leaf was not problematic
there also it was this internal

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15246-1
01:10:43.836 --> 01:10:45.185
node who was problematic.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15251-0
01:10:45.595 --> 01:10:46.755
This tool was problematic.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15265-0
01:10:46.765 --> 01:10:51.512
This five was not problematic,
yeah, said why 3 is not swapped

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15265-1
01:10:51.512 --> 01:10:52.265
with four?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15270-0
01:10:52.275 --> 01:10:52.925
So where exactly?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15277-0
01:10:54.435 --> 01:10:55.695
So in which step do you mean?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15280-0
01:10:58.165 --> 01:10:58.705
Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15287-0
01:10:58.775 --> 01:11:00.255
So they're completely different,
right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15301-0
01:11:00.265 --> 01:11:02.505
So seven is greater than six and
three there ends the matter.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15309-0
01:11:02.515 --> 01:11:03.975
This is already a Max sleep.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15323-0
01:11:04.185 --> 01:11:06.285
Yeah, why should I be swapping 2
four and others?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15331-0
01:11:06.295 --> 01:11:07.335
They are in some other place.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15337-0
01:11:08.385 --> 01:11:09.405
Five is greater than two.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15358-0
01:11:09.735 --> 01:11:12.180
Eight is greater than four, so
there in the matter I should not

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15358-1
01:11:12.180 --> 01:11:13.555
be swapping between them and so
on.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15366-0
01:11:16.485 --> 01:11:18.155
They are building analysis,
right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15390-0
01:11:19.765 --> 01:11:23.904
Someone we're already telling
Jagdish and others right, we are

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15390-1
01:11:23.904 --> 01:11:26.925
calling Max CP5 on north by two
nodes, right.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15421-0
01:11:26.935 --> 01:11:31.437
As leaves are already ahead,
since we call Max CP5N times and

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15421-1
01:11:31.437 --> 01:11:35.865
Max CP5 takes log N time, the
overall complexity is N log N.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15476-0
01:11:37.875 --> 01:11:42.793
Yeah, in this case, the overall
complexity to build a heap bus

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15476-1
01:11:42.793 --> 01:11:47.554
and log N, whereas this is not
tight, we can also prove that

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15476-2
01:11:47.554 --> 01:11:52.316
building a heap is not N log N
it is just we go off and also

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15476-3
01:11:52.316 --> 01:11:54.735
yeah, for what concept is this?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15503-0
01:11:56.565 --> 01:12:00.664
If you are telling not tight and
if you are trying to get an even

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15503-1
01:12:00.664 --> 01:12:03.955
tighter complexity, there is
some analysis for this.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15508-0
01:12:04.365 --> 01:12:04.625
Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15519-0
01:12:04.635 --> 01:12:06.715
And that is what we started the
whole class today with.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15522-0
01:12:08.065 --> 01:12:08.985
Yeah, what concept is that?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15539-0
01:12:11.125 --> 01:12:13.015
Is it worst case analysis or
something else?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15546-0
01:12:13.505 --> 01:12:14.675
We did the worst case analysis.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15567-0
01:12:14.685 --> 01:12:17.989
We got it as N log N nobody can
tell N log N is wrong that is

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15567-1
01:12:17.989 --> 01:12:18.255
fine.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15572-0
01:12:18.525 --> 01:12:20.155
But it is not as tight.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15593-0
01:12:20.625 --> 01:12:24.714
We can also prove that it is
just we go of EN so very good

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15593-1
01:12:24.714 --> 01:12:27.555
that's called amortized
analysis, right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15608-0
01:12:27.745 --> 01:12:30.235
So the whole proof is also
available in your clears

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15608-1
01:12:30.235 --> 01:12:30.665
textbook.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15618-0
01:12:30.675 --> 01:12:32.255
It's available if you are
interested.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15638-0
01:12:32.265 --> 01:12:37.337
You can also have a look at it,
but the bottom line is creating

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15638-1
01:12:37.337 --> 01:12:39.555
a heat using this technique.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15658-0
01:12:39.565 --> 01:12:43.198
This technique is called as he
application technique right

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15658-1
01:12:43.198 --> 01:12:45.475
using the hippie fication
technique.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15668-0
01:12:45.485 --> 01:12:48.715
If you build a heap, the
complexity is big of north.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15683-0
01:12:50.525 --> 01:12:53.255
Sir parent is 10, left child is
9, right child is 8.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15686-0
01:12:53.265 --> 01:12:53.935
Is it possible?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15695-0
01:12:53.945 --> 01:12:55.315
Yes, of course it is possible.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15707-0
01:12:55.375 --> 01:12:57.925
If that is the case, then what
is the, you know heap name?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15721-0
01:12:59.895 --> 01:13:03.545
This is 10 left child is 9 by
child is 8.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15730-0
01:13:03.715 --> 01:13:05.055
So what type of heap is this?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15752-0
01:13:06.325 --> 01:13:09.780
Again, Please remember there is
no relation between left child

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15752-1
01:13:09.780 --> 01:13:12.795
right child, only parent child
is coming into picture.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15763-0
01:13:13.615 --> 01:13:16.085
Yeah, there is no relation
between left or right.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15782-0
01:13:16.435 --> 01:13:20.107
They can be anything as long as
this 10 is greater than nine and

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15782-1
01:13:20.107 --> 01:13:20.445
eight.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15791-0
01:13:20.555 --> 01:13:22.525
I can just simply call it as a
maxi.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15795-0
01:13:22.855 --> 01:13:23.345
That's all.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15800-0
01:13:23.755 --> 01:13:25.765
There is no relation between
them.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15804-0
01:13:25.955 --> 01:13:27.195
Children are not related.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15813-0
01:13:29.025 --> 01:13:30.485
Falling Maxi pen by two times.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15815-0
01:13:30.495 --> 01:13:30.715
Yes.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15827-0
01:13:30.725 --> 01:13:33.375
Correct, because there are N by
two internal nodes.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15854-0
01:13:33.385 --> 01:13:38.341
Krishna right now is when if you
go to the code again, if you see

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15854-1
01:13:38.341 --> 01:13:41.495
here N by two times this loop is
running.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15868-0
01:13:41.805 --> 01:13:44.245
So north by two times you are
calling this Max CP5.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15894-0
01:13:45.995 --> 01:13:50.095
This line is going to take you
log in and this line is taking

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15894-1
01:13:50.095 --> 01:13:53.335
you N by two, who is a constant,
so this is yen.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15917-0
01:13:53.625 --> 01:13:57.525
So if you see end into log N is
N log N that is the correct

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15917-1
01:13:57.525 --> 01:13:59.735
answer if you do normal
analysis.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15934-0
01:13:59.945 --> 01:14:02.698
But if you do amortized
analysis, you will know that it

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15934-1
01:14:02.698 --> 01:14:03.435
is not N log N.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15944-0
01:14:03.645 --> 01:14:06.845
You can also very well claim it
as we go N itself.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15966-0
01:14:09.585 --> 01:14:12.100
All that being said, let's take
a very quick break and then we

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15966-1
01:14:12.100 --> 01:14:13.855
will come back with insertion
and deletion.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15976-0
01:14:15.345 --> 01:14:16.595
Yeah, we'll come back in 5
minutes.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15998-0
01:14:16.605 --> 01:14:20.428
Not more than that, and I'll
still be around if you have any

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/15998-1
01:14:20.428 --> 01:14:24.125
other general questions or
something we can chat about it.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16007-0
01:14:26.835 --> 01:14:28.265
Internal nodes are five by two.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16015-0
01:14:28.275 --> 01:14:29.945
Yes, correct five by two.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16031-0
01:14:30.015 --> 01:14:34.494
Floor value 5 by two floor
values 2.5 floor value which is

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16031-1
01:14:34.494 --> 01:14:34.645
2.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16044-0
01:14:34.775 --> 01:14:37.825
So there are only two internal
nodes in that example.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16053-0
01:14:39.245 --> 01:14:41.195
In this example, there are only
two internal nodes.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16059-0
01:14:42.485 --> 01:14:43.665
What about in this example?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16084-0
01:14:45.435 --> 01:14:51.286
And this 1010 by two floor
values, it is five floor value

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16084-1
01:14:51.286 --> 01:14:52.395
which is 5.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16093-0
01:14:52.615 --> 01:14:55.305
So this formula claims there are
five internal nodes.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16102-0
01:14:55.315 --> 01:14:57.605
Is that clear internal node,
internal node?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16110-0
01:14:57.615 --> 01:14:59.185
Internal node, internal node,
internal.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16128-0
01:14:59.615 --> 01:15:03.921
Everything else is a leaf, so
how many on how many nodes you

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16128-1
01:15:03.921 --> 01:15:04.485
applied?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16136-0
01:15:04.495 --> 01:15:05.685
Max CP5 in this slide.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16146-0
01:15:05.695 --> 01:15:08.495
If you clearly observe that we
had done actually five times.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16153-0
01:15:10.295 --> 01:15:10.645
Right.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16168-0
01:15:10.695 --> 01:15:13.184
This was the first time this was
the second time this was the

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16168-1
01:15:13.184 --> 01:15:13.625
third time.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16212-0
01:15:13.635 --> 01:15:17.419
This was the 4th time but fourth
time actually internally it had

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16212-1
01:15:17.419 --> 01:15:20.854
two again do the Max CP file
algorithm did it again should

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16212-2
01:15:20.854 --> 01:15:24.463
not count that finally fifth
time we did yeah starting of the

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16212-3
01:15:24.463 --> 01:15:25.685
class I briefed that.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16220-0
01:15:25.775 --> 01:15:27.975
Yeah, I told about amortized.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16226-0
01:15:27.985 --> 01:15:29.175
Please watch the recording
again.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16238-0
01:15:30.105 --> 01:15:33.095
Yeah, but they are a little
slightly advanced concepts.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16248-0
01:15:33.105 --> 01:15:34.405
There was also a webinar on
that.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16263-0
01:15:35.185 --> 01:15:37.962
Please watch that recording and
also there is this whole proof

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16263-1
01:15:37.962 --> 01:15:38.535
in your text.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16292-0
01:15:38.545 --> 01:15:41.799
Also, they're they're not be
much questions and so on from

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16292-1
01:15:41.799 --> 01:15:45.274
your exam point of view because
it's not very clearly there in

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16292-2
01:15:45.274 --> 01:15:45.935
your course.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16313-0
01:15:51.535 --> 01:15:54.075
Uh, 111 question, just to be
sure, no Python code is asked in

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16313-1
01:15:54.075 --> 01:15:55.345
Midsem and compare exam, right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16315-0
01:15:55.355 --> 01:15:55.735
Correct.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16320-0
01:15:55.745 --> 01:15:56.245
That's right.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16346-0
01:15:56.255 --> 01:15:59.514
If you write a Python code for
some answer, it will not be even

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16346-1
01:15:59.514 --> 01:16:01.855
looked it and it'll be straight
given a zero.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16367-0
01:16:02.715 --> 01:16:06.143
Yeah, in the return exam, it
will always be a suedo code or

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16367-1
01:16:06.143 --> 01:16:06.885
an algorithm.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16394-0
01:16:07.785 --> 01:16:11.700
Only in your assignment you will
write Python code, but a lot of

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16394-1
01:16:11.700 --> 01:16:15.434
people will end up writing some
code and we will not consider

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16394-2
01:16:15.434 --> 01:16:15.735
code.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16400-0
01:16:15.805 --> 01:16:17.105
The question will clearly tell.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16414-0
01:16:18.175 --> 01:16:21.455
Write an algorithm or write a
pseudo code a niece.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16420-0
01:16:21.465 --> 01:16:23.565
See Language, Java, Python,
etcetera.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16428-0
01:16:23.575 --> 01:16:24.825
You should not be writing in the
exam.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16443-0
01:16:26.915 --> 01:16:30.185
So internal node order will be
UH-5423.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16455-0
01:16:30.245 --> 01:16:32.515
Uh, so in which examples will be
you mean this example?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16462-0
01:16:35.215 --> 01:16:36.135
Internal node.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16490-0
01:16:36.145 --> 01:16:38.451
The order will be in the
reverse, just the normal

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16490-1
01:16:38.451 --> 01:16:41.357
reverse, so you will go to 5th
node, then to 4th, then to 3rd,

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16490-2
01:16:41.357 --> 01:16:42.325
then to, then to one.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16495-0
01:16:42.655 --> 01:16:43.685
There's the reverse order.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16503-0
01:16:44.215 --> 01:16:46.995
Yeah, and not 5423, yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16512-0
01:16:49.285 --> 01:16:51.555
Difference between regular and
makeup exam?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16514-0
01:16:51.565 --> 01:16:51.775
Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16574-0
01:16:51.785 --> 01:16:55.226
So the regular is the actual
exam day and for people who

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16574-1
01:16:55.226 --> 01:16:59.209
might not be able to attend that
day, right for someone might say

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16574-2
01:16:59.209 --> 01:17:03.072
I have an important meeting that
day and traveling abroad or so

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16574-3
01:17:03.072 --> 01:17:06.754
there was some case I still
remember and they told I have my

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16574-4
01:17:06.754 --> 01:17:08.685
marriage on my regular exam day.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16583-0
01:17:09.035 --> 01:17:10.325
So what do you expect me to do?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16585-0
01:17:10.835 --> 01:17:11.205
Right.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16626-0
01:17:11.615 --> 01:17:15.702
For such cases, you already know
the regular exam date and if on

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16626-1
01:17:15.702 --> 01:17:19.222
that day if you have any
important commitment which you

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16626-2
01:17:19.222 --> 01:17:23.371
cannot skip, you will be given a
chance to write the makeup exam,

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16626-3
01:17:23.371 --> 01:17:23.685
yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16649-0
01:17:27.265 --> 01:17:30.564
For particular height of CBT
Max, how many times at worst we

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16649-1
01:17:30.564 --> 01:17:31.915
can swap to build a heap?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16655-0
01:17:31.925 --> 01:17:33.035
Or do we have any formula?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16665-0
01:17:33.045 --> 01:17:36.105
Yeah, that's log north, right
maximum.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16686-0
01:17:36.115 --> 01:17:39.526
Someone who is at the top can
give or can go all the way up to

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16686-1
01:17:39.526 --> 01:17:39.905
a leaf.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16695-0
01:17:40.905 --> 01:17:42.205
It cannot go below that correct.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16712-0
01:17:43.745 --> 01:17:46.675
So anyone who's at the top, he
can keep on getting swapped.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16737-0
01:17:46.685 --> 01:17:49.563
He can go all the way till the
bottom and that is nothing but

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16737-1
01:17:49.563 --> 01:17:52.255
the height of a complete binary
tree which is always log.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16753-0
01:17:55.715 --> 01:17:59.125
Do we need to give application
for backup exam day?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16758-0
01:17:59.135 --> 01:18:00.305
Sir, no, you need not.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16792-0
01:18:00.655 --> 01:18:04.561
There will be a hall ticket
generation day when if you know

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16792-1
01:18:04.561 --> 01:18:08.727
that on that regular day you are
not available, you will choose

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16792-2
01:18:08.727 --> 01:18:11.265
the makeup exam date that time
itself.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16801-0
01:18:11.515 --> 01:18:13.835
Yeah, there is no other separate
application and so on.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16822-0
01:18:16.915 --> 01:18:19.978
3rd uh, so we should remember
algorithms with respect to exam

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16822-1
01:18:19.978 --> 01:18:21.015
point of view, right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16831-0
01:18:21.655 --> 01:18:23.225
Yeah, not just exam point of
view.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16837-0
01:18:23.235 --> 01:18:24.855
You should remember it
holistically.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16856-0
01:18:26.685 --> 01:18:29.835
I mean, even after exams, we
should remember them, right in

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16856-1
01:18:29.835 --> 01:18:30.675
terms of height.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16860-0
01:18:30.685 --> 01:18:31.465
Do we have any formula?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16871-0
01:18:31.475 --> 01:18:32.965
Yeah, log in itself is the
formula.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16882-0
01:18:33.495 --> 01:18:35.985
The height of a complete binary
tree is log N simple.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16897-0
01:18:39.975 --> 01:18:41.966
We'll we'll wait for another
minute and then we will get

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16897-1
01:18:41.966 --> 01:18:42.245
started.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16899-0
01:18:42.255 --> 01:18:42.515
Wow.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16905-0
01:18:44.325 --> 01:18:45.155
Yeah, we will come there.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16913-0
01:18:45.165 --> 01:18:47.585
Yeah, you'd be welcome there.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16931-0
01:18:47.595 --> 01:18:51.529
There are several applications
of heaps, yeah, the whole heap

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16931-1
01:18:51.529 --> 01:18:52.925
sort is based on heap.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16952-0
01:18:53.315 --> 01:18:56.310
Yeah, very popular sorting
algorithm and there are other

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16952-1
01:18:56.310 --> 01:18:59.515
bigger applications which we
will look at in the next class.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16985-0
01:19:01.685 --> 01:19:05.907
Since Max CP method under for
loop is calling only once not

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16985-1
01:19:05.907 --> 01:19:10.480
traverse thought out till leave
so uh because yeah that could be

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/16985-2
01:19:10.480 --> 01:19:11.535
1 probable way.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17000-0
01:19:18.385 --> 01:19:21.435
But that Max CP5 method itself
is a recursive algorithm.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17004-0
01:19:21.485 --> 01:19:22.465
You realize that, right, Vinay?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17023-0
01:19:25.935 --> 01:19:29.265
It'll ensure that whatever is
the problem is again recurring.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17033-0
01:19:29.275 --> 01:19:31.045
He will solve that also in this
case.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17037-0
01:19:31.055 --> 01:19:31.885
It had happened right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17053-0
01:19:32.845 --> 01:19:35.923
10 and two had got swapped, but
again this part became not a

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17053-1
01:19:35.923 --> 01:19:36.175
heap.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17066-0
01:19:36.185 --> 01:19:39.775
So here I ensured that is also
getting swapped Max CP file.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17072-0
01:19:39.885 --> 01:19:41.945
Algorithm itself is recursive in
nature.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17086-0
01:19:42.875 --> 01:19:46.496
It was iterating it thing
NANDINI had pointed out long

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17086-1
01:19:46.496 --> 01:19:46.825
back.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17088-0
01:19:47.015 --> 01:19:48.145
That last line, right.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17091-0
01:19:53.375 --> 01:19:53.635
Oops.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17098-0
01:19:55.685 --> 01:19:56.755
Got this lane right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17114-0
01:19:57.495 --> 01:20:00.138
So if you see the last line is
again recursive, so he will

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17114-1
01:20:00.138 --> 01:20:00.675
ensure that.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17134-0
01:20:04.005 --> 01:20:06.455
For whatever significance of
webinars or the vinas topics.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17144-0
01:20:06.465 --> 01:20:08.465
So for umm yeah it it will be
there for exams.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17168-0
01:20:08.475 --> 01:20:11.607
Yeah, they're basically some
topics which are not directly

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17168-1
01:20:11.607 --> 01:20:14.155
taught in the class, but related
to the course.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17205-0
01:20:15.245 --> 01:20:18.879
All the topics covered in
webinar are also there in the

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17205-1
01:20:18.879 --> 01:20:22.903
course, meaning you can there
might or might not be questions

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17205-2
01:20:22.903 --> 01:20:26.861
from you know those also in the
exam who should prepare that

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17205-3
01:20:26.861 --> 01:20:27.185
also.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17217-0
01:20:32.145 --> 01:20:34.555
So if it's a perfect penetrate,
yeah, you can actually apply.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17229-0
01:20:34.615 --> 01:20:38.205
Yeah, but but the definitions is
it should be a complete binary.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17235-0
01:20:38.215 --> 01:20:39.015
That is good enough.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17246-0
01:20:39.255 --> 01:20:41.325
You need not wait for a perfect
binary tree.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17254-0
01:20:42.245 --> 01:20:43.975
Which is a complete binary
that's good enough.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17265-0
01:20:47.845 --> 01:20:49.025
There are no code in DSD. Only.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17272-0
01:20:49.035 --> 01:20:50.475
Yeah, I'm talking only about
Syed.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17275-0
01:20:50.485 --> 01:20:50.785
Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17290-0
01:20:50.795 --> 01:20:53.645
So don't take my word for other
courses, only for DSAD.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17293-0
01:20:53.655 --> 01:20:55.705
Whatever I tell applies, yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17298-0
01:20:57.975 --> 01:20:58.245
Cool.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17308-0
01:20:58.255 --> 01:21:00.025
I think it's and UH-49.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17310-0
01:21:00.035 --> 01:21:00.745
Let's get started.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17314-0
01:21:00.755 --> 01:21:01.275
Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17321-0
01:21:01.355 --> 01:21:03.435
So building a heap, all of you
clear? Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17339-0
01:21:05.495 --> 01:21:07.365
So all of you will now answer a
couple of things.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17358-0
01:21:07.715 --> 01:21:11.038
If a tree is given, will you be
able to identify if it is a heap

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17358-1
01:21:11.038 --> 01:21:11.395
or not?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17373-0
01:21:12.515 --> 01:21:14.783
If it is a Max heap min heap,
not a heap, will you be able to

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17373-1
01:21:14.783 --> 01:21:15.075
do that?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17375-0
01:21:17.805 --> 01:21:17.965
Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17380-0
01:21:19.525 --> 01:21:19.985
Perfect.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17385-0
01:21:19.995 --> 01:21:21.045
That is one step.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17427-0
01:21:21.395 --> 01:21:24.866
Then, if there is a complete
monetary given to you, but with

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17427-1
01:21:24.866 --> 01:21:28.451
some random numbers, it's not a
min heap, it's not a Max heap,

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17427-2
01:21:28.451 --> 01:21:31.865
but I tell you, go ahead and
create a min heap out of this.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17432-0
01:21:32.275 --> 01:21:33.075
Will you be able to do that?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17436-0
01:21:35.375 --> 01:21:35.545
Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17443-0
01:21:36.475 --> 01:21:37.425
What is it that you will do?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17448-0
01:21:38.135 --> 01:21:40.025
You will start SURBHI.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17460-0
01:21:40.035 --> 01:21:43.025
Yeah, you will start from the
last internal node.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17472-0
01:21:43.235 --> 01:21:45.065
You will go all the way till the
root right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17496-0
01:21:45.255 --> 01:21:48.664
Basically, in all the internal
nodes you will perform min

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17496-1
01:21:48.664 --> 01:21:51.015
heapify because you wanted I
mean heap.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17515-0
01:21:51.265 --> 01:21:54.093
If you want a Max heap, you will
apply min heapify on all those

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17515-1
01:21:54.093 --> 01:21:54.755
internal nodes.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17530-0
01:21:55.085 --> 01:21:57.085
If you do it magically, what you
will get is a heap.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17535-0
01:21:58.425 --> 01:21:58.975
Is that clear?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17546-0
01:21:58.985 --> 01:22:01.255
So far, so you know how to
check.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17563-0
01:22:01.345 --> 01:22:05.787
You know also how to build right
now let's assume you have built

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17563-1
01:22:05.787 --> 01:22:06.265
a heap.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17571-0
01:22:06.275 --> 01:22:07.565
You have built a Max heap.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17578-0
01:22:07.635 --> 01:22:09.065
You want to insert something in
it?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17580-0
01:22:10.775 --> 01:22:10.985
Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17590-0
01:22:10.995 --> 01:22:12.785
How do you do that simple step?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17612-0
01:22:14.505 --> 01:22:17.685
If you are inserting something
in a Max heap after the

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17612-1
01:22:17.685 --> 01:22:20.055
insertion, also it should be a
Max heap.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17614-0
01:22:20.465 --> 01:22:20.695
Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17617-0
01:22:20.705 --> 01:22:21.515
Beautiful, right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17628-0
01:22:21.865 --> 01:22:24.365
Your insertion should not spoil
the whole thing.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17630-0
01:22:25.315 --> 01:22:25.725
Understood.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17639-0
01:22:25.735 --> 01:22:27.665
Right, you have a Max heap.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17645-0
01:22:27.755 --> 01:22:29.645
You insert it after the
insertion.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17652-0
01:22:29.655 --> 01:22:30.435
Also it's a Max heap.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17659-0
01:22:31.595 --> 01:22:32.585
It's a min heap.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17666-0
01:22:32.735 --> 01:22:34.445
You insert some number after
that.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17692-0
01:22:34.455 --> 01:22:37.652
Also, it should be a min heap,
so that is your responsibility

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17692-1
01:22:37.652 --> 01:22:40.075
to insert it in such a way or
take care of it.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17702-0
01:22:40.545 --> 01:22:43.245
So what are the steps testing?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17713-0
01:22:43.255 --> 01:22:49.195
First find the insertion point Z
meaning in this particular tree.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17723-0
01:22:49.245 --> 01:22:50.475
So what type of a heap is this?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17745-0
01:22:51.325 --> 01:22:54.790
Or is it not a heap 2 smaller
than five and six five smaller

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17745-1
01:22:54.790 --> 01:22:55.925
than nine and seven?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17759-0
01:22:55.935 --> 01:22:58.735
So this is a what type of a heap
place.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17762-0
01:22:59.585 --> 01:23:00.595
I mean, he perfect.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17774-0
01:23:01.005 --> 01:23:03.645
So after I insert also it should
be a min heap.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17777-0
01:23:05.615 --> 01:23:05.795
Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17783-0
01:23:07.365 --> 01:23:08.455
So what is the analysis?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17794-0
01:23:08.465 --> 01:23:10.015
Yeah, Krishna, I didn't do any
analysis.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17821-0
01:23:10.025 --> 01:23:13.559
I just told before starting if
it's a min heap after inserting

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17821-1
01:23:13.559 --> 01:23:15.185
also it should be a min heap.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17838-0
01:23:16.365 --> 01:23:19.019
If it is a Max seep after
insertion also it should be a

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17838-1
01:23:19.019 --> 01:23:19.445
Max heap.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17840-0
01:23:20.485 --> 01:23:20.895
Simple.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17842-0
01:23:21.445 --> 01:23:22.075
Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17864-0
01:23:22.125 --> 01:23:25.095
So in this case I have a min
heap I want to insert an

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17864-1
01:23:25.095 --> 01:23:25.535
element.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17873-0
01:23:26.005 --> 01:23:28.555
But firstly, can I just insert
it anywhere I like?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17892-0
01:23:28.945 --> 01:23:32.403
Can I insert it to the left of 6
right of 6 left of nine right of

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17892-1
01:23:32.403 --> 01:23:32.665
nine?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17900-0
01:23:32.675 --> 01:23:33.465
Can insert it anywhere?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17906-0
01:23:34.785 --> 01:23:36.395
Or is there a specific position?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17909-0
01:23:37.165 --> 01:23:37.415
Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17916-0
01:23:37.425 --> 01:23:38.945
What is this position in this
example?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17959-0
01:23:40.835 --> 01:23:44.435
If I insert it to the left of
nine or right of nine or left of

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17959-1
01:23:44.435 --> 01:23:48.206
seven or right of seven, it will
make the whole thing as a, not a

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17959-2
01:23:48.206 --> 01:23:49.405
complete binary tree.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17968-0
01:23:50.465 --> 01:23:53.655
Then one move will completely
spoil this foot, right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17988-0
01:23:53.665 --> 01:23:57.240
It will not be a heap at all
then, so the only possible thing

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/17988-1
01:23:57.240 --> 01:23:58.335
is the left of six.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18017-0
01:23:59.765 --> 01:24:02.872
Yeah, not nine also, Amit, if
you do in the left of nine, then

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18017-1
01:24:02.872 --> 01:24:05.535
the whole thing is not a
complete binary tree at all.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18027-0
01:24:05.965 --> 01:24:08.205
Then there is no question of
equal also, right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18041-0
01:24:08.215 --> 01:24:10.795
So the only possible thing is
the left of six.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18072-0
01:24:11.765 --> 01:24:17.182
Then it will be a CBT, so that
position is called AZ yeah, find

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18072-1
01:24:17.182 --> 01:24:22.514
the insertion point Z so that we
maintain complete binary tree

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18072-2
01:24:22.514 --> 01:24:23.275
property.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18076-0
01:24:23.865 --> 01:24:24.295
Perfect.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18080-0
01:24:24.385 --> 01:24:25.275
You will find it out.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18098-0
01:24:25.625 --> 01:24:29.973
You will insert it, but after
inserting it might have violated

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18098-1
01:24:29.973 --> 01:24:31.215
the heap property.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18101-0
01:24:31.565 --> 01:24:32.215
It can happen.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18110-0
01:24:32.965 --> 01:24:34.385
Check if the heap property
follows.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18126-0
01:24:35.375 --> 01:24:40.882
If it is not following, restore
the heap property by using up

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18126-1
01:24:40.882 --> 01:24:42.125
heap bubbling.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18128-0
01:24:42.595 --> 01:24:42.795
Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18143-0
01:24:42.805 --> 01:24:45.645
Let's see that insert the
element one into the min heap.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18147-0
01:24:45.735 --> 01:24:46.195
Let's do that.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18157-0
01:24:47.055 --> 01:24:48.705
This was the min heap given to
me.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18174-0
01:24:49.115 --> 01:24:53.487
I know this is my insertion
point, ZI inserted him, my

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18174-1
01:24:53.487 --> 01:24:55.235
insertion is over now.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18179-0
01:24:55.245 --> 01:24:55.915
Is this a min heap?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18184-0
01:24:59.295 --> 01:25:01.365
Yeah, exactly.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18193-0
01:25:01.375 --> 01:25:02.865
Don't break the CPT after that.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18203-0
01:25:02.875 --> 01:25:06.595
Is it a heap 6 is greater than
one?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18209-0
01:25:06.655 --> 01:25:07.625
But then how is this?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18215-0
01:25:07.635 --> 01:25:08.175
I mean heap.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18223-0
01:25:08.235 --> 01:25:10.935
So he did his, you know, game.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18237-0
01:25:10.945 --> 01:25:13.975
Now this is not even a heap, So
what should I be doing?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18241-0
01:25:15.515 --> 01:25:17.105
As usual, I should swap.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18254-0
01:25:17.555 --> 01:25:20.765
I will compare one and six right
one is smaller, so swap him.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18273-0
01:25:22.445 --> 01:25:26.655
Compared swapped again, compare
two and one right.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18281-0
01:25:27.125 --> 01:25:29.595
So two and one again two is
greater than one.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18285-0
01:25:29.665 --> 01:25:30.465
So that's a problem.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18291-0
01:25:30.515 --> 01:25:31.795
So so up him.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18307-0
01:25:33.885 --> 01:25:36.425
And now in this case is this a
heap min heap?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18323-0
01:25:40.385 --> 01:25:43.634
One is smaller than five and
two, five is smaller than nine

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18323-1
01:25:43.634 --> 01:25:44.175
and seven.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18340-0
01:25:44.185 --> 01:25:47.015
Two is smaller than six, so this
is now what min heap.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18352-0
01:25:47.085 --> 01:25:49.935
So before insertion it was a min
heap after insertion.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18380-0
01:25:49.945 --> 01:25:53.648
Also it is a min heap so you are
done and this whole concept if

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18380-1
01:25:53.648 --> 01:25:56.830
you see here you are always
inserting somewhere at the

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18380-2
01:25:56.830 --> 01:25:57.235
bottom.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18386-0
01:25:57.525 --> 01:25:58.105
Do you agree to it?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18399-0
01:25:59.305 --> 01:26:01.675
You cannot insert it at the root
or middle or somewhere right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18423-0
01:26:01.685 --> 01:26:05.735
Somewhere at the bottom is what
you're inserting, and that guy

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18423-1
01:26:05.735 --> 01:26:08.885
is bubbling up, so there's one
got swapped here.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18436-0
01:26:08.895 --> 01:26:12.645
He went here and he got, you
know, swapped here again.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18442-0
01:26:12.655 --> 01:26:14.445
And he went on to the top.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18449-0
01:26:15.095 --> 01:26:16.445
Why didn't we check for file?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18459-0
01:26:16.775 --> 01:26:19.225
We checked it, but it was
already correct, right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18471-0
01:26:19.235 --> 01:26:23.195
Five is smaller than nine and
seven, so no problem, right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18485-0
01:26:24.525 --> 01:26:27.995
So that is why that name is
called up heap bubbling.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18515-0
01:26:29.115 --> 01:26:34.037
So after you insert something at
the bottom, if he violates the

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18515-1
01:26:34.037 --> 01:26:38.343
property he made bubble up and
he will go to his proper

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18515-2
01:26:38.343 --> 01:26:39.035
position.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18529-0
01:26:39.535 --> 01:26:42.025
That is why this concept is
called up heat bubbling.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18546-0
01:26:42.515 --> 01:26:46.275
So again, I repeat, these are
all just antsy jargons, but what

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18546-1
01:26:46.275 --> 01:26:48.005
exactly is this API bubbling?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18558-0
01:26:48.015 --> 01:26:49.495
Can someone answer me in layman
terms?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18567-0
01:26:50.915 --> 01:26:54.425
What do you mean actually in
operation computing terms?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18570-0
01:26:54.435 --> 01:26:54.875
What is that?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18579-0
01:26:56.995 --> 01:26:58.545
You can inserted something here.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18596-0
01:26:58.935 --> 01:27:02.660
It violated the property, so I'm
just telling this jargon that

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18596-1
01:27:02.660 --> 01:27:03.605
I'm bubbling up.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18604-0
01:27:04.055 --> 01:27:05.605
So what do you actually mean by
that?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18610-0
01:27:06.135 --> 01:27:07.805
No, not bottom up. Swapping.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18617-0
01:27:07.815 --> 01:27:08.785
Yeah, that is the right word.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18622-0
01:27:08.795 --> 01:27:09.845
I'm just doing swaps.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18660-0
01:27:10.355 --> 01:27:14.252
I'm just doing swap in order to
get it to the proper place, or

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18660-1
01:27:14.252 --> 01:27:18.087
in other words he, P cation or
whatever you can call, but the

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18660-2
01:27:18.087 --> 01:27:20.375
actual word in literature is
upbeat.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18662-0
01:27:20.385 --> 01:27:20.685
Bubbling.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18667-0
01:27:21.775 --> 01:27:22.405
Yeah, that's right.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18698-0
01:27:22.415 --> 01:27:25.656
Soumya you do the insertion and
then you but that is what you

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18698-1
01:27:25.656 --> 01:27:28.165
should not call it as Max CP5
mean P5 etcetera.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18708-0
01:27:28.415 --> 01:27:30.865
You should call it as perform up
heap bubbling.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18723-0
01:27:32.745 --> 01:27:36.606
Meaning you insert it and then
it bubbles up to his proper

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18723-1
01:27:36.606 --> 01:27:37.195
position.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18734-0
01:27:37.585 --> 01:27:39.615
Yeah, it works like bubble sort
in some sense.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18753-0
01:27:39.625 --> 01:27:43.232
Yeah, it goes through its proper
position, but all these concepts

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18753-1
01:27:43.232 --> 01:27:44.925
are actually the same. Correct?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18783-0
01:27:45.255 --> 01:27:49.472
Swapping heapify acation up,
heap bubbling, they're all

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18783-1
01:27:49.472 --> 01:27:53.914
actually nothing, but just
normal swap, with the intention

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18783-2
01:27:53.914 --> 01:27:55.495
of what I want, yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18792-0
01:27:57.235 --> 01:27:58.625
We should not do Max. Min heap.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18819-0
01:27:58.635 --> 01:28:01.690
Yeah, that is what, again, I
repeat, yeah, or in them, if it

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18819-1
01:28:01.690 --> 01:28:04.395
is a min heap after the
insertion, it should be a min

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18819-2
01:28:04.395 --> 01:28:04.645
heap.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18841-0
01:28:04.655 --> 01:28:08.673
So you will perform API bubbling
in such a way that you will

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18841-1
01:28:08.673 --> 01:28:10.715
maintain the min heap property.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18860-0
01:28:11.185 --> 01:28:13.893
Otherwise, if it is a maxim
already after insertion also it

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18860-1
01:28:13.893 --> 01:28:14.705
should be maximum.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18870-0
01:28:16.165 --> 01:28:17.935
So let's quickly go through this
slide.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18888-0
01:28:18.155 --> 01:28:21.147
After the insertion of the new
element, the heap order property

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18888-1
01:28:21.147 --> 01:28:22.315
may be violated at times.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18898-0
01:28:22.325 --> 01:28:25.435
It may not violate also correct
and then apply.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18904-0
01:28:25.445 --> 01:28:27.155
Bubbling restores the heap
property.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18922-0
01:28:27.745 --> 01:28:31.963
Compare and swap eh upward the
path and it can bubble up until

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18922-1
01:28:31.963 --> 01:28:33.435
two things can happen.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18946-0
01:28:33.445 --> 01:28:36.340
Either it can bubble up all the
way till the root or somewhere

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18946-1
01:28:36.340 --> 01:28:37.305
in the middle itself.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18965-0
01:28:37.315 --> 01:28:39.728
The heap property can be
satisfied and if it is satisfied

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18965-1
01:28:39.728 --> 01:28:40.435
I can stop there.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/18974-0
01:28:41.205 --> 01:28:42.485
So in worst case what can
happen?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19009-0
01:28:43.425 --> 01:28:47.150
Whatever inserted at the bottom
can bubble up all the way till

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19009-1
01:28:47.150 --> 01:28:50.993
the root, which means it is the
height of the tree and height of

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19009-2
01:28:50.993 --> 01:28:52.825
the tree is nothing but log in.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19020-0
01:28:52.895 --> 01:28:55.805
So the complexities log in Sir.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19030-0
01:28:55.815 --> 01:28:58.025
This min or Max heap only
possible in CBT.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19041-0
01:28:58.035 --> 01:29:00.445
Yes, that is what we learned in
the very first slide.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19066-0
01:29:00.795 --> 01:29:05.138
Yeah, again, repeat, please
focus 200% because this is the

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19066-1
01:29:05.138 --> 01:29:07.345
pedagogy we use in this class.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19074-0
01:29:07.355 --> 01:29:10.545
I keep repeating and going fast,
so please focus.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19078-0
01:29:10.555 --> 01:29:10.805
Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19102-0
01:29:10.815 --> 01:29:14.823
The very first slide was about
the ship property, so if it is

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19102-1
01:29:14.823 --> 01:29:17.085
not a CBT, it's not a heap at
all.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19114-0
01:29:19.175 --> 01:29:21.465
Yeah, yeah, keep bubbling can be
returned.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19122-0
01:29:21.475 --> 01:29:23.345
Both respective of min and heap
correct.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19129-0
01:29:23.815 --> 01:29:25.225
It depends on what you want.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19151-0
01:29:25.295 --> 01:29:28.575
If it's a min heap, you will do
a pip bubbling in such a way

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19151-1
01:29:28.575 --> 01:29:30.725
that you are swapping the
smaller term.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19157-0
01:29:31.315 --> 01:29:31.965
It's Max heap.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19168-0
01:29:31.975 --> 01:29:35.355
You will swap with the larger
term insertion.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19172-0
01:29:35.365 --> 01:29:35.895
All of you clear?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19174-0
01:29:37.135 --> 01:29:37.465
Yes.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19176-0
01:29:37.475 --> 01:29:37.835
No, maybe.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19188-0
01:29:40.205 --> 01:29:41.855
There is already a heap given to
you.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19193-0
01:29:41.945 --> 01:29:42.795
You will insert it.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19205-0
01:29:42.805 --> 01:29:44.605
You will adhere to this up heap
public.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19223-0
01:29:45.455 --> 01:29:49.947
What about removal in the stack,
which is the only element that I

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19223-1
01:29:49.947 --> 01:29:50.695
can remove?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19234-0
01:29:52.035 --> 01:29:53.555
Yeah, example is what we just
saw, right.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19257-0
01:29:54.605 --> 01:29:57.848
There was an element I inserted
one after I inserted one, it is

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19257-1
01:29:57.848 --> 01:29:59.925
no longer a min heap, so he got
swapped.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19265-0
01:29:59.985 --> 01:30:02.215
He again got swapped and then
what?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19276-0
01:30:02.225 --> 01:30:06.245
I got as a result is a mean heap
cool.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19280-0
01:30:06.295 --> 01:30:06.825
Very good.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19300-0
01:30:06.995 --> 01:30:11.195
So what we learned is in a stack
only top element can be removed

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19300-1
01:30:11.195 --> 01:30:11.905
in a queue.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19310-0
01:30:11.915 --> 01:30:13.415
What is the only element that we
can remove?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19318-0
01:30:14.975 --> 01:30:16.105
Can it randomly remove
something?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19334-0
01:30:18.115 --> 01:30:22.559
The element given in the front
front position only I can remove

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19334-1
01:30:22.559 --> 01:30:22.975
right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19352-0
01:30:23.245 --> 01:30:27.845
Not leave only the one who's
given by the front full.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19365-0
01:30:28.545 --> 01:30:32.805
Similarly, in a heap, right, I
can only remove the route.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19377-0
01:30:33.295 --> 01:30:35.225
Don't ask me why, because that
is by nature.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19381-0
01:30:35.305 --> 01:30:36.145
That is by design.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19390-0
01:30:36.515 --> 01:30:38.535
You cannot remove any element
that you like.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19400-0
01:30:38.855 --> 01:30:40.835
You can only remove the root
element.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19410-0
01:30:42.345 --> 01:30:44.355
Remove the element at the root
node.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19425-0
01:30:44.865 --> 01:30:48.380
But if you remove the root
element, what will happen to the

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19425-1
01:30:48.380 --> 01:30:49.375
whole tree right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19449-0
01:30:49.385 --> 01:30:51.466
For example, there is a tree
like this, you just knock off

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19449-1
01:30:51.466 --> 01:30:52.065
this whole route.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19456-0
01:30:52.895 --> 01:30:54.595
Then it will not be a tree at
all.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19460-0
01:30:54.645 --> 01:30:56.445
This whole thing becomes
disconnected.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19466-0
01:30:56.515 --> 01:30:58.055
Will become an orphan, right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19477-0
01:30:58.065 --> 01:31:01.405
There should be something to
keep this intact, right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19485-0
01:31:01.835 --> 01:31:02.675
So what I'm going to do?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19499-0
01:31:04.565 --> 01:31:09.665
Yeah, I am going to take the
last leaf and put him there.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19535-0
01:31:11.045 --> 01:31:15.346
Yeah, remove the element at the
root node from the heap, fill

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19535-1
01:31:15.346 --> 01:31:19.509
the root node with the element
from the last node, right so

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19535-2
01:31:19.509 --> 01:31:23.185
that you maintain the complete
binary tree property.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19547-0
01:31:23.495 --> 01:31:25.345
Otherwise, all of you are right,
it will get broken.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19559-0
01:31:25.355 --> 01:31:27.225
It'll get disjoined it will
become a forest.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19573-0
01:31:27.235 --> 01:31:29.625
All that is correct, but I don't
want that to happen, right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19585-0
01:31:30.055 --> 01:31:32.735
I want it to still remain as a
complete mandatory.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19615-0
01:31:32.745 --> 01:31:36.936
I want to make it still a heap,
so take the last node and put

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19615-1
01:31:36.936 --> 01:31:40.856
him there right after doing
that, it'll become a complete

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19615-2
01:31:40.856 --> 01:31:42.275
binary tree, correct?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19639-0
01:31:42.585 --> 01:31:45.593
But it might violate the
property, so check if the he

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19639-1
01:31:45.593 --> 01:31:47.375
follows the heap order property.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19647-0
01:31:47.945 --> 01:31:51.415
If it doesn't follow, perform
the downhead bubbling.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19653-0
01:31:51.985 --> 01:31:53.035
Very simple steps guys.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19657-0
01:31:53.045 --> 01:31:53.975
Don't get confused.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19673-0
01:31:54.465 --> 01:31:57.765
Always the only element you can
remove from a heap is the root.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19698-0
01:31:58.285 --> 01:32:01.170
You knock him off once you knock
him off, the whole tree becomes

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19698-1
01:32:01.170 --> 01:32:02.945
an orphan because there is no
root now.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19708-0
01:32:03.745 --> 01:32:07.415
So take the last element,
meaning the last leaf.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19729-0
01:32:07.645 --> 01:32:11.208
Put him in that position of the
root the moment you do that, it

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19729-1
01:32:11.208 --> 01:32:13.435
will now become a complete
binary tree.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19754-0
01:32:14.145 --> 01:32:18.280
Now check if that is a heap or
not 2 accordingly and that is

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19754-1
01:32:18.280 --> 01:32:20.245
called as down heap bubbling.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19779-0
01:32:20.515 --> 01:32:24.510
We look at an example, it will
be clear perform a delete

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19779-1
01:32:24.510 --> 01:32:28.785
operation on the given min heap,
perform a delete operation.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19802-0
01:32:29.215 --> 01:32:32.066
I have not told which node to
delete because it's understood

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19802-1
01:32:32.066 --> 01:32:33.655
that I can only delete the
route.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19808-0
01:32:34.385 --> 01:32:36.125
So in this case, what will I
delete?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19816-0
01:32:38.935 --> 01:32:39.615
Who will be removed?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19825-0
01:32:40.335 --> 01:32:42.005
But after two is removed, what
will happen?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19831-0
01:32:42.015 --> 01:32:43.425
The whole tree will get
disconnected.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19842-0
01:32:43.615 --> 01:32:45.275
So which node should I be
putting there?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19857-0
01:32:46.305 --> 01:32:48.575
If you put a number, this is
12345.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19870-0
01:32:48.825 --> 01:32:52.295
The last node, which is 7 that
node I'll put him there.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19874-0
01:32:53.495 --> 01:32:54.095
Something like this?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19883-0
01:32:55.125 --> 01:32:56.695
Two will be deleted and replaced
with seven.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19885-0
01:32:56.705 --> 01:32:57.135
Perfect.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19887-0
01:32:57.185 --> 01:32:57.615
Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19898-0
01:32:57.685 --> 01:32:59.805
So I have done that after doing
that.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19919-0
01:32:59.815 --> 01:33:02.703
This is also a complete binary
tree, so no harm to that

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19919-1
01:33:02.703 --> 01:33:04.765
complete binary property
satisfied now.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19933-0
01:33:04.775 --> 01:33:08.675
Is this still a min heap 7 is
greater than five and six?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19939-0
01:33:10.035 --> 01:33:11.425
Oops, there's a problem right.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19960-0
01:33:11.835 --> 01:33:15.648
Initially what I had is A2
smaller than 565, smaller than

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/19960-1
01:33:15.648 --> 01:33:15.845
97.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20000-0
01:33:15.855 --> 01:33:19.566
It is a min heap, so after
removal also it should be a min

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20000-1
01:33:19.566 --> 01:33:23.339
heap whereas here after that
removal and after this 7 going

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20000-2
01:33:23.339 --> 01:33:25.665
up this has become a not a min
heap.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20003-0
01:33:25.675 --> 01:33:26.445
So there's a problem.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20009-0
01:33:26.835 --> 01:33:27.595
So what should I be doing?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20022-0
01:33:29.995 --> 01:33:33.245
Yeah, seven should be compared
with five and six.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20033-0
01:33:33.635 --> 01:33:37.495
The minimum value is 5, so I
will take him there, right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20050-0
01:33:38.555 --> 01:33:41.625
I took him there and now five is
smaller than seven and six.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20061-0
01:33:41.635 --> 01:33:44.685
Seven is smaller than 9, so I
can stop there itself, right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20068-0
01:33:44.695 --> 01:33:45.185
I have skin.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20072-0
01:33:45.195 --> 01:33:45.865
Stop him.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20090-0
01:33:46.075 --> 01:33:50.849
And here if you understand what
happened, the top node is

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20090-1
01:33:50.849 --> 01:33:52.495
bubbling down right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20102-0
01:33:52.505 --> 01:33:55.255
The seven bubble down to its
proper position here.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20113-0
01:33:55.975 --> 01:34:00.365
That is why this concept is
called down heap bubbling right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20157-0
01:34:00.515 --> 01:34:04.055
So all of you have understood
it, but some people are telling

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20157-1
01:34:04.055 --> 01:34:07.367
hippie fication and all that we
should not use such terms

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20157-2
01:34:07.367 --> 01:34:10.850
because he pacification is a
concept to transform a non heap

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20157-3
01:34:10.850 --> 01:34:11.535
into a heap.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20169-0
01:34:12.415 --> 01:34:14.155
So that is where you should use
that word.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20194-0
01:34:14.575 --> 01:34:19.734
And here the right word is what
Simmental, don't he bubbling

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20194-1
01:34:19.734 --> 01:34:22.355
after the last node end on top?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20204-0
01:34:22.505 --> 01:34:25.871
It is bubbling down to its
proper position by using compare

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20204-1
01:34:25.871 --> 01:34:26.375
and swap.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20219-0
01:34:28.335 --> 01:34:30.625
How long can this round heap
bubbling happen?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20236-0
01:34:31.425 --> 01:34:34.721
In this example, this seven
bubble down to here and then

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20236-1
01:34:34.721 --> 01:34:35.415
here itself.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20264-0
01:34:35.425 --> 01:34:38.274
I stopped it because if I here
itself, it satisfied the min

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20264-1
01:34:38.274 --> 01:34:41.075
heap 5 is smaller than 706 and
seven is smaller than nine.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20274-0
01:34:41.305 --> 01:34:42.615
So here itself I will stop.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20287-0
01:34:42.985 --> 01:34:46.175
This can happen or in worst case
what can happen.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20311-0
01:34:46.285 --> 01:34:49.006
It can go all the way till the
least this seven, which was a

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20311-1
01:34:49.006 --> 01:34:50.745
root can go all the way till the
leaf.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20351-0
01:34:51.945 --> 01:34:56.430
What is the worst case and in
that case, what is the, you know

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20351-1
01:34:56.430 --> 01:35:00.559
number of swaps done, which is
the height of it, which is

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20351-2
01:35:00.559 --> 01:35:03.335
nothing but log this exact same
slide?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20379-0
01:35:03.345 --> 01:35:06.277
That is what it says that you
know after replacing the node,

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20379-1
01:35:06.277 --> 01:35:09.017
fill it with the last node and
it might violate the heap

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20379-2
01:35:09.017 --> 01:35:09.545
properties.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20388-0
01:35:09.555 --> 01:35:11.165
So you know, go ahead and swap
it.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20406-0
01:35:11.595 --> 01:35:14.205
It can either go all the way
till I leave or it can.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20416-0
01:35:14.255 --> 01:35:16.525
You can stop it where it's
satisfied.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20439-0
01:35:16.895 --> 01:35:21.046
If it goes all the way till the
leaf, which is worst case, it

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20439-1
01:35:21.046 --> 01:35:23.925
would have performed swapping
login times.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20447-0
01:35:24.135 --> 01:35:25.365
So the complexity is logged.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20454-0
01:35:26.835 --> 01:35:29.235
Cool excise this time.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20463-0
01:35:29.305 --> 01:35:30.995
Yeah, there's a lot of exercises
for you.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20479-0
01:35:31.005 --> 01:35:34.314
So Sir, compare and swap should
only happen on the branches that

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20479-1
01:35:34.314 --> 01:35:34.975
got affected.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20491-0
01:35:35.165 --> 01:35:37.355
We don't need to compare other
branches, is that correct?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20503-0
01:35:37.505 --> 01:35:40.345
That's right, only in that path
you should be doing it.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20511-0
01:35:41.265 --> 01:35:43.065
Yeah, I went to the last slide,
Ruby.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20531-0
01:35:46.215 --> 01:35:51.366
Yeah, you should be 200% alert
for 120 minutes and then that's

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20531-1
01:35:51.366 --> 01:35:52.265
fine, yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20536-0
01:35:54.085 --> 01:35:54.495
One more.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20540-0
01:35:54.505 --> 01:35:54.905
OK, here.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20554-0
01:35:55.995 --> 01:36:00.655
So seven got compared with this
five and six, right.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20556-0
01:36:01.705 --> 01:36:02.405
The last two trees.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20562-0
01:36:02.415 --> 01:36:02.995
Yeah, I'll come there.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20579-0
01:36:03.005 --> 01:36:06.811
So seven got compared with five
and six, which is the smallest

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20579-1
01:36:06.811 --> 01:36:07.475
among them.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20581-0
01:36:07.525 --> 01:36:07.935
Five.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20590-0
01:36:08.325 --> 01:36:10.695
So five got swapped with seven,
right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20597-0
01:36:10.745 --> 01:36:11.955
That is what we are indicating.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20621-0
01:36:12.005 --> 01:36:15.711
So five got swapped here and
after this if I inspect this

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20621-1
01:36:15.711 --> 01:36:18.075
guy, he's already I mean heap
right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20635-0
01:36:18.085 --> 01:36:21.098
So five is smaller than seven
and six and seven is smaller

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20635-1
01:36:21.098 --> 01:36:21.455
than 9.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20651-0
01:36:21.705 --> 01:36:24.164
So I don't need to do anything,
so this itself is my final

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20651-1
01:36:24.164 --> 01:36:24.455
answer.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20655-0
01:36:26.655 --> 01:36:26.925
Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20660-0
01:36:26.935 --> 01:36:27.445
Is that correct?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20665-0
01:36:27.455 --> 01:36:27.815
All of you.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20670-0
01:36:29.455 --> 01:36:30.695
This tree is the final tree.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20681-0
01:36:30.705 --> 01:36:32.065
This itself is a final correct.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20691-0
01:36:32.075 --> 01:36:33.715
This and this is actually the
same only right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20712-0
01:36:34.845 --> 01:36:36.834
I checked here and it was
already, you know, five is

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20712-1
01:36:36.834 --> 01:36:38.935
smaller than seven and six,
seven is smaller than mine.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20719-0
01:36:38.945 --> 01:36:39.695
So it's all the same.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20724-0
01:36:39.765 --> 01:36:40.585
Yeah, that's correct.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20734-0
01:36:40.915 --> 01:36:42.915
These two are the same, so I
will stop it.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20747-0
01:36:42.925 --> 01:36:44.465
I will not further do any swaps.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20752-0
01:36:44.475 --> 01:36:45.765
Is what I meant by this diagram.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20761-0
01:36:48.065 --> 01:36:48.815
Is this correct guys?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20764-0
01:36:48.825 --> 01:36:50.155
All of you? Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20783-0
01:36:50.345 --> 01:36:53.832
So we had a leaf node under 6IN
that case we should have a

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20783-1
01:36:53.832 --> 01:36:54.895
swapped it, right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20785-0
01:36:54.905 --> 01:36:55.065
Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20795-0
01:36:55.075 --> 01:36:56.425
So in those cases that's
different.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20801-0
01:36:56.435 --> 01:36:57.015
Yeah, you should have.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20825-0
01:36:57.025 --> 01:36:59.920
Again considered and you know
you should have done it the

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20825-1
01:36:59.920 --> 01:37:02.215
moment it's some in heap you
will stop there.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20832-0
01:37:02.225 --> 01:37:03.765
Otherwise you'll continue to do
the swaps.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20851-0
01:37:05.985 --> 01:37:09.556
Well, two questions for you
illustrate the result of

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20851-1
01:37:09.556 --> 01:37:12.115
inserting the elements one at a
time.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20860-0
01:37:12.565 --> 01:37:14.335
Yeah, this is a new concept now,
right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20875-0
01:37:15.045 --> 01:37:18.353
So I had initially told you how
many ways are there to build a

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20875-1
01:37:18.353 --> 01:37:18.615
heap.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20918-0
01:37:21.105 --> 01:37:25.194
That real quick, guys, either
whatever numbers are given to

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20918-1
01:37:25.194 --> 01:37:29.350
me, I can create a complete
binary tree out of it and then I

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20918-2
01:37:29.350 --> 01:37:31.735
can apply hippie fication
correct.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20943-0
01:37:31.745 --> 01:37:39.690
For example, if these numbers
are given, I will randomly do

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20943-1
01:37:39.690 --> 01:37:42.735
this 3533421014, right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20954-0
01:37:43.255 --> 01:37:46.515
And then I have 1927 now.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20961-0
01:37:46.525 --> 01:37:47.665
Is this a complete binary tree?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20968-0
01:37:48.715 --> 01:37:50.065
Yes, this is the CBT.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20973-0
01:37:50.465 --> 01:37:51.465
But is this a heap?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20981-0
01:37:51.675 --> 01:37:52.455
Is this any heap?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/20988-0
01:37:54.165 --> 01:37:55.045
Can you quickly tell me that?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21004-0
01:37:55.875 --> 01:37:59.085
But if I is greater than 33 N no
42, no.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21015-0
01:37:59.475 --> 01:38:02.125
This seems to be mean he, but
here again there is problematic.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21023-0
01:38:02.195 --> 01:38:04.085
So this is not a heap, right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21034-0
01:38:04.095 --> 01:38:06.145
So I should be making it a heap.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21043-0
01:38:06.215 --> 01:38:07.985
I want to make a min heap out of
it.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21055-0
01:38:08.535 --> 01:38:09.755
So what algorithm I will apply?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21068-0
01:38:10.745 --> 01:38:15.255
I'll apply meaning hippie fight
on which nodes will apply.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21071-0
01:38:15.265 --> 01:38:16.045
SURBHI will tell that.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21094-0
01:38:18.565 --> 01:38:21.470
I just whatever number was
given, I translated into a

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21094-1
01:38:21.470 --> 01:38:23.675
complete binary tree that is not
a heap.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21115-0
01:38:23.945 --> 01:38:27.938
I want a min heap so I will
apply min Heapify but on what

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21115-1
01:38:27.938 --> 01:38:30.415
all position should I do that
yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21123-0
01:38:34.235 --> 01:38:35.045
Toby will tell that.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21125-0
01:38:38.875 --> 01:38:39.015
Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21131-0
01:38:41.075 --> 01:38:42.075
27 is wrong.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21134-0
01:38:42.135 --> 01:38:42.635
Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21137-0
01:38:42.705 --> 01:38:43.395
Anyone else?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21157-0
01:38:43.445 --> 01:38:47.693
Yeah, I should start doing it in
internal nodes, meaning I should

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21157-1
01:38:47.693 --> 01:38:48.465
do it in 42.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21165-0
01:38:48.915 --> 01:38:50.345
I should do it in 33.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21182-0
01:38:50.515 --> 01:38:54.475
I should do it in this so these
positions I should do my

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21182-1
01:38:54.475 --> 01:38:55.655
application cool.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21194-0
01:38:55.845 --> 01:38:57.555
That's what you will do and what
you will get.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21214-0
01:38:57.565 --> 01:39:02.308
You will get a heap and in that
perform 2 deletion, meaning two

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21214-1
01:39:02.308 --> 01:39:04.975
times you delete that route,
right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21244-0
01:39:06.405 --> 01:39:08.786
And yeah, these type of
techniques you should not do

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21244-1
01:39:08.786 --> 01:39:11.527
like sorting it, inserting it
and all that you should not do

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21244-2
01:39:11.527 --> 01:39:12.515
this is the technique.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21258-0
01:39:12.685 --> 01:39:15.273
Yeah, you should not reinvent
the wheel by doing some other

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21258-1
01:39:15.273 --> 01:39:15.575
things.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21262-0
01:39:15.965 --> 01:39:16.235
Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21267-0
01:39:16.245 --> 01:39:17.355
Please keep that in mind.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21276-0
01:39:17.365 --> 01:39:19.855
Don't manipulate anything with
that given data.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21290-0
01:39:20.145 --> 01:39:22.315
If you sort it, you will get
some other type of a tree.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21298-0
01:39:22.745 --> 01:39:27.155
Yeah, perform two delete
operations in that tree.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21309-0
01:39:27.585 --> 01:39:28.995
Delete, meaning you will delete
the route.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21319-0
01:39:29.005 --> 01:39:30.925
You will again put the last node
there.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21334-0
01:39:30.935 --> 01:39:32.835
You will perform all that down
heat bubbling.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21338-0
01:39:32.945 --> 01:39:33.655
You will get it.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21352-0
01:39:34.045 --> 01:39:37.324
Similarly for this question
apply Max Heap, will you be able

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21352-1
01:39:37.324 --> 01:39:37.915
to do this?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21355-0
01:39:39.915 --> 01:39:40.205
Yes.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21357-0
01:39:40.215 --> 01:39:40.545
No, maybe.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21372-0
01:39:43.725 --> 01:39:45.605
The bigger exercise you'll have
to create it.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21379-0
01:39:45.615 --> 01:39:46.825
You'll have to delete two times.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21386-0
01:39:46.835 --> 01:39:47.755
You'll have to create it.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21394-0
01:39:47.765 --> 01:39:49.565
You'll have to delete two times,
right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21402-0
01:39:50.435 --> 01:39:51.465
OK, this is one way.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21417-0
01:39:52.485 --> 01:39:56.525
There's another way where it is
telling you one at a time,

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21417-1
01:39:56.525 --> 01:39:56.935
right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21428-0
01:39:56.945 --> 01:39:59.135
So that is another way to create
a heap.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21439-0
01:39:59.145 --> 01:40:01.225
We will look at it now in some
examples.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21441-0
01:40:01.685 --> 01:40:02.155
Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21453-0
01:40:02.225 --> 01:40:05.539
Meaning immediately immediately
you will perform the swapping if

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21453-1
01:40:05.539 --> 01:40:05.895
needed.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21460-0
01:40:06.225 --> 01:40:07.215
Yeah, we will look at it.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21470-0
01:40:07.485 --> 01:40:10.825
It is called creating a heap by
repetitive insertion.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21475-0
01:40:13.375 --> 01:40:14.145
What about this?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21482-0
01:40:14.205 --> 01:40:15.245
There's another excuse for you.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21493-0
01:40:15.255 --> 01:40:17.445
Consider a binary Max CP
implemented using an array.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21501-0
01:40:17.455 --> 01:40:19.115
Which of them represents a Max
heap?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21544-0
01:40:19.175 --> 01:40:22.595
Such questions you can expect in
the quiz, so each of them you

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21544-1
01:40:22.595 --> 01:40:25.906
will translate it into a tree
and then you will see which of

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21544-2
01:40:25.906 --> 01:40:28.945
them is a Max heap, and that
option is the correct one.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21550-0
01:40:29.135 --> 01:40:31.685
Others are not Max heaps. Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21559-0
01:40:31.695 --> 01:40:33.985
Did you all get the question
real quick?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21561-0
01:40:36.025 --> 01:40:36.165
Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21571-0
01:40:38.995 --> 01:40:40.395
Descending order all that is
wrong.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21585-0
01:40:40.455 --> 01:40:42.865
Yeah, there can be any form
which can be a Max heap.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21602-0
01:40:43.245 --> 01:40:45.933
There is no way you can
recognize that sorted one is

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21602-1
01:40:45.933 --> 01:40:46.845
heap and all that.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21607-0
01:40:46.855 --> 01:40:47.415
Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21611-0
01:40:47.545 --> 01:40:48.855
Don't go by that logics.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21628-0
01:40:49.145 --> 01:40:53.042
Try to translate this into a
tree and see which of them is a

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21628-1
01:40:53.042 --> 01:40:53.425
maxim.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21631-0
01:40:54.305 --> 01:40:55.235
Yeah, there is.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21662-0
01:40:55.625 --> 01:40:59.411
I can always give an order which
looks like a descending or, you

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21662-1
01:40:59.411 --> 01:41:02.555
know sending, but it might not
be a heap or Max cpia.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21668-0
01:41:04.195 --> 01:41:05.335
Well, that's pretty much, yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21673-0
01:41:05.395 --> 01:41:06.885
So, no, Sir.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21678-0
01:41:06.895 --> 01:41:07.845
Can you explain the question?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21682-0
01:41:07.895 --> 01:41:08.105
Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21690-0
01:41:08.115 --> 01:41:10.925
The question simply says there
are four arrays.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21698-0
01:41:11.235 --> 01:41:12.405
Which of them is a Max heap?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21702-0
01:41:13.205 --> 01:41:15.095
Array representation right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21730-0
01:41:15.375 --> 01:41:18.562
So what you should do to solve
such problems is for each of

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21730-1
01:41:18.562 --> 01:41:21.695
them you will translate that
into a tree like this, right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21745-0
01:41:21.985 --> 01:41:24.884
You will translate that and then
you will check is that a Max heap or not.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21760-0
01:41:27.685 --> 01:41:30.485
Right, for all of the four you
will do right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21787-0
01:41:30.495 --> 01:41:33.159
25 is greater than 141614, is
greater than 16, is greater than

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21787-1
01:41:33.159 --> 01:41:34.385
the first one, is a Max heap.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21803-0
01:41:35.835 --> 01:41:39.523
The others also you will draw it
and see if it is really a max heap

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21803-1
01:41:39.523 --> 01:41:40.305
or not, right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21822-0
01:41:42.605 --> 01:41:45.339
Now all of you got the question,
Sir, can we make a tree and

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21822-1
01:41:45.339 --> 01:41:46.055
check condition?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21830-0
01:41:46.065 --> 01:41:46.995
Yeah, that's what I did right.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21837-0
01:41:47.385 --> 01:41:48.195
This is a Max heap.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21849-0
01:41:48.585 --> 01:41:51.515
The first one is a Max heap, the
others are not. Actually.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21862-0
01:41:52.325 --> 01:41:55.158
Yeah, with such trivial
questions, you can't expect from

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21862-1
01:41:55.158 --> 01:41:55.655
me, right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21881-0
01:41:55.945 --> 01:41:59.820
I will just give you this much
and I'll ask you how many of

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21881-1
01:41:59.820 --> 01:42:01.305
these are heaps, right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21900-0
01:42:01.375 --> 01:42:03.635
So you should draw all of them
and check right.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21914-0
01:42:04.685 --> 01:42:06.589
Otherwise, the moment you get
the right answer, you will stop

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21914-1
01:42:06.589 --> 01:42:06.865
it there.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21934-0
01:42:07.595 --> 01:42:11.133
But I want you to translate all
of them and give me how many

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21934-1
01:42:11.133 --> 01:42:12.815
heaps are there out of these.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21949-0
01:42:13.795 --> 01:42:16.434
So for MCQ, all of these you
know tricks you can follow.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21949-1
01:42:16.434 --> 01:42:16.665
Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21958-0
01:42:17.465 --> 01:42:18.355
So that's pretty much so.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21966-0
01:42:18.365 --> 01:42:20.525
Now, do you all know what is heapification

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21974-0
01:42:21.205 --> 01:42:22.585
What is maxi min heap?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21982-0
01:42:25.165 --> 01:42:25.925
Yeah, I'll keep asking.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21988-0
01:42:25.935 --> 01:42:26.935
You will keep telling. Yes. No.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/21990-0
01:42:26.945 --> 01:42:27.395
Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22000-0
01:42:27.465 --> 01:42:28.765
Do you know what is Max heap min
heap?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22007-0
01:42:32.125 --> 01:42:32.945
Yeah, yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22013-0
01:42:32.955 --> 01:42:34.795
VISHAL be spoke about it long
back?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22019-0
01:42:34.805 --> 01:42:35.635
Yeah, fifth slide.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22039-0
01:42:35.645 --> 01:42:39.366
Was that only if there's a heap
directly translated to an array,

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22039-1
01:42:39.366 --> 01:42:39.995
that's all.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22054-0
01:42:40.095 --> 01:42:43.455
Yeah, if it's an array translate
into a complete binary tree.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22064-0
01:42:43.535 --> 01:42:45.815
If it is not a heap, perform
heapification.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22074-0
01:42:46.285 --> 01:42:48.075
That's what the whole story we
have been learning, right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22084-0
01:42:49.315 --> 01:42:50.265
You know what is the Max heap?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22097-0
01:42:50.275 --> 01:42:52.235
You know what is the min heap
right.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22122-0
01:42:53.225 --> 01:42:56.192
Second thing, if a CBT is given
to you, which is what we shall

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22122-1
01:42:56.192 --> 01:42:58.405
ask now like can you give me an
example right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22127-0
01:42:59.435 --> 01:43:00.265
Something like this.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22145-0
01:43:00.315 --> 01:43:04.975
This is an array given to you
translate it into a CPT after

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22145-1
01:43:04.975 --> 01:43:06.295
you translate it.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22161-0
01:43:06.345 --> 01:43:09.615
It might automatically be a heap
if it is not a heap.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22163-0
01:43:09.625 --> 01:43:10.145
What will you do?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22168-0
01:43:13.005 --> 01:43:13.165
Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22172-0
01:43:14.065 --> 01:43:15.055
What should you be doing?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22178-0
01:43:15.185 --> 01:43:16.355
What is that process called?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22202-0
01:43:19.235 --> 01:43:22.312
There was an area given it
translated into a CPT but it is

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22202-1
01:43:22.312 --> 01:43:22.885
not a heap.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22229-0
01:43:23.075 --> 01:43:26.445
Then if I want to make it as a
heap, I will perform heapification

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22229-1
01:43:26.445 --> 01:43:29.755
yeah, so there's a lot
of terminologies here.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22242-0
01:43:29.765 --> 01:43:32.685
So I want you to remember them
technically you all know it.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22264-0
01:43:32.695 --> 01:43:35.391
It is swap only, but you should
not use that term because we are

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22264-1
01:43:35.391 --> 01:43:36.635
doing a masters course, right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22270-0
01:43:36.695 --> 01:43:38.885
We love jargons. Computing.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22275-0
01:43:38.895 --> 01:43:40.145
Students love jargons, right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22285-0
01:43:40.365 --> 01:43:42.085
Heapification is the right term.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22316-0
01:43:42.325 --> 01:43:45.982
Heapification is the process of
translating a non heap into a

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22316-1
01:43:45.982 --> 01:43:49.395
heap and if I wanted a Max heap
I will perform Max heapify.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22319-0
01:43:50.315 --> 01:43:50.865
You want?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22347-0
01:43:50.875 --> 01:43:55.436
I mean, he help perform mean
heapify problem solved and then

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22347-1
01:43:55.436 --> 01:43:59.623
we also learned about what is
insertion and deletion in

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22347-2
01:43:59.623 --> 01:44:00.295
deletion.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22373-0
01:44:00.305 --> 01:44:03.691
I can only delete the root and
if I delete it I will place the

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22373-1
01:44:03.691 --> 01:44:06.865
last node there and then what
type of bubbling is required.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22376-0
01:44:09.385 --> 01:44:09.545
Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22389-0
01:44:13.625 --> 01:44:14.755
Simran, Amit, all of you.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22395-0
01:44:14.765 --> 01:44:16.415
Which type of bubbling is
needed?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22416-0
01:44:16.465 --> 01:44:20.046
Yeah, very good down he bubbling
because from root it'll bubble

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22416-1
01:44:20.046 --> 01:44:20.325
down.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22423-0
01:44:21.265 --> 01:44:22.535
And what about insertion?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22455-0
01:44:22.625 --> 01:44:26.191
You will insert it at Z which
is the insertion point and then

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22455-1
01:44:26.191 --> 01:44:28.475
it may bubble up to its proper
position.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22469-0
01:44:28.525 --> 01:44:32.632
So that is up heap bubbling, so
insertion is upheap, bubbling

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22469-1
01:44:32.632 --> 01:44:34.685
deletionist down heap bubbling.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22475-0
01:44:35.135 --> 01:44:36.225
So we learned about all that.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22483-0
01:44:36.235 --> 01:44:36.845
So is this clear?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22490-0
01:44:36.855 --> 01:44:38.835
So far, so far, so good.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22493-0
01:44:38.845 --> 01:44:39.745
All of you heaps?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22499-0
01:44:40.325 --> 01:44:43.285
Yeah, practice all such
questions.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22518-0
01:44:43.295 --> 01:44:46.020
Yeah, only when you draw and you
know all that, you will enjoy

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22518-1
01:44:46.020 --> 01:44:46.625
this concepts.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22528-0
01:44:46.635 --> 01:44:49.445
Yeah, keep doing all these sorts
of exercises.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22539-0
01:44:49.755 --> 01:44:51.365
Yeah, you'll actually enjoy
doing that.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22547-0
01:44:51.855 --> 01:44:53.725
So here you are doing upheap
bubbling.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22560-0
01:44:54.465 --> 01:44:57.936
Here you are using down heap
bubbling because this deletion

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22560-1
01:44:57.936 --> 01:44:58.225
cool.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22575-0
01:44:58.235 --> 01:45:00.985
That being said, let's get
started with heap sort, right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22587-0
01:45:00.995 --> 01:45:04.845
Heapsort is one of the
applications of your heap.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22615-0
01:45:06.235 --> 01:45:09.579
Heapsort is one of the best
sorting methods or algorithms

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22615-1
01:45:09.579 --> 01:45:12.865
being in place and in no
quadratic worst case scenarios.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22622-0
01:45:13.495 --> 01:45:14.905
What is this in place now?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22625-0
01:45:15.295 --> 01:45:15.685
Right.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22642-0
01:45:15.835 --> 01:45:18.559
So I'll very quickly recap all
this is not there, but you have

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22642-1
01:45:18.559 --> 01:45:18.905
to know.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22655-0
01:45:19.195 --> 01:45:23.085
So any sorting algorithm, there
are two properties for it.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22659-0
01:45:23.905 --> 01:45:24.425
Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22701-0
01:45:24.805 --> 01:45:29.422
One is called in place right in
place, means a sorting algorithm

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22701-1
01:45:29.422 --> 01:45:33.755
is set to be in place if it
moves the items within the array

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22701-2
01:45:33.755 --> 01:45:38.229
itself, and thus requires only a
small constant extra storage,

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22701-3
01:45:38.229 --> 01:45:38.655
right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22713-0
01:45:39.565 --> 01:45:42.315
So there are two properties for
any sorting algorithm.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22723-0
01:45:42.585 --> 01:45:45.095
One is called in place, one is
called stability.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22727-0
01:45:45.905 --> 01:45:46.175
Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22752-0
01:45:46.185 --> 01:45:48.660
So stability is a bigger
concept, so I don't want to

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22752-1
01:45:48.660 --> 01:45:50.995
touch into all that, but you can
Google about it.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22759-0
01:45:51.005 --> 01:45:52.535
Yeah, stability of a sorting.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22785-0
01:45:52.985 --> 01:45:57.349
Yeah, it revolves around the
relative position and so on, but

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22785-1
01:45:57.349 --> 01:46:00.515
in place is important, meaning
in heap sort.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22807-0
01:46:00.525 --> 01:46:03.796
If you give me an array and if
you tell me to sort it, I will

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22807-1
01:46:03.796 --> 01:46:05.695
not need some other data
structure.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22835-0
01:46:06.165 --> 01:46:09.285
Of course I'll need some small
variables, but I will not use

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22835-1
01:46:09.285 --> 01:46:11.995
some other array, stack, linked
list etc to sort it.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22857-0
01:46:12.505 --> 01:46:15.724
I will use the very same data
structure which is given to me

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22857-1
01:46:15.724 --> 01:46:17.095
and I will do the sorting.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22873-0
01:46:18.015 --> 01:46:21.738
Such sorting techniques are
called in place, so do you all

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22873-1
01:46:21.738 --> 01:46:23.315
know what is bubble sort?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22877-0
01:46:23.385 --> 01:46:23.985
Is it in place?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22887-0
01:46:26.675 --> 01:46:27.845
But doing bubble sort.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22903-0
01:46:27.855 --> 01:46:31.174
Am I using some other data
structure or I'm just doing some

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22903-1
01:46:31.174 --> 01:46:32.225
swaps and doing it?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22914-0
01:46:32.635 --> 01:46:34.365
Yeah, bubble sort is also in
place.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22917-0
01:46:34.575 --> 01:46:35.085
Bubble sort.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22923-0
01:46:35.095 --> 01:46:35.685
Selection sort.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22933-0
01:46:35.695 --> 01:46:38.525
Insertion sort, heapsort et
cetera are in place.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22944-0
01:46:38.835 --> 01:46:40.615
There are some sortings like
merge sort.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22958-0
01:46:41.555 --> 01:46:44.565
Yeah, Merge sort is a sorting
technique which is not in place.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22968-0
01:46:44.575 --> 01:46:45.885
We will learn in this course
later.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22976-0
01:46:46.135 --> 01:46:47.265
At that time you will realize
it.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22981-0
01:46:48.275 --> 01:46:49.255
So far so good, all of you.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22988-0
01:46:51.375 --> 01:46:52.085
Krishna says.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/22994-0
01:46:52.135 --> 01:46:53.105
Yeah, I do not know them.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23001-0
01:46:53.115 --> 01:46:54.285
So how do I even answer?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23005-0
01:46:54.555 --> 01:46:55.085
But that's fine.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23014-0
01:46:55.095 --> 01:46:56.545
You understood what is in place,
right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23040-0
01:46:57.155 --> 01:47:01.217
Any sorting algorithm which is
just swapping within them to get

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23040-1
01:47:01.217 --> 01:47:03.565
the sorted order is called in
place.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23055-0
01:47:03.855 --> 01:47:07.163
If I use some other data
structure help then that is not

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23055-1
01:47:07.163 --> 01:47:07.685
in place.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23061-0
01:47:07.995 --> 01:47:10.365
So this guy is in place
algorithm.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23070-0
01:47:10.375 --> 01:47:12.825
He'll not need extra space and
time wise.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23094-0
01:47:12.835 --> 01:47:15.917
Also, he's very good because
he's no quadratic meaning in no

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23094-1
01:47:15.917 --> 01:47:18.595
case he will have, you know,
N Square, etcetera.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23108-0
01:47:19.615 --> 01:47:22.892
Yeah, he's a good algorithm and
it's a very cool algorithm,

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23108-1
01:47:22.892 --> 01:47:23.165
guys.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23139-0
01:47:23.295 --> 01:47:27.997
Yeah, Heapsort is divided into 2
basic parts, creating a heap of

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23139-1
01:47:27.997 --> 01:47:32.119
the unsorted list, whatever
number is given to you, just

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23139-2
01:47:32.119 --> 01:47:33.855
create a heap out of it.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23141-0
01:47:34.705 --> 01:47:35.315
Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23173-0
01:47:35.525 --> 01:47:38.737
Then a sorted array is created
by repeatedly removing the

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23173-1
01:47:38.737 --> 01:47:42.280
largest or smallest element of
the heap, and now this is a good

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23173-2
01:47:42.280 --> 01:47:43.775
time to ask you a question.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23179-0
01:47:44.865 --> 01:47:45.805
I have a Max heap.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23190-0
01:47:46.705 --> 01:47:49.575
Where is the largest element of
that Max heap ?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23193-0
01:47:51.465 --> 01:47:52.225
Take any example.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23203-0
01:47:53.335 --> 01:47:54.775
Yeah, it'll be in the root.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23215-0
01:47:55.895 --> 01:48:00.395
I have a min heap who will be
there in the root, yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23237-0
01:48:02.605 --> 01:48:05.636
Surbhi, others I have
a min heap like this who will be

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23237-1
01:48:05.636 --> 01:48:06.195
in the root.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23240-0
01:48:07.375 --> 01:48:07.585
Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23243-0
01:48:07.595 --> 01:48:08.185
Which element?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23252-0
01:48:08.195 --> 01:48:09.185
What can you comment about

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23255-0
01:48:09.195 --> 01:48:09.905
The root element?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23272-0
01:48:10.225 --> 01:48:13.677
Yeah, the minimum element, the
smallest element will be there

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23272-1
01:48:13.677 --> 01:48:14.345
in the root.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23308-0
01:48:14.555 --> 01:48:18.179
If it is a min heap, if it is a
Max heap, the largest element

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23308-1
01:48:18.179 --> 01:48:21.744
will be there in the root, so
these are some observations or

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23308-2
01:48:21.744 --> 01:48:23.205
qualities about the heap.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23315-0
01:48:23.515 --> 01:48:25.455
So I will make use of that
property.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23322-0
01:48:26.255 --> 01:48:27.045
I will remove it.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23336-0
01:48:27.885 --> 01:48:30.235
I will keep removing and what I
get is a sorted order.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23349-0
01:48:31.465 --> 01:48:33.775
So what I mean to say is why to
study heapsort?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23370-0
01:48:34.105 --> 01:48:36.934
Because it's a well known
traditional sorting algorithm,

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23370-1
01:48:36.934 --> 01:48:39.515
it's it's been there for like
four or five decades.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23377-0
01:48:39.525 --> 01:48:40.775
It's a very old algorithm.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23409-0
01:48:41.325 --> 01:48:45.411
Heapsort is always big O(n) and
log n, so it's a very good

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23409-1
01:48:45.411 --> 01:48:49.012
thing that it guarantees me
whatever be the number,

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23409-2
01:48:49.012 --> 01:48:49.635
whatever.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23431-0
01:48:49.645 --> 01:48:53.117
And you give me, I will have
complexity as N log N I will not

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23431-1
01:48:53.117 --> 01:48:55.165
go to North Square, N cube
etcetera.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23439-0
01:48:56.065 --> 01:48:57.735
Yeah, but there are some bad
algorithms.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23461-0
01:48:57.745 --> 01:49:01.282
We will look at it after mid SIM
depending on the type of numbers

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23461-1
01:49:01.282 --> 01:49:03.265
given, their complexity will
change.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23467-0
01:49:03.795 --> 01:49:05.905
So Heapsort is always clear.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23483-0
01:49:06.035 --> 01:49:08.946
He'll always give and log north
and Heapsort is really a cool algorithm.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23488-0
01:49:10.515 --> 01:49:11.185
Why is it cool?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23495-0
01:49:11.195 --> 01:49:12.295
Why do I say like that?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23509-0
01:49:13.345 --> 01:49:14.715
Well, it's like a kid's play,
right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23518-0
01:49:14.725 --> 01:49:16.195
I mean, you do 2 things.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23520-0
01:49:16.365 --> 01:49:17.245
You build a heap.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23524-0
01:49:19.275 --> 01:49:19.545
Right.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23545-0
01:49:19.555 --> 01:49:22.729
Whatever numbers we're given to
you, numbers were given you

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23545-1
01:49:22.729 --> 01:49:24.315
built a heap out of it, right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23555-0
01:49:25.235 --> 01:49:29.325
And now remove everything and
what you got is sorted.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23563-0
01:49:31.445 --> 01:49:32.515
Isn't that looking cool for you?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23576-0
01:49:34.535 --> 01:49:36.205
We were given at list of
numbers.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23582-0
01:49:36.775 --> 01:49:38.345
You created a heap out of it.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23591-0
01:49:38.735 --> 01:49:41.575
You removed everything but in
that process.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23601-0
01:49:41.585 --> 01:49:42.815
What you got is sorted order.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23604-0
01:49:44.325 --> 01:49:44.745
Yes, no.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23614-0
01:49:44.755 --> 01:49:46.875
Did you all understand the
philosophy of this sorting?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23624-0
01:49:46.885 --> 01:49:48.815
If you understood this, then
everything falls in place.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23649-0
01:49:49.015 --> 01:49:52.100
You don't need to actually write
the code and you know the whole

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23649-1
01:49:52.100 --> 01:49:54.425
working of it, but this is the
philosophy of it.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23658-0
01:49:54.645 --> 01:49:57.285
So every sorting algorithm runs
on a philosophy.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23662-0
01:49:57.965 --> 01:49:58.135
Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23679-0
01:49:59.345 --> 01:50:02.145
So this is a very cool algorithm
which has two phases, building

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23679-1
01:50:02.145 --> 01:50:03.545
it and then removing everything.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23685-0
01:50:04.735 --> 01:50:05.375
Not clear, Krishna ?.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23702-0
01:50:06.535 --> 01:50:09.335
This is a list of numbers given
to you which is not in sorted

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23702-1
01:50:09.335 --> 01:50:09.605
order.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23715-0
01:50:10.325 --> 01:50:13.515
The first phases using that
numbers build a heap.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23719-0
01:50:14.275 --> 01:50:14.885
You've built it.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23724-0
01:50:15.585 --> 01:50:16.275
How can you build it?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23742-0
01:50:18.405 --> 01:50:21.692
That in place is the one where
we do not need extra element or

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23742-1
01:50:21.692 --> 01:50:22.005
space.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23758-0
01:50:22.015 --> 01:50:26.137
Yes, extra data structure you
don't need meaning in this array

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23758-1
01:50:26.137 --> 01:50:26.595
itself.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23776-0
01:50:26.605 --> 01:50:29.324
I can use the sorting, I don't
need another array and other

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23776-1
01:50:29.324 --> 01:50:30.275
linked list etcetera.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23779-0
01:50:30.285 --> 01:50:30.685
I don't need.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23789-0
01:50:32.235 --> 01:50:33.655
They are going back to Krishna,
he told us.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23795-0
01:50:33.665 --> 01:50:34.145
Not clear.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23802-0
01:50:34.155 --> 01:50:35.105
So there's a list of numbers.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23805-0
01:50:35.115 --> 01:50:35.695
You built a heap.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23813-0
01:50:36.495 --> 01:50:37.695
How many ways are there to
build?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23819-0
01:50:37.705 --> 01:50:39.485
There are two ways, right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23840-0
01:50:39.575 --> 01:50:44.077
Either I can just translate this
into a CPT right and then apply

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23840-1
01:50:44.077 --> 01:50:45.185
heapification.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23866-0
01:50:45.245 --> 01:50:48.737
That is one way or I can create
it using repetitive insertion,

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23866-1
01:50:48.737 --> 01:50:51.175
which is what I'll show you now
one by one.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23876-0
01:50:51.305 --> 01:50:53.725
Each of the element you can
create it into a heap.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23883-0
01:50:53.845 --> 01:50:54.915
Heap is now created.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23932-0
01:50:55.325 --> 01:50:58.635
The first phase is over in that
created heap, delete all the

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23932-1
01:50:58.635 --> 01:51:02.052
elements, meaning first delete
the root and then you know you

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23932-2
01:51:02.052 --> 01:51:05.307
will perform all that you know
down heap bubbling then some

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23932-3
01:51:05.307 --> 01:51:07.965
other you know he could have
got created again.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23934-0
01:51:07.975 --> 01:51:08.715
Delete the root.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23940-0
01:51:08.785 --> 01:51:09.555
Keep doing that.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23945-0
01:51:09.785 --> 01:51:12.525
All nodes will be deleted right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23959-0
01:51:12.695 --> 01:51:14.485
And what you have got it is a
sorted out.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23967-0
01:51:14.835 --> 01:51:15.635
So we'll take an example.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/23980-0
01:51:17.495 --> 01:51:19.725
Given an array of N elements, we
first build the heap.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24009-0
01:51:19.835 --> 01:51:22.755
The largest element is at the
root, but it's position in

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24009-1
01:51:22.755 --> 01:51:26.034
sorted array should be the last
if it's we are talking about an

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24009-2
01:51:26.034 --> 01:51:27.365
increasing order, correct?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24018-0
01:51:27.435 --> 01:51:29.265
So swap the root with the last
position.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24026-0
01:51:30.055 --> 01:51:31.325
Yeah, we, we will come to this.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24032-0
01:51:31.435 --> 01:51:32.285
You will get it.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24038-0
01:51:32.355 --> 01:51:32.465
Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24047-0
01:51:33.185 --> 01:51:36.905
With these two are important but
increasing order.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24051-0
01:51:37.265 --> 01:51:37.455
Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24075-0
01:51:37.465 --> 01:51:41.759
What is increasing order
ascending order for that create

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24075-1
01:51:41.759 --> 01:51:46.053
a Max heap for a decreasing
order right from largest too

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24075-2
01:51:46.053 --> 01:51:46.505
small.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24078-0
01:51:46.555 --> 01:51:47.155
Create a min heap.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24084-0
01:51:48.565 --> 01:51:49.085
Let's do this.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24087-0
01:51:50.295 --> 01:51:51.185
Heap sort example.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24095-0
01:51:51.235 --> 01:51:52.305
Yeah, let's do this real quick.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24112-0
01:51:52.315 --> 01:51:56.162
We have another 10 more minutes
illustrate heap sort for array

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24112-1
01:51:56.162 --> 01:51:56.345
of.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24135-0
01:51:56.355 --> 01:51:59.690
This sorting should be an
increasing order, so if it's an

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24135-1
01:51:59.690 --> 01:52:02.910
increasing order, what heap
should I create As for this

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24135-2
01:52:02.910 --> 01:52:03.255
slide?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24142-0
01:52:04.945 --> 01:52:05.215
Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24149-0
01:52:05.225 --> 01:52:08.045
Real quick, guys, increasing
order I want.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24157-0
01:52:09.245 --> 01:52:10.405
I will create a Max heap.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24164-0
01:52:11.165 --> 01:52:13.035
So are the given numbers?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24169-0
01:52:13.345 --> 01:52:14.095
Random numbers?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24184-0
01:52:14.105 --> 01:52:18.595
Or is it already in some sorted
order 4 7 2 1 3?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24191-0
01:52:18.605 --> 01:52:19.965
It is not in any order, right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24198-0
01:52:19.975 --> 01:52:21.505
It is a random number.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24219-0
01:52:21.555 --> 01:52:25.520
I want to create it in sorting
out, so I will first create a

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24219-1
01:52:25.520 --> 01:52:27.925
Max heap first approach of
creating.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24223-0
01:52:27.935 --> 01:52:29.345
You already know correct.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24248-0
01:52:29.495 --> 01:52:33.527
You would have directly
translated this into 4 7 2 1 3 and

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24248-1
01:52:33.527 --> 01:52:36.385
then you will apply heapification
on it.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24270-0
01:52:36.635 --> 01:52:40.184
That is one way to create a heap
or there's another way which

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24270-1
01:52:40.184 --> 01:52:41.385
some people may like.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24278-0
01:52:41.935 --> 01:52:44.485
I'll first create a four first
number.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24291-0
01:52:45.905 --> 01:52:48.225
Now this is a leaf, so can I
call it as a heap?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24301-0
01:52:50.735 --> 01:52:53.885
Yes, no, this is already a heap.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24330-0
01:52:53.895 --> 01:52:57.761
Now I will insert my 7:00 in the
proper position, which is the

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24330-1
01:52:57.761 --> 01:53:01.320
obvious position to the left
side right side, just like a

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24330-2
01:53:01.320 --> 01:53:01.565
CBT.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24345-0
01:53:02.335 --> 01:53:06.765
The moment I have added seven
now, is this a keep or not?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24355-0
01:53:07.885 --> 01:53:10.545
Because four is not greater than
7, right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24369-0
01:53:10.555 --> 01:53:14.288
So it is violating the heap
property, so I will immediately

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24369-1
01:53:14.288 --> 01:53:14.785
swap it.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24380-0
01:53:16.465 --> 01:53:20.405
Meaning, I performed a peep
public right.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24386-0
01:53:20.415 --> 01:53:22.285
Immediately it went, got
swapped.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24399-0
01:53:22.295 --> 01:53:24.635
It is now a heap now two I'll
insert.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24409-0
01:53:24.645 --> 01:53:28.115
Where will insert what is the
next zed position, Amit.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24423-0
01:53:30.155 --> 01:53:32.265
Can I add somewhere as the left
or right of four?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24428-0
01:53:32.275 --> 01:53:32.825
Can I add it?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24432-0
01:53:33.265 --> 01:53:33.465
No.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24447-0
01:53:33.475 --> 01:53:35.105
If I add it, it will not become
a heap at all.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24451-0
01:53:35.375 --> 01:53:37.095
So the only position is here.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24459-0
01:53:39.195 --> 01:53:41.015
Yeah, I added two already.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24471-0
01:53:41.025 --> 01:53:42.965
Seven is greater than four, and
two, it's a Max heap.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24475-0
01:53:43.035 --> 01:53:44.245
No problem, right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24492-0
01:53:45.085 --> 01:53:48.067
What is the next element I
should insert one to the left of

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24492-1
01:53:48.067 --> 01:53:48.315
four?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24497-0
01:53:48.325 --> 01:53:50.295
I should insert again.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24502-0
01:53:50.305 --> 01:53:51.625
It's already a heap, right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24528-0
01:53:51.855 --> 01:53:55.168
Seven is greater than four and
two, four is greater than one,

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24528-1
01:53:55.168 --> 01:53:57.785
so there was no need of swap or
upbeat bubbling.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24545-0
01:53:59.175 --> 01:54:02.635
And three, three also inserted
and this is now a maxi.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24554-0
01:54:03.345 --> 01:54:04.735
Are you getting this point all
of you?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24564-0
01:54:04.945 --> 01:54:08.795
This is called building a heap
using repetitive insertion.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24593-0
01:54:09.085 --> 01:54:13.441
So one element after the other
I'm inserting in the proper

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24593-1
01:54:13.441 --> 01:54:17.501
position Z and if there is a
need I will perform a app

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24593-2
01:54:17.501 --> 01:54:18.165
bubbling.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24602-0
01:54:19.445 --> 01:54:20.795
No, that that is where the trick
is.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24610-0
01:54:20.805 --> 01:54:22.655
Yeah, Kumar, we should not do
that.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24618-0
01:54:22.665 --> 01:54:24.345
Yeah, we will see this example.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24623-0
01:54:24.355 --> 01:54:25.045
You will understand why.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24641-0
01:54:26.285 --> 01:54:29.936
Yeah, if it is a increasing
order, we need the Max heap and

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24641-1
01:54:29.936 --> 01:54:31.335
you will understand it.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24657-0
01:54:31.345 --> 01:54:34.865
Why in a moment, let's face it
clear for all of you.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24660-0
01:54:36.835 --> 01:54:37.145
Yes.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24668-0
01:54:37.155 --> 01:54:38.275
No, all of you real quick.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24697-0
01:54:39.485 --> 01:54:42.618
Either you could have taken the
OR other approach to create a

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24697-1
01:54:42.618 --> 01:54:45.800
heap or you can use this yeah,
which is nothing but repetitive

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24697-2
01:54:45.800 --> 01:54:46.305
insertion.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24704-0
01:54:47.335 --> 01:54:48.865
Yeah, we have built it.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24713-0
01:54:48.875 --> 01:54:51.125
Now I have another slide for
you, right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24738-0
01:54:51.135 --> 01:54:54.832
This is another way of depicting
so initially so this blue color

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24738-1
01:54:54.832 --> 01:54:56.595
means they are all in an array.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24747-0
01:54:57.635 --> 01:55:00.785
This purple color means they are
in a heap, right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24751-0
01:55:00.795 --> 01:55:01.155
All of you?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24756-0
01:55:01.165 --> 01:55:02.035
Yeah, just a moment.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24761-0
01:55:02.045 --> 01:55:03.365
Yeah, please don't deviate.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24775-0
01:55:03.375 --> 01:55:05.215
We will look at this and then
come back to your questions.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24790-0
01:55:05.225 --> 01:55:07.695
Yeah, initially all of them were
in an array.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24808-0
01:55:08.875 --> 01:55:12.233
The first element went into the
heap, then seven also went into

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24808-1
01:55:12.233 --> 01:55:12.705
the heap.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24825-0
01:55:12.715 --> 01:55:14.897
In the second iteration, so
third iteration for the

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24825-1
01:55:14.897 --> 01:55:15.945
iteration, 5th iteration.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24833-0
01:55:16.255 --> 01:55:18.075
Finally, all of them are now in
a heap.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24841-0
01:55:18.375 --> 01:55:20.035
This is the heap representation,
correct?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24858-0
01:55:20.045 --> 01:55:22.685
So it's seven is the root four
and two are its children.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24871-0
01:55:22.915 --> 01:55:26.035
One and three are its children,
so first phase is over.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24876-0
01:55:26.865 --> 01:55:27.575
So far so good.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24881-0
01:55:27.585 --> 01:55:28.625
All of you understood this part.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24887-0
01:55:29.765 --> 01:55:30.655
Can you just quickly react?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24889-0
01:55:35.015 --> 01:55:35.175
Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24893-0
01:55:37.445 --> 01:55:37.895
Perfect.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24898-0
01:55:38.385 --> 01:55:40.125
Now I will perform deletion.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24901-0
01:55:41.055 --> 01:55:41.385
Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24913-0
01:55:41.395 --> 01:55:45.925
What is the only node that can
be deleted now at this stage?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24921-0
01:55:47.765 --> 01:55:50.835
7 Right focus here.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24933-0
01:55:52.305 --> 01:55:56.995
I should delete that seven and
in that position, who will go?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24960-0
01:55:59.475 --> 01:56:03.723
Yeah, in the normal heap
deletion, if I knock off the

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24960-1
01:56:03.723 --> 01:56:08.363
route, the last leaf right, the
last person will go there,

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24960-2
01:56:08.363 --> 01:56:08.835
right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24990-0
01:56:08.845 --> 01:56:11.401
That is what we were doing in
deletion, but in deletion we

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24990-1
01:56:11.401 --> 01:56:13.999
were just ignoring the seven,
meaning we were just throwing

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/24990-2
01:56:13.999 --> 01:56:14.345
him out.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25001-0
01:56:15.535 --> 01:56:17.915
But here we are not going to
throw him out.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25014-0
01:56:18.955 --> 01:56:22.405
We are going to place him in
that empty position.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25020-0
01:56:23.155 --> 01:56:24.125
Yes, look at this.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25027-0
01:56:24.295 --> 01:56:25.665
This is the array
representation.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25036-0
01:56:25.675 --> 01:56:28.695
This is the heap right now.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25040-0
01:56:28.705 --> 01:56:29.655
I will delete that 7.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25051-0
01:56:32.955 --> 01:56:34.835
Now I got the tree like this
right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25061-0
01:56:34.845 --> 01:56:36.325
Because that last three went
here.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25069-0
01:56:36.495 --> 01:56:37.545
Four is here, 2 is here.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25074-0
01:56:37.555 --> 01:56:38.545
One is here, right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25079-0
01:56:39.035 --> 01:56:40.045
Is this now a Max heap?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25092-0
01:56:42.295 --> 01:56:44.815
Three is not greater than four
to well.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25096-0
01:56:44.885 --> 01:56:46.665
So what bubbling should I
perform?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25102-0
01:56:49.135 --> 01:56:50.445
This was removal, removal.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25108-0
01:56:50.455 --> 01:56:52.685
Meaning, what bubbling is that?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25119-0
01:56:52.735 --> 01:56:55.385
Yeah, don't heat bubbling right.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25129-0
01:56:55.875 --> 01:56:58.425
This three will bubble down to
its proper position.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25139-0
01:56:58.495 --> 01:57:00.785
Yeah, not a peep bubbling.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25141-0
01:57:01.055 --> 01:57:01.645
Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25149-0
01:57:01.695 --> 01:57:04.285
OK, but let's look at the array.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25185-0
01:57:04.885 --> 01:57:09.304
So in the array form, if you
denote this three is here and

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25185-1
01:57:09.304 --> 01:57:14.023
then you have your 4, you have
your two, you have your one and

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25185-2
01:57:14.023 --> 01:57:16.045
seven got deleted, correct?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25194-0
01:57:16.175 --> 01:57:18.295
Is there an empty slot available
for me?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25199-0
01:57:19.615 --> 01:57:20.175
Got it, not.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25202-0
01:57:23.435 --> 01:57:23.805
Right.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25213-0
01:57:24.015 --> 01:57:25.735
Yes, this seven got deleted.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25221-0
01:57:26.925 --> 01:57:28.835
So three game there.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25243-0
01:57:28.885 --> 01:57:32.361
So 3421 is what is the array
representation, but still that

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25243-1
01:57:32.361 --> 01:57:35.315
one vacancy is there, which
seven had got removed.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25266-0
01:57:35.805 --> 01:57:40.884
So can I put that seven there
and in an increasing order is 7

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25266-1
01:57:40.884 --> 01:57:43.095
in its proper position now.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25272-0
01:57:44.445 --> 01:57:45.835
Now all your questions are
answered.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25287-0
01:57:45.845 --> 01:57:48.075
Someone had asked, you know why
I should use Max sleep?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25319-0
01:57:48.805 --> 01:57:52.961
Because once I delete that root
element, there will be 1 vacancy

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25319-1
01:57:52.961 --> 01:57:56.478
at the last position and
actually that is the position

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25319-2
01:57:56.478 --> 01:57:58.715
where that element deserves to
be.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25328-0
01:57:58.945 --> 01:58:00.015
So I'll put that seven there.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25346-0
01:58:01.535 --> 01:58:04.902
There's no how many of you got
that instead of justice throwing

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25346-1
01:58:04.902 --> 01:58:05.375
that guy?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25353-0
01:58:05.635 --> 01:58:06.565
Put him in that place.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25358-0
01:58:06.575 --> 01:58:08.135
Actually, that is his correct
position.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25379-0
01:58:10.075 --> 01:58:13.976
So now if you see this array
that seven has come here, we'll

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25379-1
01:58:13.976 --> 01:58:15.255
we'll proceed ahead.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25386-0
01:58:15.265 --> 01:58:15.855
You will get it.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25389-0
01:58:15.865 --> 01:58:16.605
You know srinivas?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25391-0
01:58:16.615 --> 01:58:17.025
Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25404-0
01:58:17.095 --> 01:58:19.185
So in this case, what is element
that I should delete?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25410-0
01:58:21.585 --> 01:58:22.205
Yeah, real quick.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25419-0
01:58:23.925 --> 01:58:25.175
Don't leave one element
possible.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25427-0
01:58:25.185 --> 01:58:26.895
Is the root, so I'll delete my
4:00.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25432-0
01:58:27.165 --> 01:58:28.925
And who will go in that
position?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25444-0
01:58:31.205 --> 01:58:33.075
Who will go in that position
real quick?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25457-0
01:58:33.165 --> 01:58:36.875
The last OK, one right one will
go to that position.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25468-0
01:58:37.185 --> 01:58:39.895
So he will create a wide right
in that position.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25475-0
01:58:39.905 --> 01:58:41.015
Go put that four actually.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25477-0
01:58:41.025 --> 01:58:41.275
Right.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25488-0
01:58:41.285 --> 01:58:43.475
So instead of this one, put that
four.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25506-0
01:58:43.525 --> 01:58:48.597
Actually, four is in its proper
position then so I deleted that

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25506-1
01:58:48.597 --> 01:58:49.785
4I removed him.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25526-0
01:58:50.165 --> 01:58:54.057
I got my position now 7 instead
of throwing that four, I put him

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25526-1
01:58:54.057 --> 01:58:55.075
in that position.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25537-0
01:58:55.385 --> 01:58:56.195
He's correct now.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25565-0
01:58:56.585 --> 01:59:00.332
So there's 312 are still in
heap, but four and seven are in

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25565-1
01:59:00.332 --> 01:59:04.391
the sorted output, so it's like
swap root with leaf or something

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25565-2
01:59:04.391 --> 01:59:05.015
like that.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25569-0
01:59:05.025 --> 01:59:05.795
Yeah, that's correct.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25574-0
01:59:07.135 --> 01:59:07.455
Cool.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25585-0
01:59:07.465 --> 01:59:08.965
Now in this 312 what should I do
now?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25591-0
01:59:10.105 --> 01:59:12.365
One will get deleted right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25608-0
01:59:12.715 --> 01:59:17.085
So what is the last guy who will
go there right in that position?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25647-0
01:59:18.735 --> 01:59:22.068
I'll put my 3 right and then
finally you're of one and two

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25647-1
01:59:22.068 --> 01:59:25.739
again two will get removed, one
will get removed and your output

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25647-2
01:59:25.739 --> 01:59:29.015
will become something like this
and remove that one also.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25690-0
01:59:29.425 --> 01:59:33.472
Meaning, if you look at this in
that diagrammatic form, all of

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25690-1
01:59:33.472 --> 01:59:37.582
them were in the heap when this
phase started, then seven alone

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25690-2
01:59:37.582 --> 01:59:41.693
got removed, but he went to his
proper position and then in the

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25690-3
01:59:41.693 --> 01:59:43.555
next iteration 4 got removed.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25701-0
01:59:43.625 --> 01:59:47.095
He went to his proper position,
then three got removed.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25709-0
01:59:47.165 --> 01:59:49.295
He went to his proper position.
Right.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25713-0
01:59:49.305 --> 01:59:49.995
Two got removed.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25721-0
01:59:50.005 --> 01:59:51.335
He was in the proper position.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25731-0
01:59:51.785 --> 01:59:53.415
One also got removed from the
heap.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25739-0
01:59:53.425 --> 01:59:54.815
He went to the proper position.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25755-0
01:59:55.105 --> 01:59:58.185
So in the 5th iteration, all of
them are in a sorted output.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25764-0
01:59:59.805 --> 02:00:00.885
It is clear for all of you.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25767-0
02:00:02.295 --> 02:00:03.065
Yeah, simple algorithm.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25797-0
02:00:05.115 --> 02:00:09.076
Was step create the heap, second
step remove all of them, but

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25797-1
02:00:09.076 --> 02:00:12.525
don't throw him away, but put
him in that empty slot.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25816-0
02:00:12.535 --> 02:00:16.446
Actually that empty slot is the
one where he deserved to be in

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25816-1
02:00:16.446 --> 02:00:17.935
the sorted order, right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25835-0
02:00:18.005 --> 02:00:20.473
So please work this example
again right, without my

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25835-1
02:00:20.473 --> 02:00:22.465
presence, without watching the
recording.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25848-0
02:00:22.475 --> 02:00:25.835
Try to do that and you will get
a better hang of it, right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25859-0
02:00:27.975 --> 02:00:29.565
And how does the algorithm look
like?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25883-0
02:00:29.635 --> 02:00:33.109
The first line is building a Max
sleep and if you clearly observe

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25883-1
02:00:33.109 --> 02:00:35.425
the line 2345, what are you
actually doing?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25888-0
02:00:35.435 --> 02:00:36.535
What is this algorithm for?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25902-0
02:00:39.165 --> 02:00:40.635
I want an Indian so to be to
answer this.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25918-0
02:00:41.515 --> 02:00:44.086
If you carefully observe this
part of code, what are we

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25918-1
02:00:44.086 --> 02:00:45.325
actually trying to do here?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25930-0
02:00:48.835 --> 02:00:50.625
Yeah, you are always removing
the root only.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25943-0
02:00:50.695 --> 02:00:54.025
Yeah, romik, you're not getting
any position after deletion.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25959-0
02:00:54.035 --> 02:00:57.265
It may not be a heap, so correct
it in the new corrected heap.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25965-0
02:00:57.275 --> 02:00:58.095
Removed the root.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25969-0
02:00:58.155 --> 02:00:58.825
That's what we are.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25976-0
02:00:58.835 --> 02:01:00.915
Keep on doing no clearly.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25980-0
02:01:00.925 --> 02:01:01.155
Observe.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25983-0
02:01:01.165 --> 02:01:01.675
What are we doing?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/25989-0
02:01:01.685 --> 02:01:02.615
Are we doing insert here?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26000-0
02:01:02.665 --> 02:01:06.495
No, you are reducing the size of
heap by one.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26009-0
02:01:06.665 --> 02:01:08.205
Yeah, this is nothing but
remove.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26020-0
02:01:09.315 --> 02:01:11.905
Remove algorithm these lines and
first line is building.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26072-0
02:01:12.755 --> 02:01:17.071
So what is the first lines
complexity we go up here and

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26072-1
02:01:17.071 --> 02:01:21.850
removal takes log in so totally
it takes this is yen and this

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26072-2
02:01:21.850 --> 02:01:26.628
full is a login so it is a total
of and log in after deleting

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26072-3
02:01:26.628 --> 02:01:29.325
where to put that removed
element.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26083-0
02:01:29.335 --> 02:01:31.825
How do we find out so that will
be the last position?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26094-0
02:01:31.915 --> 02:01:33.445
Yeah, that'll be the first time.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26108-0
02:01:33.455 --> 02:01:35.331
It will be the last position,
the second time it will be

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26108-1
02:01:35.331 --> 02:01:35.725
second last.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26116-0
02:01:35.895 --> 02:01:37.625
That was what I drew in this
diagram.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26125-0
02:01:37.635 --> 02:01:40.365
Yeah, this position then this
position, this position.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26128-0
02:01:40.955 --> 02:01:41.215
Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26131-0
02:01:41.225 --> 02:01:41.775
Something like that.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26137-0
02:01:44.075 --> 02:01:44.585
Pull again.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26148-0
02:01:44.595 --> 02:01:46.425
There are a lot of exercises for
you, right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26187-0
02:01:46.435 --> 02:01:49.310
A set of elements have been
given implement heapsort by

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26187-1
02:01:49.310 --> 02:01:52.595
showing each step and resultant
must be in the increasing order

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26187-2
02:01:52.595 --> 02:01:55.725
if it's increasing order, you
would have created a Max heap.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26207-0
02:01:56.135 --> 02:01:59.164
If decreasing order, you would
have created a min heap every

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26207-1
02:01:59.164 --> 02:02:00.455
step just like how we did.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26214-0
02:02:00.465 --> 02:02:02.135
We will use this numbers.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26230-0
02:02:02.425 --> 02:02:06.729
You will create a heap and after
creating you will again remove 1

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26230-1
02:02:06.729 --> 02:02:07.055
by 1.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26240-0
02:02:07.065 --> 02:02:09.835
All the root nodes and place
them in their position.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26247-0
02:02:09.845 --> 02:02:10.855
You will get a sorted output.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26252-0
02:02:12.975 --> 02:02:13.605
Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26271-0
02:02:13.775 --> 02:02:17.672
So log in that we already spoke
removal is removal from a heap

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26271-1
02:02:17.672 --> 02:02:20.145
is nothing but login complexity,
right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26274-0
02:02:21.875 --> 02:02:22.215
Yes, no.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26306-0
02:02:25.115 --> 02:02:28.511
Because it can bubble all the
way down till they leave and the

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26306-1
02:02:28.511 --> 02:02:31.799
height of a complete binary
trees log N so remove a list log

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26306-2
02:02:31.799 --> 02:02:32.715
north complexity.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26319-0
02:02:35.715 --> 02:02:38.185
Yeah, there are some other
questions as excises.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26333-0
02:02:38.195 --> 02:02:41.435
I want you to, you know, uh,
look into these.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26353-0
02:02:41.845 --> 02:02:44.887
But let me just quickly ask you
one question alone to check if

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26353-1
02:02:44.887 --> 02:02:46.335
you have understood something.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26360-0
02:02:47.855 --> 02:02:49.225
All of you focus just for a
minute.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26372-0
02:02:49.235 --> 02:02:50.385
Then I'll leave you free for the
day.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26376-0
02:02:51.135 --> 02:02:51.755
I have a Max.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26380-0
02:02:52.855 --> 02:02:53.045
Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26384-0
02:02:53.055 --> 02:02:53.475
What do we have?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26389-0
02:02:54.685 --> 02:02:56.645
I have a Max heap with me.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26413-0
02:03:00.565 --> 02:03:03.385
Is there is no numbers at all,
but I know this is the maximum.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26420-0
02:03:03.395 --> 02:03:04.465
I'm telling you, this is a maxi.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26431-0
02:03:05.795 --> 02:03:11.795
I want to know where the second
largest element is.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26437-0
02:03:13.375 --> 02:03:14.665
What is the complexity of it?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26441-0
02:03:17.855 --> 02:03:18.115
Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26446-0
02:03:18.125 --> 02:03:19.205
What is your thought process?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26455-0
02:03:19.595 --> 02:03:21.055
Who is residing in this
position?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26458-0
02:03:22.295 --> 02:03:22.805
Who's there?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26472-0
02:03:22.815 --> 02:03:27.645
Here is very important guys who
is there in that position.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26490-0
02:03:27.755 --> 02:03:31.160
Forget about this example, I'm
just talking about a general

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26490-1
02:03:31.160 --> 02:03:32.635
concept in this root node.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26503-0
02:03:32.645 --> 02:03:36.815
If it is a Max heap who is
present, the largest element?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26505-0
02:03:37.085 --> 02:03:37.735
Very good.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26518-0
02:03:37.885 --> 02:03:41.445
Yeah, nine out of 10 students
will make KRISHNA's mistake.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26545-0
02:03:41.455 --> 02:03:44.934
Don't make that the second
largest element can either be

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26545-1
02:03:44.934 --> 02:03:48.597
here or here, because there is
no relation between left and

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26545-2
02:03:48.597 --> 02:03:49.695
right child right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26551-0
02:03:49.705 --> 02:03:52.335
For example 1098.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26561-0
02:03:52.445 --> 02:03:55.545
This is also a Max heap 1089.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26584-0
02:03:55.555 --> 02:03:58.844
This is also a Max heap, so you
cannot comment about is the

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26584-1
02:03:58.844 --> 02:04:01.145
second largest is there in left
or right.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26599-0
02:04:01.155 --> 02:04:04.897
You cannot do that, but
definitely you can tell that

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26599-1
02:04:04.897 --> 02:04:07.155
second largest element, he said.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26606-0
02:04:07.165 --> 02:04:09.935
This level one and you do that?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26608-0
02:04:11.595 --> 02:04:11.925
Yes.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26612-0
02:04:11.935 --> 02:04:12.165
No.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26627-0
02:04:12.175 --> 02:04:16.815
Maybe now I'm asking you where
is the 4th largest element in

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26627-1
02:04:16.815 --> 02:04:17.575
this tree?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26639-0
02:04:18.605 --> 02:04:20.535
Can you tell me where that 4th
largest will be?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26650-0
02:04:21.765 --> 02:04:25.591
Definitely among these three,
the first, second, third are

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26650-1
02:04:25.591 --> 02:04:25.915
gone.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26663-0
02:04:26.285 --> 02:04:29.420
So the 4th largest element
should be somewhere in this

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26663-1
02:04:29.420 --> 02:04:30.275
level, correct?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26690-0
02:04:30.285 --> 02:04:33.933
I definitely know he will be
either here or here or here or

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26690-1
02:04:33.933 --> 02:04:36.365
here, but he will be here only
thought.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26705-0
02:04:36.375 --> 02:04:40.438
Can I not go directly to that
positions in my array and check

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26705-1
02:04:40.438 --> 02:04:40.765
them?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26716-0
02:04:42.575 --> 02:04:44.065
And does it give me a better
complexity?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26722-0
02:04:44.965 --> 02:04:46.895
It is actually constant
complexity.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26741-0
02:04:47.065 --> 02:04:50.011
I'll just go look at these two
elements if I want the second or

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26741-1
02:04:50.011 --> 02:04:50.655
third largest.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26755-0
02:04:50.925 --> 02:04:54.050
If I want the 4th largest, I
will just look at these four

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26755-1
02:04:54.050 --> 02:04:54.965
positions, right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26787-0
02:04:55.225 --> 02:04:58.547
But if it was not a heap, if it
was not normal array or

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26787-1
02:04:58.547 --> 02:05:01.810
something, I should do a
complete traversal which is a

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26787-2
02:05:01.810 --> 02:05:03.115
big of yen complexity.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26791-0
02:05:04.725 --> 02:05:04.995
Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26799-0
02:05:05.005 --> 02:05:06.905
Now, do you all understand the
power of heap?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26826-0
02:05:09.285 --> 02:05:11.974
In other words, this question
asks you to find the K the

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26826-1
02:05:11.974 --> 02:05:12.775
smallest element.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26853-0
02:05:13.745 --> 02:05:17.592
If it is a KTH smallest, what
you will do is you will remove K

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26853-1
02:05:17.592 --> 02:05:21.500
-, 1 number of times, and then
the KTH smallest will become the

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26853-2
02:05:21.500 --> 02:05:21.805
root.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26861-0
02:05:23.965 --> 02:05:25.115
Did you understand what I just
said?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26892-0
02:05:26.925 --> 02:05:30.615
If I want the KTH smallest or
Keith the largest, I will

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26892-1
02:05:30.615 --> 02:05:33.975
perform deletion, K -, 1 number
of times randomly.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26909-0
02:05:34.835 --> 02:05:38.283
Then that Keith smallest would
have become the root, and that

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26909-1
02:05:38.283 --> 02:05:39.395
is my answer, right?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26920-0
02:05:40.325 --> 02:05:42.815
So heap is much more than what
you think.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26927-0
02:05:42.825 --> 02:05:44.415
It's a very, very powerful
concept.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26949-0
02:05:44.425 --> 02:05:47.364
I just touched the basics for
you, but ponder about these

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26949-1
02:05:47.364 --> 02:05:49.695
aspects and you will enjoy
learning about it.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26952-0
02:05:50.305 --> 02:05:50.595
Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26961-0
02:05:50.605 --> 02:05:52.095
So that's pretty much for today.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26988-0
02:05:52.285 --> 02:05:55.584
We will get started with one of
the other applications of heaps

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26988-1
02:05:55.584 --> 02:05:58.728
which is called priority queues
and also about graphs in the

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26988-2
02:05:58.728 --> 02:05:59.295
next class.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/26995-0
02:06:00.765 --> 02:06:01.995
God, that's pretty much for
today.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/27003-0
02:06:02.005 --> 02:06:02.775
Thank you so much.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/27017-0
02:06:03.105 --> 02:06:07.060
And see you again the next
Saturday, which is, uh 30th, I

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/27017-1
02:06:07.060 --> 02:06:07.605
believe.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/27035-0
02:06:07.615 --> 02:06:10.936
Yeah, I'm not sure how many of
you will turn up, but you there?

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/27035-1
02:06:10.936 --> 02:06:11.195
Yeah.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/27041-0
02:06:12.105 --> 02:06:12.695
Thank you so much.

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/27057-0
02:06:14.465 --> 02:06:16.658
I'll stop the recording and I'll
stay for a couple of more

41c0dc01-97b6-433e-a1dc-1a50a4734f0c/27057-1
02:06:16.658 --> 02:06:16.955
minutes.