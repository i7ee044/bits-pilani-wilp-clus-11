WEBVTT

c665b3ae-097f-4446-a5df-1f0f9956fc9a/83-0
00:00:03.718 --> 00:00:06.668
Maybe like 100 questions, you
get panicked and so on.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/102-0
00:00:06.678 --> 00:00:10.912
So it's better to directly go
take the quiz than knowing all

c665b3ae-097f-4446-a5df-1f0f9956fc9a/102-1
00:00:10.912 --> 00:00:13.688
these, you know, meta data about
exams.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/111-0
00:00:21.858 --> 00:00:23.438
Let me just quickly share my
screen.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/127-0
00:00:35.668 --> 00:00:38.028
So the morning session you had
ideas class today, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/133-0
00:00:39.728 --> 00:00:41.488
There's no confusions on that.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/137-0
00:00:51.558 --> 00:00:52.078
OK, OK.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/154-0
00:01:44.788 --> 00:01:45.078
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/180-0
00:01:45.088 --> 00:01:49.835
Is it now clear the audio and so
there was, you know, Charan had

c665b3ae-097f-4446-a5df-1f0f9956fc9a/180-1
00:01:49.835 --> 00:01:53.048
told this that in a lot of noise
and so on?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/184-0
00:01:56.708 --> 00:01:57.228
OK. OK.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/188-0
00:01:58.008 --> 00:01:58.378
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/200-0
00:01:58.388 --> 00:02:01.871
So this teams upgrade has, you
know, changed all settings to

c665b3ae-097f-4446-a5df-1f0f9956fc9a/200-1
00:02:01.871 --> 00:02:02.328
default.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/202-0
00:02:02.948 --> 00:02:03.258
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/213-0
00:02:03.268 --> 00:02:05.118
So I had to just go and check,
you know.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/223-0
00:02:07.608 --> 00:02:08.628
Do we get an answer for this?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/225-0
00:02:08.638 --> 00:02:08.788
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/233-0
00:02:08.798 --> 00:02:09.938
I just answered it right, Kumar.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/241-0
00:02:09.948 --> 00:02:11.418
Yeah, it is in abstract.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/248-0
00:02:11.428 --> 00:02:13.418
I know when Italy as well.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/259-0
00:02:16.818 --> 00:02:18.868
So actually we are on
assignment.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/290-0
00:02:18.878 --> 00:02:23.380
We got to use that binary tree
editing, so we were just

c665b3ae-097f-4446-a5df-1f0f9956fc9a/290-1
00:02:23.380 --> 00:02:28.204
thinking that it will be more if
we use BST it will be more

c665b3ae-097f-4446-a5df-1f0f9956fc9a/290-2
00:02:28.204 --> 00:02:29.008
efficient.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/297-0
00:02:29.078 --> 00:02:30.158
That's why we are asking.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/323-0
00:02:30.718 --> 00:02:34.248
Yeah, this question, huh?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/310-0
00:02:31.428 --> 00:02:33.418
OK, OK, now I get the point.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/340-0
00:02:33.428 --> 00:02:37.066
But but I would suggest if it is
given in the question just to

c665b3ae-097f-4446-a5df-1f0f9956fc9a/340-1
00:02:37.066 --> 00:02:39.838
use binary tree then go ahead
with binary tree.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/344-0
00:02:40.228 --> 00:02:41.798
But mention in the document.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/349-0
00:02:41.808 --> 00:02:42.058
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/384-0
00:02:42.068 --> 00:02:45.288
You'll be preparing a document
where you can mention that you

c665b3ae-097f-4446-a5df-1f0f9956fc9a/393-0
00:02:44.858 --> 00:02:47.144
And said that, you know,
obviously would be more

c665b3ae-097f-4446-a5df-1f0f9956fc9a/384-1
00:02:45.288 --> 00:02:47.158
know a BST would be more
efficient.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/393-1
00:02:47.144 --> 00:02:48.078
efficient and so on.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/386-0
00:02:47.168 --> 00:02:47.508
And so on.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/401-0
00:02:49.198 --> 00:02:50.098
Yeah, that would be better.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/404-0
00:02:49.778 --> 00:02:50.658
Yeah, that would be better.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/412-0
00:02:52.118 --> 00:02:53.108
Someone is not muted.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/411-0
00:02:52.448 --> 00:02:52.748
OK.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/413-0
00:02:52.728 --> 00:02:53.638
Someone is not muted.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/425-0
00:02:55.298 --> 00:02:56.168
No, Sir.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/430-0
00:02:55.918 --> 00:02:56.708
No, Sir.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/468-0
00:02:56.178 --> 00:02:59.768
Since morning, we were facing
such kind of issue that echoing

c665b3ae-097f-4446-a5df-1f0f9956fc9a/472-0
00:02:56.718 --> 00:03:00.308
Since morning, we are facing
such kind of issue that he going

c665b3ae-097f-4446-a5df-1f0f9956fc9a/468-1
00:02:59.768 --> 00:03:00.868
in all the classes.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/472-1
00:03:00.308 --> 00:03:01.408
in all the classes.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/479-0
00:03:00.878 --> 00:03:01.598
Most of the classes.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/499-0
00:03:01.418 --> 00:03:04.638
Most of the classes OK and for
all of you.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/477-0
00:03:02.918 --> 00:03:03.288
OK.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/508-0
00:03:03.298 --> 00:03:07.428
And for all of you, when did
this get upgraded MS Teams?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/510-0
00:03:04.648 --> 00:03:07.878
When did this get upgraded MS
Teams?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/514-0
00:03:09.318 --> 00:03:09.738
Showed.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/516-0
00:03:09.818 --> 00:03:10.208
Showed.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/539-0
00:03:13.508 --> 00:03:15.088
Yeah, I think I mean that's the
problem.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/663-0
00:03:13.678 --> 00:03:13.948
Uh.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/545-0
00:03:13.998 --> 00:03:15.528
Yeah, I think I mean that's the
problem.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/548-0
00:03:15.098 --> 00:03:16.108
The upgrade is the problem.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/549-0
00:03:15.538 --> 00:03:16.578
The upgrade is the problem.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/569-0
00:03:20.758 --> 00:03:22.218
So last class we didn't have
this right.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/570-0
00:03:21.248 --> 00:03:22.718
For last class we didn't have
this right.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/587-0
00:03:25.708 --> 00:03:29.324
Uh PARTHASARATHY, it has been
upgraded yesterday, so last

c665b3ae-097f-4446-a5df-1f0f9956fc9a/587-1
00:03:29.324 --> 00:03:31.008
class there was no problem.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/589-0
00:03:31.928 --> 00:03:32.188
Correct.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/592-0
00:03:33.788 --> 00:03:35.648
OK, fine.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/603-0
00:03:35.658 --> 00:03:37.668
I mean, let's see you know how
this goes.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/614-0
00:03:37.678 --> 00:03:40.548
But yeah, these have to be
planned and done.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/633-0
00:03:40.558 --> 00:03:44.517
There are like 20,000 people,
you know, in bits will be itself

c665b3ae-097f-4446-a5df-1f0f9956fc9a/633-1
00:03:44.517 --> 00:03:45.208
using this.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/648-0
00:03:45.618 --> 00:03:48.705
I'm not sure how this sudden
upgrades are happening without

c665b3ae-097f-4446-a5df-1f0f9956fc9a/648-1
00:03:48.705 --> 00:03:49.168
you know.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/675-0
00:03:50.948 --> 00:03:54.078
Anyway, I will have a, you know,
talk to the team when in need,

c665b3ae-097f-4446-a5df-1f0f9956fc9a/675-1
00:03:54.078 --> 00:03:55.448
but yeah, only when in need.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/681-0
00:03:55.458 --> 00:03:56.698
You can just unmute yourself.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/694-0
00:03:56.708 --> 00:03:59.698
Otherwise it should be fine, but
for now it's fine, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/711-0
00:03:59.708 --> 00:04:02.758
You are able to hear me because
that's the first thing.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/716-0
00:04:03.178 --> 00:04:03.798
Yes, yes.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/717-0
00:04:04.018 --> 00:04:04.188
Sure.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/718-0
00:04:04.538 --> 00:04:04.868
Cool.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/722-0
00:04:04.878 --> 00:04:06.808
Yeah, cool.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/726-0
00:04:04.888 --> 00:04:05.708
Yes. Yep.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/731-0
00:04:06.818 --> 00:04:08.128
I think then let's get started.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/740-0
00:04:08.138 --> 00:04:10.488
And of course, sorry for the you
know, uh, swapping.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/754-0
00:04:10.498 --> 00:04:13.088
So I had to travel for some, you
know, events.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/758-0
00:04:13.498 --> 00:04:15.218
And I was just back and.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/761-0
00:04:17.138 --> 00:04:17.448
Cool.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/767-0
00:04:17.458 --> 00:04:18.628
So let's get started.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/799-0
00:04:18.638 --> 00:04:22.153
So welcome to the 8th contact
session for data structures and

c665b3ae-097f-4446-a5df-1f0f9956fc9a/799-1
00:04:22.153 --> 00:04:25.838
algorithm design and what we'll
be doing is we will complete BST

c665b3ae-097f-4446-a5df-1f0f9956fc9a/799-2
00:04:25.838 --> 00:04:26.348
deletion.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/807-0
00:04:26.358 --> 00:04:27.608
Yeah, we have not looked at
that.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/823-0
00:04:27.838 --> 00:04:30.734
We'll complete that and then we
will start a new topic called

c665b3ae-097f-4446-a5df-1f0f9956fc9a/823-1
00:04:30.734 --> 00:04:31.108
hashing.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/829-0
00:04:31.118 --> 00:04:32.708
And, you know, collisions and so
on.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/863-0
00:04:33.298 --> 00:04:36.630
So what we will do is we'll have
a recap, but today's recap,

c665b3ae-097f-4446-a5df-1f0f9956fc9a/863-1
00:04:36.630 --> 00:04:40.018
we'll do it differently because
today's the last class before

c665b3ae-097f-4446-a5df-1f0f9956fc9a/863-2
00:04:40.018 --> 00:04:40.728
exams, right.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/888-0
00:04:40.918 --> 00:04:44.902
So firstly, we will go ahead and
cover the topics and before the

c665b3ae-097f-4446-a5df-1f0f9956fc9a/888-1
00:04:44.902 --> 00:04:48.518
last more thing, we will take a
recap of the whole course.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/891-0
00:04:48.848 --> 00:04:49.158
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/897-0
00:04:49.168 --> 00:04:51.578
Not just, uh, the last class.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/903-0
00:04:51.928 --> 00:04:53.358
So we'll complete BST deletion.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/913-0
00:04:53.408 --> 00:04:55.058
We will have a look at what is
hashing.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/919-0
00:04:55.068 --> 00:04:56.028
How do you resolve it?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/936-0
00:04:56.038 --> 00:04:57.938
What is, you know, collision and
all those.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/966-0
00:04:58.268 --> 00:05:01.972
So over here, we will take a
complete journey so far, like a

c665b3ae-097f-4446-a5df-1f0f9956fc9a/966-1
00:05:01.972 --> 00:05:05.677
revision of what we have done so
far and we will also have a

c665b3ae-097f-4446-a5df-1f0f9956fc9a/966-2
00:05:05.677 --> 00:05:08.228
discussion about our mid some
exam right.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/996-0
00:05:08.578 --> 00:05:11.974
And there are a couple of
techniques which are a part of

c665b3ae-097f-4446-a5df-1f0f9956fc9a/996-1
00:05:11.974 --> 00:05:15.787
this module, but only few would
be covered today and only those

c665b3ae-097f-4446-a5df-1f0f9956fc9a/996-2
00:05:15.787 --> 00:05:17.158
will be for your exams.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/998-0
00:05:17.508 --> 00:05:17.778
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1022-0
00:05:17.788 --> 00:05:21.256
So these things we will not have
it covered today, we'll do it

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1022-1
00:05:21.256 --> 00:05:23.238
after mid SIM and for exam as
well.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1026-0
00:05:23.248 --> 00:05:25.178
These would not be there, yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1051-0
00:05:26.828 --> 00:05:29.633
So there's a question, Sir, one
out regarding as invent design

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1051-1
00:05:29.633 --> 00:05:32.038
document and technical report
are the same way to do.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1059-0
00:05:32.448 --> 00:05:33.608
Yeah, there's just one report.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1071-0
00:05:33.618 --> 00:05:35.644
They'll have that you have to
submit and that should have

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1071-1
00:05:35.644 --> 00:05:36.028
everything.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1073-0
00:05:36.738 --> 00:05:37.048
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1091-0
00:05:37.058 --> 00:05:39.674
So there are also details on
what all can go in in your

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1091-1
00:05:39.674 --> 00:05:40.328
report, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1112-0
00:05:40.798 --> 00:05:44.202
You'll put pseudo codes, the
analysis of it, the complexity,

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1112-1
00:05:44.202 --> 00:05:46.825
alternate techniques,
everything, but just one

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1112-2
00:05:46.825 --> 00:05:47.328
document.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1129-0
00:05:47.338 --> 00:05:50.538
It could be both design
technical you know details and

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1129-1
00:05:50.538 --> 00:05:52.168
you know algorithm analysis.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1136-0
00:05:52.258 --> 00:05:54.068
Everything can go into that one
single report.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1153-0
00:05:54.908 --> 00:05:58.145
Yeah, PDF report and then a
contribution excel sheet and

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1153-1
00:05:58.145 --> 00:05:59.678
your actual Python program.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1165-0
00:06:00.128 --> 00:06:02.417
Yeah, no need of, you know,
separate, separate, different

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1165-1
00:06:02.417 --> 00:06:03.088
different things.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1173-0
00:06:04.128 --> 00:06:06.218
So you can follow that cool.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1178-0
00:06:06.228 --> 00:06:07.058
So let's get started.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1186-0
00:06:07.068 --> 00:06:07.858
So what did we do?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1194-0
00:06:07.868 --> 00:06:10.988
Last class I remember most of
you were attending so.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1204-0
00:06:13.158 --> 00:06:15.068
BST was not the concept that we
started.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1210-0
00:06:15.078 --> 00:06:16.098
We were doing something else.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1224-0
00:06:17.128 --> 00:06:18.028
So what really was that?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1225-0
00:06:17.608 --> 00:06:18.548
So what was that?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1232-0
00:06:19.438 --> 00:06:21.468
It was BV FSN DFS.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1236-0
00:06:21.478 --> 00:06:22.988
Then we started with PST.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1240-0
00:06:24.688 --> 00:06:25.618
OK, perfect.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1298-0
00:06:25.888 --> 00:06:29.359
So what we actually did was we
completed our whole graph

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1298-1
00:06:29.359 --> 00:06:33.136
concept of you know traversals
and you know how do you do and

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1298-2
00:06:33.136 --> 00:06:37.155
DFS was very you know aggressive
in nature it used you know stack

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1298-3
00:06:37.155 --> 00:06:40.992
whereas BFS was you know more
cautious it used a queue and all

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1298-4
00:06:40.992 --> 00:06:41.358
those.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1333-0
00:06:41.728 --> 00:06:45.926
So after completing all those
aspects, we then went ahead with

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1333-1
00:06:45.926 --> 00:06:50.125
another data structure which was
BFS, BFS or I mean breath BST

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1333-2
00:06:50.125 --> 00:06:52.658
and BHAT was nothing but your
breath.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1367-0
00:06:52.708 --> 00:06:56.633
You know search tree, binary
search tree and it was a very

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1367-1
00:06:56.633 --> 00:07:00.825
promising data structure which
was promising login complexity,

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1367-2
00:07:00.825 --> 00:07:04.218
but finally there was some case
which betrayed us.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1376-0
00:07:04.288 --> 00:07:05.718
Yeah, you also remember that
case.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1403-0
00:07:06.868 --> 00:07:10.437
Anything which is less than the,
you know, no data that will go

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1403-1
00:07:10.437 --> 00:07:13.058
to the left greater than will go
to the right.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1402-0
00:07:12.738 --> 00:07:13.168
Greater.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1419-0
00:07:14.918 --> 00:07:17.538
Yeah, but there was a case
because of which, uh.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1420-0
00:07:16.128 --> 00:07:17.278
Yeah, it wasn't.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1422-0
00:07:17.288 --> 00:07:18.708
It was cute.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1432-0
00:07:18.968 --> 00:07:19.508
Cute data.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1433-0
00:07:20.128 --> 00:07:20.728
Your data.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1434-0
00:07:20.438 --> 00:07:20.648
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1437-0
00:07:20.828 --> 00:07:21.228
Scared.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1438-0
00:07:22.258 --> 00:07:22.908
Yeah. Perfect.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1440-0
00:07:22.918 --> 00:07:23.128
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1455-0
00:07:23.138 --> 00:07:25.587
So for small replays you can
actually, you know, post in the

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1455-1
00:07:25.587 --> 00:07:25.788
chat.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1469-0
00:07:25.798 --> 00:07:28.328
So I love to see the chat for
you know these.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1518-0
00:07:28.338 --> 00:07:30.998
You know, when I ask, you know,
small questions like this, but

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1518-1
00:07:30.998 --> 00:07:33.405
when you have a doubt, if you
are not able to, you know,

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1518-2
00:07:33.405 --> 00:07:36.065
convey that better in the chat
at that time, of course you can

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1518-3
00:07:36.065 --> 00:07:38.768
unmute and, you know, explain me
the question, yeah, that would

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1518-4
00:07:38.768 --> 00:07:39.148
be great.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1522-0
00:07:39.498 --> 00:07:40.358
So yeah, stupidness.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1526-0
00:07:40.368 --> 00:07:40.648
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1537-0
00:07:40.658 --> 00:07:43.958
So skew nudeness causes a lot of
problems in computing, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1548-0
00:07:43.968 --> 00:07:46.688
So that brings the complexity
back to.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1564-0
00:07:46.698 --> 00:07:49.548
You know, we go off N so that
was a problem that it suffered.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1593-0
00:07:49.838 --> 00:07:52.356
So we will also have a look at,
you know in the later part of

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1593-1
00:07:52.356 --> 00:07:54.955
your semester, how do we resolve
that and you know, things like

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1593-2
00:07:54.955 --> 00:07:55.158
that.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1623-0
00:07:56.258 --> 00:07:59.752
But in particular, in BST we
learned about what is it and how

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1623-1
00:07:59.752 --> 00:08:03.078
to, you know, create one like
the installation part of it.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1635-0
00:08:03.638 --> 00:08:06.098
We also learned how to find
something in a BST.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1645-0
00:08:06.428 --> 00:08:09.618
So what type of technique we
use?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1670-0
00:08:09.628 --> 00:08:12.694
If it is not skewed, if it is a
normal BST, then there was a

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1670-1
00:08:12.694 --> 00:08:15.458
concept of computer science that
we used there, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1673-0
00:08:15.498 --> 00:08:16.228
We remember that term.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1676-0
00:08:18.238 --> 00:08:18.728
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1685-0
00:08:18.798 --> 00:08:20.228
So you start from the root.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1723-0
00:08:20.458 --> 00:08:22.971
If the number that you are, you
know trying to find is less than

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1723-1
00:08:22.971 --> 00:08:25.329
that, you go to the left side
and then if it is greater, you

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1723-2
00:08:25.329 --> 00:08:26.528
go to the right side and so on.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1731-0
00:08:26.898 --> 00:08:29.018
By doing that process, what are
we actually doing?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1736-0
00:08:30.098 --> 00:08:31.088
Yeah, I had mentioned that.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1741-0
00:08:33.718 --> 00:08:34.058
Anyone.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1753-0
00:08:36.338 --> 00:08:39.378
So when you're performing some
operations. Yeah, exactly.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1758-0
00:08:39.388 --> 00:08:40.008
Yeah, very good.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1764-0
00:08:40.018 --> 00:08:41.108
It's pruning right.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1803-0
00:08:41.258 --> 00:08:44.553
You are trying to somehow, you
know, prune one part of the tree

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1803-1
00:08:44.553 --> 00:08:47.899
and you are ignoring it because
you are very well sure that if a

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1803-2
00:08:47.899 --> 00:08:50.268
number is less it should be on
the left side.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1810-0
00:08:50.278 --> 00:08:52.118
It cannot be in the right side,
right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1830-0
00:08:52.128 --> 00:08:55.654
So we did pruning of some
branches and that in turn

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1830-1
00:08:55.654 --> 00:08:58.028
promised a good complexity,
right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1849-0
00:08:58.198 --> 00:09:01.408
But in general BST was still big
O of N because of that skewed.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1867-0
00:09:01.418 --> 00:09:06.495
You know use case and where was
the minimum in a BST, the

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1867-1
00:09:06.495 --> 00:09:08.508
minimum in a whole BST.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1870-0
00:09:08.518 --> 00:09:09.108
Where would that be?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1893-0
00:09:11.128 --> 00:09:14.876
So it will be a node on the left
side which doesn't have a left

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1893-1
00:09:14.876 --> 00:09:15.228
child.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1895-0
00:09:15.318 --> 00:09:15.708
Correct.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1920-0
00:09:16.078 --> 00:09:19.920
The left most one in the tree
would be the one which will have

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1920-1
00:09:19.920 --> 00:09:22.908
the minimum value and who will
have the maximum.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1930-0
00:09:23.198 --> 00:09:25.498
He'll be the right most one
without a right child.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1932-0
00:09:26.658 --> 00:09:26.818
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1934-0
00:09:28.178 --> 00:09:28.608
Perfect.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1952-0
00:09:28.618 --> 00:09:31.137
So these all things we learned,
we learned about insertions and

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1952-1
00:09:31.137 --> 00:09:31.688
for deletions.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1973-0
00:09:31.698 --> 00:09:34.058
I had told that there are three
different cases and that is what

c665b3ae-097f-4446-a5df-1f0f9956fc9a/1973-1
00:09:34.058 --> 00:09:35.148
we are going to look at today.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2009-0
00:09:36.228 --> 00:09:39.157
So firstly in a delete when we
want to delete something in a

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2009-1
00:09:39.157 --> 00:09:42.279
BST, there is this first aspect
of firstly it should be there in

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2009-2
00:09:42.279 --> 00:09:43.048
the tree, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2031-0
00:09:43.058 --> 00:09:46.039
There could also be a key that I
gave that is not even there, so

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2031-1
00:09:46.039 --> 00:09:47.278
I'll have to search for it.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2043-0
00:09:47.568 --> 00:09:50.518
I'll do the normal way of, you
know, searching where I go.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2054-0
00:09:50.528 --> 00:09:52.358
Left or right based on the node
value.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2077-0
00:09:52.808 --> 00:09:55.810
If that key is present, I'll
perform the deletion, otherwise

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2077-1
00:09:55.810 --> 00:09:58.518
I would just return a message
that it is not possible.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2093-0
00:09:59.108 --> 00:10:02.212
If it is present and if I want
to delete them, there are three

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2093-1
00:10:02.212 --> 00:10:02.508
cases.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2119-0
00:10:02.578 --> 00:10:06.746
Yes, the note that I want to
delete maybe a leaf node or it

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2119-1
00:10:06.746 --> 00:10:10.358
could have one child or it could
have two children.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2139-0
00:10:10.828 --> 00:10:13.465
Yeah, this one child could be in
either left side or right side

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2139-1
00:10:13.465 --> 00:10:13.918
no problem.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2154-0
00:10:14.088 --> 00:10:16.978
And these two children anyway,
it will be in both the sides.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2161-0
00:10:17.158 --> 00:10:18.798
So we'll look at each of these
cases.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2173-0
00:10:18.878 --> 00:10:23.248
Yeah, case one is the node that
we want to delete.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2181-0
00:10:23.318 --> 00:10:26.008
So we usually call it a zit.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2185-0
00:10:26.098 --> 00:10:26.348
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2213-0
00:10:26.358 --> 00:10:29.446
Zed is the you know, the notion
of that node that we want to

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2213-1
00:10:29.446 --> 00:10:32.535
delete node Z to be deleted has
no children, meaning it is a

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2213-2
00:10:32.535 --> 00:10:32.788
leaf.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2219-0
00:10:33.178 --> 00:10:34.308
Then what is the procedure?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2236-0
00:10:34.698 --> 00:10:39.457
Just remove the node, modify Z
parent to replace the node with

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2236-1
00:10:39.457 --> 00:10:40.288
null right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2245-0
00:10:40.298 --> 00:10:41.878
So for example, is this a BST?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2255-0
00:10:44.038 --> 00:10:45.428
Firstly, it is a binary tree.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2258-0
00:10:45.638 --> 00:10:46.168
Very good.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2297-0
00:10:46.558 --> 00:10:51.049
And then 529710, all of them are
smaller than 1215201713 or

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2297-1
00:10:51.049 --> 00:10:55.539
greater than 12, and for every
you know node two is smaller

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2297-2
00:10:55.539 --> 00:10:56.288
than five.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2310-0
00:10:56.338 --> 00:10:57.648
These are greater than five and
so on.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2315-0
00:10:57.718 --> 00:10:59.568
So there's a BST, yes.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2335-0
00:10:59.918 --> 00:11:03.070
So now the number that I want to
delete or the element that I

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2335-1
00:11:03.070 --> 00:11:04.138
want to delete is 17.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2364-0
00:11:04.968 --> 00:11:07.801
So firstly, I'll do a search
right 17 is greater than 12 so I

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2364-1
00:11:07.801 --> 00:11:09.858
go to the right side, 17 is
greater than 15.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2384-0
00:11:09.868 --> 00:11:14.112
I go to the right 17 is less
than 20, so I come to the left

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2384-1
00:11:14.112 --> 00:11:15.598
and 17 is found here.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2399-0
00:11:15.988 --> 00:11:19.338
So since 17 is found, we will be
able to delete it, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2421-0
00:11:19.348 --> 00:11:22.261
We want to delete it and we see
that this is in case one because

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2421-1
00:11:22.261 --> 00:11:23.158
this is a leaf node.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2434-0
00:11:23.708 --> 00:11:26.278
So all that I have to do is just
knock him off, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2450-0
00:11:26.568 --> 00:11:30.058
I can just knock him and here
the left of 20 will become null.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2460-0
00:11:32.448 --> 00:11:34.458
Firstly, I have another
important question for you.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2471-0
00:11:35.608 --> 00:11:39.578
What representation would you
use to represent this BST?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2475-0
00:11:41.618 --> 00:11:41.888
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2482-0
00:11:41.898 --> 00:11:42.408
Think about it.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2487-0
00:11:44.138 --> 00:11:45.508
They've spoken about all this.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2493-0
00:11:45.568 --> 00:11:47.378
Yeah, summer.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2507-0
00:11:47.388 --> 00:11:49.938
Is it right we will use linked
list and not an array?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2518-0
00:11:50.288 --> 00:11:52.238
Yeah, this is not a complete
binary tree.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2543-0
00:11:52.488 --> 00:11:55.376
If you use an array, you will
waste a lot of space here

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2543-1
00:11:55.376 --> 00:11:57.698
because left and right side of
two are null.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2552-0
00:11:57.868 --> 00:11:59.178
You'll have a lot of nulls.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2567-0
00:11:59.188 --> 00:12:02.458
So 15 doesn't have the whole
left subtree at all.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2570-0
00:12:02.788 --> 00:12:04.418
So array is not a good way.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2578-0
00:12:04.478 --> 00:12:06.918
You will be using linked list.
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2608-0
00:12:06.988 --> 00:12:09.851
So in the linked list, the left
side of 20 initially it was

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2608-1
00:12:09.851 --> 00:12:11.998
pointing to 17, but now it will
become null.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2616-0
00:12:12.648 --> 00:12:14.158
So case one is very simple.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2620-0
00:12:14.208 --> 00:12:15.178
Just knock that leaf.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2622-0
00:12:15.188 --> 00:12:15.528
That's it.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2637-0
00:12:17.448 --> 00:12:20.298
So seven, we want to delete
seven from this BST.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2647-0
00:12:20.578 --> 00:12:22.658
Seven is smaller than 20, so you
go to left.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2661-0
00:12:22.918 --> 00:12:25.158
Seven is smaller than this 10,
so you go to left.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2670-0
00:12:25.468 --> 00:12:27.758
Seven is greater than six, so
you go to right.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2697-0
00:12:28.328 --> 00:12:31.293
Seven is smaller than eight, so
you go to left and you found an

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2697-1
00:12:31.293 --> 00:12:34.073
element which is exactly equal
to the node that you want to

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2697-2
00:12:34.073 --> 00:12:34.398
delete.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2724-0
00:12:34.908 --> 00:12:38.285
So what you will plan to do is
you'll just knock this off and

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2724-1
00:12:38.285 --> 00:12:40.628
the resultant will be something
like this.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2740-0
00:12:42.078 --> 00:12:43.608
Yeah, his deletion clear for all
of you.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2756-0
00:12:43.618 --> 00:12:47.123
Case one, if the node that you
are planning to delete, if that

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2756-1
00:12:47.123 --> 00:12:47.958
is a leaf node.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2764-0
00:12:48.388 --> 00:12:49.438
Yeah, just delete that node.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2772-0
00:12:49.448 --> 00:12:50.818
There is no other problem at
all.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2786-0
00:12:51.288 --> 00:12:54.758
Yeah, try to also delete 35 from
the above 3.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2792-0
00:12:54.768 --> 00:12:55.498
That's also leaf.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2798-0
00:12:55.508 --> 00:12:56.498
You will go ahead and find it.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2803-0
00:12:56.508 --> 00:12:57.098
You will delete it.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2811-0
00:12:58.508 --> 00:12:59.478
Now let's go to case 2.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2846-0
00:13:00.728 --> 00:13:05.774
Case two is all about the node Z
to be deleted has one child, so

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2846-1
00:13:05.774 --> 00:13:10.665
remove the child so meaning that
zed whatever is there deleted

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2846-2
00:13:10.665 --> 00:13:13.538
but modify Z parent to .2 Z's
child.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2848-0
00:13:14.778 --> 00:13:15.088
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2862-0
00:13:15.098 --> 00:13:18.208
So I prefer to call this as
short circuiting.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2876-0
00:13:18.538 --> 00:13:21.333
Yeah, there, there is also some
literature that talks about this

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2876-1
00:13:21.333 --> 00:13:21.548
word.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2884-0
00:13:22.058 --> 00:13:23.748
So for example, let's delete 40.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2900-0
00:13:24.638 --> 00:13:26.698
So firstly I want to find if
what is there or not.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2922-0
00:13:26.758 --> 00:13:30.279
So 40 is greater than 20, so I
go to the right side and 40s

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2922-1
00:13:30.279 --> 00:13:32.098
found there's 40 have children.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2947-0
00:13:32.188 --> 00:13:36.939
Yes, it is not a leaf node, so
I'm not in case one, I'm in case

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2947-1
00:13:36.939 --> 00:13:39.908
2 because it has only one child,
right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2957-0
00:13:39.918 --> 00:13:41.598
So these are not it's direct
children.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2960-0
00:13:41.608 --> 00:13:42.618
These are grandchildren.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2991-0
00:13:42.948 --> 00:13:45.491
Yeah, we should only be
concerned about the immediate

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2991-1
00:13:45.491 --> 00:13:48.270
child, so it doesn't have a
right child, but it has a left

c665b3ae-097f-4446-a5df-1f0f9956fc9a/2991-2
00:13:48.270 --> 00:13:49.778
child, so only one child it has.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3001-0
00:13:49.988 --> 00:13:50.898
So we are in case two.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3022-0
00:13:51.868 --> 00:13:57.020
So this case 2 deletion is all
about deleting these two entries

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3022-1
00:13:57.020 --> 00:13:59.838
and making 20 as the parent of
30.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3026-0
00:14:00.888 --> 00:14:01.118
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3033-0
00:14:01.128 --> 00:14:04.268
What does this line telling
modify Z parent?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3058-0
00:14:04.778 --> 00:14:11.139
So in our case Z IS40Z parent is
20, modify him to .2 Z child

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3058-1
00:14:11.139 --> 00:14:13.088
which is 30, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3062-0
00:14:13.098 --> 00:14:13.258
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3065-0
00:14:13.268 --> 00:14:13.788
We will go there.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3072-0
00:14:13.798 --> 00:14:14.848
Yeah, that is the third case.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3074-0
00:14:14.918 --> 00:14:15.038
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3089-0
00:14:16.348 --> 00:14:18.578
So in this case I'm going to
delete both of these.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3102-0
00:14:18.828 --> 00:14:21.538
I'm going to directly draw an
edge from 20 to 30.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3116-0
00:14:23.208 --> 00:14:24.918
Yeah, is the case too clear for
all of you?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3139-0
00:14:25.348 --> 00:14:29.081
For example, I want to delete 15
here 15 is less than 20, I go to

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3139-1
00:14:29.081 --> 00:14:30.608
left 15 is greater than 10.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3142-0
00:14:30.618 --> 00:14:31.358
I come here.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3147-0
00:14:31.458 --> 00:14:32.428
I got 15 here.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3167-0
00:14:32.438 --> 00:14:36.024
It has one child, so all that
I'll have to do is I'll have to

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3167-1
00:14:36.024 --> 00:14:37.008
delete these two.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3177-0
00:14:37.368 --> 00:14:39.118
And who will become the right
child of 10?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3185-0
00:14:42.368 --> 00:14:44.878
Yeah, the right child of 10.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3194-0
00:14:45.088 --> 00:14:47.048
Yeah, that's right.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3201-0
00:14:47.058 --> 00:14:49.088
18 will become the right child
of 10.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3203-0
00:14:49.598 --> 00:14:50.108
Perfect.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3214-0
00:14:50.198 --> 00:14:51.468
So case 2, all of you are clear.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3241-0
00:14:51.478 --> 00:14:56.633
It is called as short circuiting
because we are just delete these

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3241-1
00:14:56.633 --> 00:15:01.085
and connect Z parent 2Z child
simple and deletion of two

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3241-2
00:15:01.085 --> 00:15:01.788
children.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3252-0
00:15:01.838 --> 00:15:03.628
Yeah, someone had asked in
between also.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3264-0
00:15:03.718 --> 00:15:06.508
So that's a very interesting one
and is also a tricky one.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3280-0
00:15:07.738 --> 00:15:10.627
Do you guys remember we learned
2 terminologies called successor

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3280-1
00:15:10.627 --> 00:15:11.338
and predecessor.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3282-0
00:15:12.528 --> 00:15:12.738
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3285-0
00:15:12.748 --> 00:15:13.198
Do you remember?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3294-0
00:15:15.848 --> 00:15:17.818
Who was the successor and
predecessor?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3296-0
00:15:17.948 --> 00:15:18.108
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3305-0
00:15:18.958 --> 00:15:20.568
So in this case I have BST.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3321-0
00:15:21.058 --> 00:15:26.738
What is the successor of the
node 20 so 20s here, right.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3323-0
00:15:26.808 --> 00:15:27.058
Right.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3328-0
00:15:27.068 --> 00:15:27.698
I mean the root.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3335-0
00:15:27.788 --> 00:15:29.558
So who is this successor?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3342-0
00:15:30.858 --> 00:15:31.828
Yeah, 25.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3346-0
00:15:32.018 --> 00:15:33.018
And what about for a 10?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3351-0
00:15:36.408 --> 00:15:37.118
That's right.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3355-0
00:15:37.208 --> 00:15:37.598
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3357-0
00:15:37.608 --> 00:15:38.738
So very good.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3391-0
00:15:38.748 --> 00:15:43.037
Yeah, I think you are revising
things, maybe, I don't know,

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3391-1
00:15:43.037 --> 00:15:46.896
because of assignments or for
exams, but successor is

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3391-2
00:15:46.896 --> 00:15:48.898
basically in the right side.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3404-0
00:15:48.958 --> 00:15:53.058
Who's the smallest right for
this whole right side of 20?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3415-0
00:15:53.288 --> 00:15:55.338
There is 40302535.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3425-0
00:15:55.348 --> 00:15:56.958
All of them are greater than 20.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3440-0
00:15:57.008 --> 00:16:00.278
We know it, but in that, who's
the smallest 25?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3448-0
00:16:00.648 --> 00:16:03.228
So 25 is the successor of 20.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3453-0
00:16:04.138 --> 00:16:05.268
Similarly for this ten.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3457-0
00:16:06.098 --> 00:16:06.258
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3474-0
00:16:07.028 --> 00:16:09.472
The only one that is in the
right side is 18, so he becomes

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3474-1
00:16:09.472 --> 00:16:10.368
the successor of time.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3478-0
00:16:11.168 --> 00:16:11.438
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3496-0
00:16:11.448 --> 00:16:14.302
So this concept we have already
learned in the last class, right

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3496-1
00:16:14.302 --> 00:16:16.058
and predecessor is something
different.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3513-0
00:16:16.508 --> 00:16:20.038
Yeah, predecessor should be in
the left side in the left side.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3521-0
00:16:20.048 --> 00:16:23.948
If you take the largest right,
yes, no.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3527-0
00:16:23.958 --> 00:16:25.378
Should we take the largest or
minimum?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3532-0
00:16:27.238 --> 00:16:27.658
Yes, no.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3543-0
00:16:28.748 --> 00:16:29.028
Meaning.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3549-0
00:16:29.278 --> 00:16:32.108
So in this case, what did we do
in the right side?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3562-0
00:16:32.178 --> 00:16:36.588
We took the minimum right in the
left subtree.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3573-0
00:16:36.598 --> 00:16:40.068
If you take the maximum then
that would be the predecessor.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3577-0
00:16:41.188 --> 00:16:41.498
Cool.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3586-0
00:16:42.148 --> 00:16:43.578
So this is the point why we
learned it.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3595-0
00:16:43.628 --> 00:16:45.438
Now we will see why that is very
important.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3626-0
00:16:45.528 --> 00:16:48.930
So when we do deletion in BST
and when we are in case 3,

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3626-1
00:16:48.930 --> 00:16:52.751
meaning you find the node that
has to be deleted and it has two

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3626-2
00:16:52.751 --> 00:16:53.288
children.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3653-0
00:16:54.178 --> 00:16:57.912
So if it has two children, then
for that node which you are

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3653-1
00:16:57.912 --> 00:17:01.148
planning to delete, you have to
find the successor.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3670-0
00:17:01.908 --> 00:17:04.879
Or you can also do the
predecessor, but we will not

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3670-1
00:17:04.879 --> 00:17:07.108
cover that, but it's exactly the
same.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3695-0
00:17:07.118 --> 00:17:09.973
Yeah, you can either replace
that with a predecessor or a

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3695-1
00:17:09.973 --> 00:17:12.238
successor, but I would prefer to
go this way.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3706-0
00:17:12.598 --> 00:17:15.768
Always find the successor and
replace them right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3716-0
00:17:15.778 --> 00:17:18.568
I mean in general terminology
also right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3728-0
00:17:18.578 --> 00:17:21.828
I mean, who is going to take
care of your legacy?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3741-0
00:17:23.058 --> 00:17:25.468
Is it your successor or or is it
your predecessor?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3759-0
00:17:26.788 --> 00:17:29.726
I mean, technically speaking,
you can always, you know, do it

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3759-1
00:17:29.726 --> 00:17:30.958
with the predecessor also.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3775-0
00:17:31.368 --> 00:17:36.348
But yeah, so always you can go
with the successor approach.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3780-0
00:17:36.358 --> 00:17:37.728
Predecessor will also work.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3784-0
00:17:37.738 --> 00:17:38.628
That is not wrong.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3796-0
00:17:38.738 --> 00:17:42.168
Yeah, you can, you know, find
the predecessor and replace him.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3849-0
00:17:42.178 --> 00:17:45.434
But I will always use the
successor technique, so you will

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3849-1
00:17:45.434 --> 00:17:49.021
find the successor of that node
which you are planning to delete

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3849-2
00:17:49.021 --> 00:17:52.608
which has two children and then
replace the element at that node

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3849-3
00:17:52.608 --> 00:17:55.588
to be deleted with the element
of the successor node.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3857-0
00:17:56.338 --> 00:17:57.818
The moment you do this, what
would happen?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3871-0
00:17:57.828 --> 00:18:01.825
There will be a duplicate right
so that duplicate has to be

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3871-1
00:18:01.825 --> 00:18:02.358
removed.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3883-0
00:18:03.158 --> 00:18:05.778
Apply removed to the right
subtree to remove the duplicate.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3902-0
00:18:05.948 --> 00:18:09.114
So this duplicate again can
either fall into case 3, case

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3902-1
00:18:09.114 --> 00:18:09.988
two or case one.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3905-0
00:18:10.918 --> 00:18:11.488
You get it right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3913-0
00:18:11.498 --> 00:18:12.468
So let's take an example.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3937-0
00:18:12.478 --> 00:18:16.577
It'll be one more clear, so here
is a BST for us and I want to

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3937-1
00:18:16.577 --> 00:18:17.748
delete the Note 9.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3948-0
00:18:18.618 --> 00:18:20.688
So nine is here and it has two
children.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3958-0
00:18:21.358 --> 00:18:23.978
So since it has two children,
I'm in case 3.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3966-0
00:18:24.598 --> 00:18:26.328
So who's the successor of nine?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/3981-0
00:18:27.968 --> 00:18:30.078
Yeah, this node is the one that
I want to delete.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4000-0
00:18:30.088 --> 00:18:33.798
So I validated in a different
color and it's successor is 11.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4006-0
00:18:34.178 --> 00:18:34.428
11.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4022-0
00:18:34.328 --> 00:18:37.364
So I found out right in the
right subtree of nine, the

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4022-1
00:18:37.364 --> 00:18:39.958
smallest is 11, so he's the
successor for now.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4041-0
00:18:39.968 --> 00:18:43.177
What I should do is I have found
it out already in the right

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4041-1
00:18:43.177 --> 00:18:43.598
subtree.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4050-0
00:18:43.608 --> 00:18:45.538
I found out the mean value which
is successor.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4098-0
00:18:46.008 --> 00:18:50.106
I'll copy this value into the
node that I plan to delete, so 9

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4098-1
00:18:50.106 --> 00:18:54.334
is what I wanted to delete, so I
copy this 11 there the moment I

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4098-2
00:18:54.334 --> 00:18:58.237
do that my deletion is over
correct because my 9 is already

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4098-3
00:18:58.237 --> 00:18:59.668
gone out of this tree.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4119-0
00:19:00.018 --> 00:19:04.051
So but I have a duplicate 11 so
this duplicate level which I

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4119-1
00:19:04.051 --> 00:19:05.308
have at the bottom.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4136-0
00:19:05.398 --> 00:19:08.905
This is what I want to delete
and this 11 deletion which case

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4136-1
00:19:08.905 --> 00:19:09.358
is that?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4140-0
00:19:11.528 --> 00:19:11.978
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4147-0
00:19:12.028 --> 00:19:13.658
So does it have zero children?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4154-0
00:19:13.668 --> 00:19:14.718
One children, two children.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4177-0
00:19:15.228 --> 00:19:19.282
So this this is having no
children so it is case one.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4184-0
00:19:17.758 --> 00:19:19.908
Because it's you kiss one.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4177-1
00:19:19.282 --> 00:19:19.658
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4188-0
00:19:19.668 --> 00:19:20.578
So I'll just delete him.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4195-0
00:19:19.918 --> 00:19:20.298
Kiss me.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4204-0
00:19:20.988 --> 00:19:24.898
Yeah, the whole 11 I deleted and
what remains is my output.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4206-0
00:19:25.988 --> 00:19:26.218
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4210-0
00:19:26.228 --> 00:19:26.758
Is this clear?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4216-0
00:19:26.908 --> 00:19:28.178
But let's take another example.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4225-0
00:19:28.258 --> 00:19:29.978
Yeah, but the concept is clear,
right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4246-0
00:19:29.988 --> 00:19:33.098
Whenever we are in case 3 for
the node that you want to

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4246-1
00:19:33.098 --> 00:19:34.598
delete, find the successor.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4281-0
00:19:35.108 --> 00:19:38.723
Copy The same successor value in
that node the moment you do

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4281-1
00:19:38.723 --> 00:19:42.042
that, you're deletion is over,
but by doing so you have

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4281-2
00:19:42.042 --> 00:19:44.828
introduced a duplicate and that
duplicate one.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4294-0
00:19:44.988 --> 00:19:48.091
You have to delete, which can
either be one of the other

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4294-1
00:19:48.091 --> 00:19:48.418
cases.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4305-0
00:19:49.008 --> 00:19:49.858
So let's take this example.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4315-0
00:19:50.958 --> 00:19:52.208
I want to delete six itself.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4317-0
00:19:51.008 --> 00:19:54.208
What did it mean duplicate Sir
duplicate here.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4326-0
00:19:55.858 --> 00:19:57.538
But the successor value?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4335-0
00:19:57.098 --> 00:19:57.388
Ohh.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4345-0
00:19:58.248 --> 00:20:00.963
Yeah, this one that we had, you
know, this is what we got

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4342-0
00:19:58.428 --> 00:19:59.088
OK, OK.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4345-1
00:20:00.963 --> 00:20:01.618
copied, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4364-0
00:20:01.908 --> 00:20:05.357
So in this three there is 2
lemons, so you should not end up

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4364-1
00:20:05.357 --> 00:20:06.488
deleting this level.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4383-0
00:20:06.798 --> 00:20:09.246
Yeah, because that was a
position where your nine was

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4383-1
00:20:09.246 --> 00:20:09.518
there.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4392-0
00:20:10.168 --> 00:20:12.538
So by duplicate I mean the
original successor.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4395-0
00:20:10.328 --> 00:20:10.718
This is.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4399-0
00:20:12.548 --> 00:20:13.608
That is what you have to delete.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4402-0
00:20:15.368 --> 00:20:15.678
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4408-0
00:20:15.688 --> 00:20:16.068
Is it clear?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4413-0
00:20:17.688 --> 00:20:18.818
Coolest has a question.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4421-0
00:20:17.818 --> 00:20:17.928
Yes.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4415-0
00:20:18.828 --> 00:20:18.998
Uh.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4439-0
00:20:19.008 --> 00:20:21.411
Can it be said that we are
swapping zed node with its

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4439-1
00:20:21.411 --> 00:20:23.058
successor and then perform
deletion?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4441-0
00:20:23.068 --> 00:20:23.498
Perfect.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4446-0
00:20:23.908 --> 00:20:25.008
Yeah, that's exactly right.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4449-0
00:20:25.408 --> 00:20:25.828
You are.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4462-0
00:20:25.838 --> 00:20:28.668
You you're not actually
swapping, but you're copying.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4466-0
00:20:28.678 --> 00:20:29.798
But that's also right.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4473-0
00:20:29.808 --> 00:20:30.558
You could also swap.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4483-0
00:20:30.568 --> 00:20:32.508
The nine would come here and
that nine can be deleted.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4487-0
00:20:33.418 --> 00:20:33.648
Good.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4501-0
00:20:34.898 --> 00:20:38.758
In this case I want to delete
six and at which case I mean.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4512-0
00:20:40.488 --> 00:20:41.218
Six has left.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4526-0
00:20:41.228 --> 00:20:44.358
Also, six has right also, so I'm
in case 3 right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4533-0
00:20:43.618 --> 00:20:44.248
At this.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4559-0
00:20:44.408 --> 00:20:47.777
It has both the children, so in
the right side I want to find

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4559-1
00:20:47.777 --> 00:20:51.037
out the minimum right the six I
want to delete in the whole

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4559-2
00:20:51.037 --> 00:20:51.798
right subtree.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4566-0
00:20:51.808 --> 00:20:52.998
I see who's the smallest.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4579-0
00:20:53.008 --> 00:20:56.478
It is 8, so this eight is the
successor of 6.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4597-0
00:20:56.988 --> 00:21:01.531
So I copy this 8/2 that node, so
I'm going to copy this eight

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4597-1
00:21:01.531 --> 00:21:01.898
here.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4615-0
00:21:02.168 --> 00:21:05.447
The moment I've copied it, my
six got deleted, but now there

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4615-1
00:21:05.447 --> 00:21:06.898
are two eights here, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4626-0
00:21:06.908 --> 00:21:08.898
There are two eights here and
this 8.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4648-0
00:21:09.128 --> 00:21:12.546
The successor node is what I
want to delete and now this is

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4648-1
00:21:12.546 --> 00:21:15.338
which case because this eight
also has children.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4679-0
00:21:16.868 --> 00:21:20.881
So is it case one case 2, case
3, just case 2 because it has

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4666-0
00:21:18.818 --> 00:21:19.148
It's too.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4679-1
00:21:20.881 --> 00:21:24.368
one child, so if it is that,
what should I be doing?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4700-0
00:21:24.818 --> 00:21:28.517
I should do short circuiting,
meaning I should cut this tie

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4700-1
00:21:28.517 --> 00:21:31.908
between 11:00 and 8:00 and I
should join it like this.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4704-0
00:21:33.938 --> 00:21:34.248
Right.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4721-0
00:21:34.258 --> 00:21:38.182
So then 11 will point, it's left
will have only nine and 10,

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4721-1
00:21:38.182 --> 00:21:38.568
right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4733-0
00:21:38.578 --> 00:21:41.668
I I've deleted this one, this
one I've joined 11 and 9.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4736-0
00:21:43.618 --> 00:21:43.948
Cool.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4744-0
00:21:43.958 --> 00:21:45.978
And what is the time complexity
of deletion?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4756-0
00:21:47.558 --> 00:21:48.848
Big of yen because of what?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4767-0
00:21:48.938 --> 00:21:51.928
Stupidness great, I have a
complete skewed tree.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4806-0
00:21:51.938 --> 00:21:55.961
If I want to delete the last
leaf if I'm in case one, I'll

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4806-1
00:21:55.961 --> 00:22:00.190
have to traverse all the way
till that and that is big of end

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4806-2
00:22:00.190 --> 00:22:03.668
correct cool is BST deletion
clear for all of you?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4818-0
00:22:06.368 --> 00:22:08.718
Promising guy, we learned a lot
about BST, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4823-0
00:22:09.028 --> 00:22:09.778
Simple stuff.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4836-0
00:22:09.788 --> 00:22:12.718
If it is the node value smaller
it goes to left side.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4844-0
00:22:12.728 --> 00:22:14.538
If it is greater, goes to the
right side.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4865-0
00:22:14.648 --> 00:22:18.182
That helps us in, you know,
pruning and insertion Max, min,

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4865-1
00:22:18.182 --> 00:22:20.008
deletion, all of it we learned.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4876-0
00:22:20.408 --> 00:22:23.268
But finally there was that small
case of cuteness.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4892-0
00:22:23.608 --> 00:22:26.843
Because of this, this whole data
structure is again back to big

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4892-1
00:22:26.843 --> 00:22:27.298
of young.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4894-0
00:22:28.118 --> 00:22:28.408
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4908-0
00:22:28.458 --> 00:22:31.508
Can we have example of case 3
resulting in a case 3 Sir.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4922-0
00:22:31.618 --> 00:22:33.788
Yeah, you could also have
something like those also right.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4942-0
00:22:33.798 --> 00:22:37.232
For example, in this example, if
this eight also had left

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4942-1
00:22:37.232 --> 00:22:39.838
children right then that can
also be there.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4944-0
00:22:39.988 --> 00:22:40.178
No.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4951-0
00:22:40.188 --> 00:22:40.818
Why it can't happen?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4968-0
00:22:41.888 --> 00:22:44.218
So this eight was our, you know.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4974-0
00:22:44.598 --> 00:22:46.008
It will be the smallest.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/4980-0
00:22:46.018 --> 00:22:48.218
It will not have any left child
after that.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5000-0
00:22:50.068 --> 00:22:53.178
It would be the smallest.
Uh-huh.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5021-0
00:22:50.538 --> 00:22:54.999
When we are finding a successor,
there'll be no left child of it,

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5021-1
00:22:54.999 --> 00:22:58.988
because then that left child
will be the successor, not 8.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5023-0
00:23:00.518 --> 00:23:01.128
That's perfect.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5040-0
00:23:01.138 --> 00:23:03.568
Yeah, in BST it will not happen,
but in AVL it will happen.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5052-0
00:23:03.618 --> 00:23:06.188
So I just, you know, got
confused with it.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5073-0
00:23:06.198 --> 00:23:10.150
But you're right, in BST this
case 3 will only result again in

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5073-1
00:23:10.150 --> 00:23:11.468
case one or case two.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5096-0
00:23:12.148 --> 00:23:14.995
Yeah, but there is another tree
that we will learn which is on

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5096-1
00:23:14.995 --> 00:23:15.718
top of this BST.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5100-0
00:23:16.268 --> 00:23:16.878
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5112-0
00:23:16.948 --> 00:23:18.958
So that is the very next tree
that we will learn.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5128-0
00:23:19.048 --> 00:23:21.858
And they're also you have
deletion and there that will

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5128-1
00:23:21.858 --> 00:23:23.238
result in a lot more cases.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5146-0
00:23:23.308 --> 00:23:27.030
Yeah, email deletion itself has
three, and this also has another

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5146-1
00:23:27.030 --> 00:23:28.118
three and all that.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5148-0
00:23:28.938 --> 00:23:29.068
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5155-0
00:23:29.908 --> 00:23:31.038
Cool, but you're right.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5157-0
00:23:31.048 --> 00:23:31.398
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5161-0
00:23:31.448 --> 00:23:32.318
Thank you for that.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5191-0
00:23:32.328 --> 00:23:36.352
So in this case in, when you are
in case 3 after it's deletion,

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5191-1
00:23:36.352 --> 00:23:39.308
you will end up because I see
rightly pointed.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5211-0
00:23:39.318 --> 00:23:42.561
So if you are trying to create
or find out the successor, so

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5211-1
00:23:42.561 --> 00:23:44.688
that will not have another left,
right.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5233-0
00:23:44.698 --> 00:23:47.668
So in this whole right subtree
that will be the minimum, which

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5233-1
00:23:47.668 --> 00:23:49.648
means it doesn't have a left
side. Right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5235-0
00:23:50.168 --> 00:23:50.478
Cool.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5250-0
00:23:50.768 --> 00:23:53.620
So if this operation happens in
left subtree, then we need to

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5250-1
00:23:53.620 --> 00:23:53.988
replace.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5279-0
00:23:54.038 --> 00:23:57.455
No, no, no, not at all for the
whole tree BST deletion means

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5279-1
00:23:57.455 --> 00:24:00.928
either you can go for successor
approach if it is in the left

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5279-2
00:24:00.928 --> 00:24:01.208
side.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5289-0
00:24:01.218 --> 00:24:03.118
Also you can find out that
successor and do it.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5294-0
00:24:04.048 --> 00:24:06.138
Yeah, no problem with that.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5304-0
00:24:08.328 --> 00:24:10.158
All good with your BST.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5306-0
00:24:11.198 --> 00:24:11.898
Yes, no, maybe.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5309-0
00:24:17.498 --> 00:24:17.828
Cool.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5322-0
00:24:17.838 --> 00:24:20.942
Then let's get started with the
next one, which is hashing

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5322-1
00:24:20.942 --> 00:24:21.258
right.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5345-0
00:24:22.388 --> 00:24:25.221
So you might have learned a lot
of these applications even in

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5345-1
00:24:25.221 --> 00:24:27.598
our Python course we learned
about, you know, this.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5361-0
00:24:27.688 --> 00:24:31.993
So a hash table or you know this
is one of the presentations of a

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5361-1
00:24:31.993 --> 00:24:33.168
dictionary, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5380-0
00:24:33.388 --> 00:24:37.991
So where you associate certain
keys with certain elements, that

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5380-1
00:24:37.991 --> 00:24:39.718
is what is a hash table.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5394-0
00:24:40.168 --> 00:24:43.028
So hash table is a data
structure used to store key

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5394-1
00:24:43.028 --> 00:24:43.798
element pairs.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5413-0
00:24:44.068 --> 00:24:47.642
Yeah, the key and element
together is called as an item,

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5413-1
00:24:47.642 --> 00:24:48.018
right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5437-0
00:24:48.348 --> 00:24:52.146
So for example, if there are a
lot of, you know students, so I

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5437-1
00:24:52.146 --> 00:24:54.498
can consider all of those as
elements.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5455-0
00:24:54.888 --> 00:24:57.479
So for all of them, I give a
roll number that becomes the

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5461-0
00:24:57.218 --> 00:24:57.468
Right.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5455-1
00:24:57.479 --> 00:24:57.658
key.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5474-0
00:24:58.188 --> 00:25:02.765
So if I use this key and element
put together that is an item

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5474-1
00:25:02.765 --> 00:25:03.208
right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5486-0
00:25:03.618 --> 00:25:06.228
So keys are then used to insert,
search or remove.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5513-0
00:25:06.238 --> 00:25:09.260
So if I want to delete a student
entry, I will just use their

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5513-1
00:25:09.260 --> 00:25:12.039
role number for searching for
removing, for inserting or

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5513-2
00:25:12.039 --> 00:25:12.478
anything.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5530-0
00:25:13.698 --> 00:25:16.943
So many applications are there,
for example address books host,

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5530-1
00:25:16.943 --> 00:25:18.718
you know, name mappings and so
on.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5544-0
00:25:20.598 --> 00:25:23.409
So this hash table actually
consists of two major

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5544-1
00:25:23.409 --> 00:25:24.028
components.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5573-0
00:25:24.238 --> 00:25:28.127
It is made up of two things,
which is your hash function and

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5573-1
00:25:28.127 --> 00:25:32.208
a bucket array, or it can also
be called as a the table itself.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5582-0
00:25:32.558 --> 00:25:34.708
Yeah, this is exactly like
Python dictionary, correct?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5586-0
00:25:34.718 --> 00:25:35.168
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5604-0
00:25:35.238 --> 00:25:38.307
So this is the actual concept
and in Python And other

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5604-1
00:25:38.307 --> 00:25:40.638
languages it has been
implemented right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5640-0
00:25:40.648 --> 00:25:43.884
This is an abstract data type
and in most programming

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5640-1
00:25:43.884 --> 00:25:47.481
languages you have one or the
other forms of hash table you

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5640-2
00:25:47.481 --> 00:25:50.358
have hash table, hash map or
dictionary, right.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5646-0
00:25:50.368 --> 00:25:52.208
Several implementations of the
same concept.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5650-0
00:25:53.608 --> 00:25:54.478
So what are these?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5652-0
00:25:54.528 --> 00:25:54.738
Right.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5659-0
00:25:54.748 --> 00:25:55.958
What is a hash function?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5666-0
00:25:56.398 --> 00:25:57.658
What is a bucket array?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5673-0
00:25:59.068 --> 00:25:59.798
So a bucket array.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5684-0
00:25:59.808 --> 00:26:00.958
First, we will see what it is.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5696-0
00:26:01.228 --> 00:26:03.808
A bucket array of size N,
meaning it's a simple array.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5706-0
00:26:04.818 --> 00:26:07.198
Each cell is thought of as a
bucket, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5721-0
00:26:07.208 --> 00:26:09.651
For example, if this is an
array, so how many elements do

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5721-1
00:26:09.651 --> 00:26:09.988
we have?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5753-0
00:26:10.078 --> 00:26:13.719
We have 11 right zero to 10, so
each one of them you can assume

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5753-1
00:26:13.719 --> 00:26:17.076
it to be like a bucket and yen
defines the capacity of the

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5753-2
00:26:17.076 --> 00:26:17.418
array.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5776-0
00:26:18.468 --> 00:26:22.037
If the keys are integers well
distributed in the range 0 to

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5776-1
00:26:22.037 --> 00:26:25.428
north minus one right, we will
also look more into this.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5823-0
00:26:25.438 --> 00:26:30.165
It will be clear an element E
with key K is inserted into the

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5823-1
00:26:30.165 --> 00:26:34.968
bucket of K great meaning there
is an element who has a key SK

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5823-2
00:26:34.968 --> 00:26:39.238
to you will go to that K
position and you will put this

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5823-3
00:26:39.238 --> 00:26:39.848
element.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5840-0
00:26:40.418 --> 00:26:44.570
For example, the bucket for
items with key as six will go

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5840-1
00:26:44.570 --> 00:26:46.288
into this bucket, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5848-0
00:26:46.478 --> 00:26:48.758
For example, someone with six
chocolates, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5857-0
00:26:48.768 --> 00:26:50.098
All of them will go into this
bucket.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5868-0
00:26:50.108 --> 00:26:51.598
Someone with two will go to this
bucket.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5874-0
00:26:52.158 --> 00:26:54.048
So is the bucket array part
clear?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5892-0
00:26:54.058 --> 00:26:57.042
It is just a simple array and it
is going to have a maximum

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5892-1
00:26:57.042 --> 00:26:57.938
capacity of north.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5901-0
00:26:57.998 --> 00:27:00.188
This is 1 portion of the hash
table.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5914-0
00:27:00.908 --> 00:27:04.250
The important portion comes
next, which is your hash

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5914-1
00:27:04.250 --> 00:27:04.818
function.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5923-0
00:27:05.308 --> 00:27:06.738
But before that you might have a
question.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5944-0
00:27:06.748 --> 00:27:09.825
If it's just a ARAY then what is
the difference between a normal

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5944-1
00:27:09.825 --> 00:27:11.198
array and a hash table right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5948-0
00:27:11.208 --> 00:27:11.818
Something like this?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5955-0
00:27:13.148 --> 00:27:14.628
So what is the difference
between them?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5970-0
00:27:17.268 --> 00:27:18.358
Yeah, there is an array here.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6014-0
00:27:17.698 --> 00:27:21.890
So insertion time is lesser and
even searching time is lesser

c665b3ae-097f-4446-a5df-1f0f9956fc9a/5983-0
00:27:18.368 --> 00:27:19.008
There's an hash table.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6014-1
00:27:21.890 --> 00:27:26.217
because with key element we can
find the element and insert the

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6010-0
00:27:25.148 --> 00:27:25.378
Uh-huh.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6014-2
00:27:26.217 --> 00:27:26.758
element.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6015-0
00:27:28.048 --> 00:27:28.458
Right.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6031-0
00:27:28.528 --> 00:27:33.624
But just by looking at these,
what is the other difference in

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6031-1
00:27:33.624 --> 00:27:34.528
this array?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6039-0
00:27:34.538 --> 00:27:37.348
Is there some keys associated
with them?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6050-0
00:27:40.498 --> 00:27:40.898
Guess no.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6048-0
00:27:41.088 --> 00:27:41.348
No.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6057-0
00:27:42.478 --> 00:27:42.858
No, Sir.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6076-0
00:27:42.798 --> 00:27:46.247
I can always argue that there is
a indexes and that index can act

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6093-0
00:27:46.138 --> 00:27:49.768
Basically, index becomes the
key, yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6076-1
00:27:46.247 --> 00:27:46.718
as a key.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6089-0
00:27:48.898 --> 00:27:50.748
Yeah, index can become a key,
right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6098-0
00:27:50.758 --> 00:27:52.078
Because that is still unique.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6101-0
00:27:52.378 --> 00:27:53.048
This will be 0.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6130-0
00:27:53.058 --> 00:27:56.757
This will be 1/2 and so one and
it I can still use that right

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6130-1
00:27:56.757 --> 00:27:58.488
index can still act as a key.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6134-0
00:27:58.918 --> 00:28:00.058
Then is an array hash table.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6144-0
00:28:02.848 --> 00:28:04.788
OK, let's clarify that myth.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6141-0
00:28:03.038 --> 00:28:03.248
Yes.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6174-0
00:28:04.938 --> 00:28:10.292
So in an array, these indices
are automatically taken from

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6174-1
00:28:10.292 --> 00:28:16.192
zero to n -, 1, and they do not
have a relation with this value,

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6174-2
00:28:16.192 --> 00:28:16.918
correct?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6188-0
00:28:17.068 --> 00:28:20.798
So for example, 011 is Boston
and two is Mexico.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6205-0
00:28:21.248 --> 00:28:24.869
It's just a normal ordering that
2 doesn't have a relation to

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6205-1
00:28:24.869 --> 00:28:25.278
Mexico.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6218-0
00:28:25.688 --> 00:28:27.738
Or maybe it is not derived out
of this.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6224-0
00:28:27.748 --> 00:28:30.118
Mexico beat us in a hash table.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6234-0
00:28:30.128 --> 00:28:32.258
These keys have a relation with
this value.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6236-0
00:28:33.308 --> 00:28:33.858
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6252-0
00:28:33.928 --> 00:28:36.902
So maybe I can tell in this
string how many you know vowels

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6252-1
00:28:36.902 --> 00:28:37.398
are there.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6272-0
00:28:37.468 --> 00:28:40.678
I will count that and then that
can become its key or, you know,

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6272-1
00:28:40.678 --> 00:28:41.518
things like that.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6289-0
00:28:41.528 --> 00:28:45.753
So these have a relation and
these two put together form an

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6289-1
00:28:45.753 --> 00:28:46.528
item right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6341-0
00:28:46.758 --> 00:28:50.595
For example, in a student set
your name and your role number

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6341-1
00:28:50.595 --> 00:28:54.495
together become your identity,
right, whereas in an array, if

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6341-2
00:28:54.495 --> 00:28:58.522
you just store all your names,
you will get some normal numbers

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6341-3
00:28:58.522 --> 00:28:59.088
as 01234.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6350-0
00:28:59.198 --> 00:29:02.868
That 1234 is not having any
significance, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6357-0
00:29:03.998 --> 00:29:04.898
That is the main difference.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6362-0
00:29:06.038 --> 00:29:06.828
So let's go about.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6368-0
00:29:06.878 --> 00:29:08.608
What is this hash function now?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6370-0
00:29:08.898 --> 00:29:09.158
Right.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6388-0
00:29:10.428 --> 00:29:13.338
So the keys are not always in
the range 0 to north minus one.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6391-0
00:29:13.868 --> 00:29:14.638
They agree to that.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6409-0
00:29:15.048 --> 00:29:18.219
I'm just using a normal array
and that array has a maximum

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6409-1
00:29:18.219 --> 00:29:18.918
capacity yen.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6432-0
00:29:19.448 --> 00:29:23.658
So all that I can store is 0 to
north minus one, but I might

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6432-1
00:29:23.658 --> 00:29:26.488
have a key which is beyond N
also right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6446-0
00:29:26.498 --> 00:29:30.228
So I'll have to somehow map it
into this range again, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6482-0
00:29:30.238 --> 00:29:34.569
For example, if I have a table
of size 10, I'm getting a number

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6482-1
00:29:34.569 --> 00:29:38.900
which is 50, but I still want to
somehow map it into this range

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6482-2
00:29:38.900 --> 00:29:39.848
of zero to 10.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6490-0
00:29:40.358 --> 00:29:41.908
So which function will help us
there?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6497-0
00:29:42.358 --> 00:29:45.438
There's a mathematical operator
who's that?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6507-0
00:29:47.498 --> 00:29:48.568
Yeah, Mark, very good.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6510-0
00:29:47.718 --> 00:29:47.948
OK.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6533-0
00:29:48.578 --> 00:29:52.690
Yeah, hash function helps to map
each key K to an integer in the

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6533-1
00:29:52.690 --> 00:29:54.588
range of 0 to north minus one.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6538-0
00:29:55.038 --> 00:29:56.428
Right mod function helps us.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6565-0
00:29:56.438 --> 00:30:01.968
For example, H of K is equal to
X mod N is a hash function and

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6565-1
00:30:01.968 --> 00:30:06.708
the integer H of X is called the
hash value of key X.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6572-0
00:30:06.748 --> 00:30:07.978
They are very, very important
ways.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6583-0
00:30:07.988 --> 00:30:11.558
Don't get you know, just carried
away with these definitions.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6591-0
00:30:11.618 --> 00:30:12.458
Let's break it down.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6593-0
00:30:12.468 --> 00:30:12.838
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6623-0
00:30:13.288 --> 00:30:17.997
First of all, this high of OK it
is a function correct HO FKH of

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6623-1
00:30:17.997 --> 00:30:21.258
X is equal to X mod N so this is
a function.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6629-0
00:30:22.468 --> 00:30:24.818
This X is some integer.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6653-0
00:30:24.888 --> 00:30:28.013
Yeah, you are going to, you
know, this is your some value

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6653-1
00:30:28.013 --> 00:30:30.438
and then is also the capacity of
your array.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6662-0
00:30:30.448 --> 00:30:32.768
You put these values after you
put these.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6696-0
00:30:32.778 --> 00:30:37.289
You are going to get an answer
right this H of X answer you

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6696-1
00:30:37.289 --> 00:30:41.875
will get and that answer is
called as the hash value or hash

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6696-2
00:30:41.875 --> 00:30:43.078
value of this X.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6704-0
00:30:44.138 --> 00:30:45.198
Is this clear for all of you?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6714-0
00:30:46.468 --> 00:30:47.908
So you are given a hash
function.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6733-0
00:30:48.748 --> 00:30:52.971
You pass your key to it and what
you get is called as the hash

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6733-1
00:30:52.971 --> 00:30:54.178
value of that key.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6735-0
00:30:55.888 --> 00:30:56.138
Yes.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6747-0
00:30:56.148 --> 00:30:58.048
No, all of you simple
definitions.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6752-0
00:30:59.178 --> 00:31:00.248
Hash function is given.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6757-0
00:31:00.778 --> 00:31:02.008
You pass your key to it.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6784-0
00:31:02.298 --> 00:31:07.389
What you get out of it is the
hash value and that hash value

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6784-1
00:31:07.389 --> 00:31:10.978
will now be used to store this
key, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6796-0
00:31:10.988 --> 00:31:13.918
I'll go to that location and
I'll put this number there.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6802-0
00:31:15.108 --> 00:31:15.878
Let's go further.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6822-0
00:31:16.148 --> 00:31:19.513
Hash function maps each key K in
our dictionary to an integer in

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6822-1
00:31:19.513 --> 00:31:21.118
the range 0 to north minus one.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6866-0
00:31:21.608 --> 00:31:24.599
So this very powerful line
simply says all the hash

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6866-1
00:31:24.599 --> 00:31:28.223
functions are going to have in
some or the other form this mod

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6866-2
00:31:28.223 --> 00:31:31.790
function, because if you don't
have the mod function then you

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6866-3
00:31:31.790 --> 00:31:33.458
may exceed this range, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6892-0
00:31:33.468 --> 00:31:36.419
You you might not be able to
accommodate, so I need to have

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6892-1
00:31:36.419 --> 00:31:38.928
that mod function where North is
also my capacity.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6917-0
00:31:40.228 --> 00:31:44.163
So use the hash function value H
of K as an index to the bucket

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6917-1
00:31:44.163 --> 00:31:46.438
array, right instead of the key
key.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6924-0
00:31:47.898 --> 00:31:49.228
So let's you know, go further.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6934-0
00:31:49.718 --> 00:31:50.898
So we will come back to this.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6944-0
00:31:50.908 --> 00:31:53.908
There are some requirements of a
good hash function.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6956-0
00:31:54.318 --> 00:31:56.528
Which is it has two first
minimize collision.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6975-0
00:31:56.538 --> 00:31:58.787
It should be easy to compute and
so on, but firstly you'll

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6975-1
00:31:58.787 --> 00:32:00.618
understand collisions and then
we'll come back.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6999-0
00:32:02.638 --> 00:32:06.876
So does an example of a hash
function H of K is equal to K

c665b3ae-097f-4446-a5df-1f0f9956fc9a/6999-1
00:32:06.876 --> 00:32:07.738
mod N right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7005-0
00:32:07.748 --> 00:32:09.728
The absolute value we are
taking. Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7024-0
00:32:10.098 --> 00:32:12.329
So whatever is the key, I'm
going to give it to this

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7024-1
00:32:12.329 --> 00:32:12.708
function.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7040-0
00:32:13.198 --> 00:32:16.790
I will get an answer and that
answer will be used in that

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7040-1
00:32:16.790 --> 00:32:17.348
position.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7056-0
00:32:17.358 --> 00:32:21.098
I'll put this key K and the N is
the size of the hash table.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7075-0
00:32:21.928 --> 00:32:25.182
N is usually chosen to be a
prime number that helps to

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7075-1
00:32:25.182 --> 00:32:26.898
spread out the hashed values.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7095-0
00:32:27.048 --> 00:32:30.163
Yeah, we will understand it's
importance in a minute, but this

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7095-1
00:32:30.163 --> 00:32:31.498
diagram is a very good one.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7100-0
00:32:33.058 --> 00:32:35.258
There is a key. Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7112-0
00:32:35.508 --> 00:32:38.268
So this key itself is derived
from an item, correct?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7128-0
00:32:39.908 --> 00:32:43.298
So this diagram is not very
complete, so this is an item.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7132-0
00:32:44.748 --> 00:32:45.518
It has a key.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7142-0
00:32:46.018 --> 00:32:49.188
It has a, you know element.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7150-0
00:32:49.278 --> 00:32:50.828
It can have a lot of attributes,
right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7161-0
00:32:50.838 --> 00:32:52.338
All of them put together is 1
item.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7179-0
00:32:53.238 --> 00:32:57.903
I take that key alone and I pass
it to my hash function and this

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7179-1
00:32:57.903 --> 00:32:58.908
hash function.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7194-0
00:32:59.318 --> 00:33:03.648
One of the examples could be or
K mod N it could be anything.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7227-0
00:33:03.658 --> 00:33:07.648
Yeah, you calculate that, but
definitely it will result in a

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7227-1
00:33:07.648 --> 00:33:11.572
value which which is in the
range of 02 and minus one right

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7227-2
00:33:11.572 --> 00:33:12.488
in this range.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7256-0
00:33:12.498 --> 00:33:16.554
It should give me the answer, so
that value that I've got for

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7256-1
00:33:16.554 --> 00:33:20.741
example, let's assume I got the
value as two that is called the

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7256-2
00:33:20.741 --> 00:33:21.068
hash.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7264-0
00:33:21.078 --> 00:33:22.268
Do I leave off this key?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7292-0
00:33:23.278 --> 00:33:26.664
I will go to that second
position and I will put that

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7292-1
00:33:26.664 --> 00:33:29.988
whole item here, not just the
key to the whole item.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7295-0
00:33:29.998 --> 00:33:30.648
You will put it there.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7300-0
00:33:32.288 --> 00:33:32.738
Great.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7315-0
00:33:32.828 --> 00:33:36.529
Is this clear for all of you,
the big picture of what hashing

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7315-1
00:33:36.529 --> 00:33:36.708
is?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7335-0
00:33:36.858 --> 00:33:39.941
And then of course, if I want to
do search again, I will use the

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7335-1
00:33:39.941 --> 00:33:40.368
same key.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7350-0
00:33:40.378 --> 00:33:42.948
I will come to the two and I
will see if it is there or not.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7366-0
00:33:43.118 --> 00:33:46.011
I'll go randomly, you know,
searching for all the, you know,

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7366-1
00:33:46.011 --> 00:33:46.248
list.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7372-0
00:33:46.258 --> 00:33:46.858
I will not do that.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7393-0
00:33:47.988 --> 00:33:51.215
Yeah, but now there was this
line like, you know, this yen

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7393-1
00:33:51.215 --> 00:33:53.568
should be chosen as a prime
number, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7405-0
00:33:53.578 --> 00:33:56.518
Why is that hash cannot have
null value?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7409-0
00:33:56.528 --> 00:33:57.518
Said no, it cannot, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7436-0
00:33:57.528 --> 00:34:01.361
So if the hash value if this is
a null, then where would you go

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7436-1
00:34:01.361 --> 00:34:03.218
and store that particular item?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7471-0
00:34:04.118 --> 00:34:07.700
But it should definitely be in
one of these range 02 this n -,

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7471-1
00:34:07.700 --> 00:34:11.282
1, so that you can go to that
location and put that particular

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7471-2
00:34:11.282 --> 00:34:11.908
item there.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7482-0
00:34:12.778 --> 00:34:15.728
If this itself is null, then how
do you store that right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7488-0
00:34:17.678 --> 00:34:18.668
Let's quickly do this.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7503-0
00:34:18.998 --> 00:34:21.828
Consider the following keys,
meaning again, a word of

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7503-1
00:34:21.828 --> 00:34:22.248
caution.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7533-0
00:34:22.258 --> 00:34:26.704
In all my slides, I will only be
talking about the keys, but the

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7533-1
00:34:26.704 --> 00:34:30.739
big picture is that each of
these keys also have a element

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7533-2
00:34:30.739 --> 00:34:32.518
associated with it, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7543-0
00:34:32.528 --> 00:34:34.718
For example, this could be
someone's roll number.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7550-0
00:34:34.928 --> 00:34:36.598
Yeah, they have their names.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7566-0
00:34:36.608 --> 00:34:39.348
Marks address all of that
associated, but I will not be

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7566-1
00:34:39.348 --> 00:34:40.278
depicting all that.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7599-0
00:34:40.748 --> 00:34:43.929
Typically in a Python that will
become an object and you can

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7599-1
00:34:43.929 --> 00:34:47.006
store that object, but in my
examples I will just directly

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7599-2
00:34:47.006 --> 00:34:48.988
put this key itself in that
location.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7601-0
00:34:50.048 --> 00:34:50.298
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7607-0
00:34:50.308 --> 00:34:50.778
Is this clear?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7610-0
00:34:50.788 --> 00:34:51.148
All of you.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7636-0
00:34:52.198 --> 00:34:55.313
So for example, in this example
I told you right the right ways,

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7636-1
00:34:55.313 --> 00:34:58.188
this whole item should go into
that cell, not just the key.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7666-0
00:34:58.718 --> 00:35:02.306
Yeah, but in these examples I
would just put the key and exams

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7666-1
00:35:02.306 --> 00:35:04.698
and one also you will be only
given keys.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7676-0
00:35:04.708 --> 00:35:06.468
You'll not be given the whole
item and so on.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7684-0
00:35:07.398 --> 00:35:10.948
Right, Sir, can you give an
example? Brief?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7688-0
00:35:10.958 --> 00:35:11.698
Uh. Hash function?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7694-0
00:35:11.708 --> 00:35:12.708
Yeah, these are all examples.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7705-0
00:35:12.718 --> 00:35:15.838
Yeah, this is an example of a
hash function, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7711-0
00:35:17.568 --> 00:35:19.108
So let's go with this.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7719-0
00:35:19.118 --> 00:35:21.278
Yeah, we'll understand about
that more, Rajesh.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7721-0
00:35:21.288 --> 00:35:21.508
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7742-0
00:35:21.548 --> 00:35:25.418
So we are we have given a lot of
keys 202 not 5 to 10.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7749-0
00:35:25.428 --> 00:35:26.718
All of these keys are given to
us.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7776-0
00:35:27.468 --> 00:35:31.880
Apply the hash function H of K
is equal to K mod 10 where K

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7776-1
00:35:31.880 --> 00:35:33.278
IS202O5210 and SO1.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7788-0
00:35:34.368 --> 00:35:36.568
When you apply it, you will get
the H of K answers.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7816-0
00:35:37.198 --> 00:35:41.973
Similarly, we have also been
told when N is 101, then again

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7816-1
00:35:41.973 --> 00:35:44.838
try to calculate the hashed
values.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7826-0
00:35:45.268 --> 00:35:49.205
So real quick do this and tell
me the answers for when N is

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7826-1
00:35:49.205 --> 00:35:49.468
100.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7834-0
00:35:50.308 --> 00:35:51.418
Meaning, what is that you are
doing?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7861-0
00:35:52.208 --> 00:35:59.343
You are going to do 200 mod
hundred 205 mod 100, then 210

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7861-1
00:35:59.343 --> 00:36:01.558
mod 100 and so on.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7896-0
00:36:01.628 --> 00:36:06.570
You will do it for the whole
list and give me one answer and

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7896-1
00:36:06.570 --> 00:36:11.675
then you will do it for 200 mod
100 and one 205 mod 101 and so

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7896-2
00:36:11.675 --> 00:36:11.918
on.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7911-0
00:36:13.878 --> 00:36:17.191
Yeah, they're already answers,
and I really love that real

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7911-1
00:36:17.191 --> 00:36:17.528
quick.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7922-0
00:36:17.858 --> 00:36:21.038
Yeah, 051005100510.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7936-0
00:36:21.418 --> 00:36:26.478
Yeah, that's right, 051005100510
right.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7938-0
00:36:26.488 --> 00:36:26.778
Cool.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7947-0
00:36:26.868 --> 00:36:27.848
And what about the next one?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7964-0
00:36:29.148 --> 00:36:36.098
When you apply 101 right 200
modulus 101 is a 99, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7978-0
00:36:40.428 --> 00:36:42.528
Yes, no real quick who's doing
this calculation?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7981-0
00:36:43.508 --> 00:36:44.618
You have already calculators.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/7989-0
00:36:46.788 --> 00:36:48.028
This would be a 99.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8007-0
00:36:53.418 --> 00:36:56.638
99389827 and so one, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8010-0
00:36:56.648 --> 00:36:57.108
That's right.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8012-0
00:36:57.118 --> 00:36:57.388
Cool.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8043-0
00:36:57.678 --> 00:37:02.791
So now if you just carefully
look at these hash values when N

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8043-1
00:37:02.791 --> 00:37:06.998
was hundred, there are a lot of
repetitions right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8062-0
00:37:07.008 --> 00:37:10.392
Meaning duplicates 0 itself is
coming several times 10 also is

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8062-1
00:37:10.392 --> 00:37:12.058
coming several times five also.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8077-0
00:37:12.428 --> 00:37:15.319
But when it was one or one, you
did not have a lot of

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8077-1
00:37:15.319 --> 00:37:15.908
duplicates.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8091-0
00:37:17.118 --> 00:37:19.548
Yeah, because I don't want his
prime.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8122-0
00:37:19.678 --> 00:37:23.642
And 100 is not a pro, but now if
you tell me just because I

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8122-1
00:37:23.642 --> 00:37:27.607
choose a prime, can it guarantee
that there will be never a

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8122-2
00:37:27.607 --> 00:37:28.268
duplicate?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8131-0
00:37:28.838 --> 00:37:29.738
No, it cannot guarantee.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8171-0
00:37:30.498 --> 00:37:33.779
Even if you choose a prime
number, there can still be cases

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8171-1
00:37:33.779 --> 00:37:36.842
where there are duplicates,
yeah, but when you choose a

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8171-2
00:37:36.842 --> 00:37:40.397
prime number with this example,
we are able to see that the keys

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8171-3
00:37:40.397 --> 00:37:41.108
are the same.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8217-0
00:37:41.498 --> 00:37:45.788
All these keys are same for both
the example but when you took a

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8217-1
00:37:45.788 --> 00:37:49.748
prime number the number of
duplicates have been reduced but

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8217-2
00:37:49.748 --> 00:37:53.972
in a non prime number there were
a lot of duplicates so that is

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8217-3
00:37:53.972 --> 00:37:55.688
why we had that line here.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8230-0
00:37:55.698 --> 00:37:59.159
Telling N is usually chosen to
be a prime number so that you

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8230-1
00:37:59.159 --> 00:38:00.408
don't have duplicates.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8237-0
00:38:02.378 --> 00:38:03.518
What is this duplicate?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8252-0
00:38:04.508 --> 00:38:06.748
Yeah, if the zero if this zero.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8290-0
00:38:06.758 --> 00:38:10.987
If the zeros are the hashed
value so then this 200, then

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8290-1
00:38:10.987 --> 00:38:15.661
this 300 and 400 are competing
for that same location which is

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8290-2
00:38:15.661 --> 00:38:16.848
indexed by zero.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8305-0
00:38:18.328 --> 00:38:21.198
Is that correct and that is what
is called as collision.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8311-0
00:38:22.868 --> 00:38:24.778
A bucket can store only one
item.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8314-0
00:38:25.088 --> 00:38:26.748
Simple right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8327-0
00:38:28.078 --> 00:38:30.228
So for example, in this case
everything is null.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8335-0
00:38:30.238 --> 00:38:32.998
And let's suppose I'm going to
count the number of.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8339-0
00:38:34.528 --> 00:38:35.078
Uh.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8344-0
00:38:35.088 --> 00:38:36.038
Say phones I have.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8347-0
00:38:36.148 --> 00:38:36.628
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8357-0
00:38:36.698 --> 00:38:39.898
So John is having one phone
easier, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8368-0
00:38:40.428 --> 00:38:42.168
Mary has five phones, so she's
here.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8389-0
00:38:42.948 --> 00:38:46.686
But as Martha and Janet, both of
them have exactly 3 phones, so

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8389-1
00:38:46.686 --> 00:38:46.978
they.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8395-0
00:38:47.228 --> 00:38:48.758
So that is the hashed value,
right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8432-0
00:38:48.768 --> 00:38:52.508
The number of phones that they
have is the hash value, so here

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8432-1
00:38:52.508 --> 00:38:56.070
it is 3, so both of them come
and collide here in this cell

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8432-2
00:38:56.070 --> 00:38:57.198
which is collision.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8449-0
00:38:57.268 --> 00:39:01.416
This should not happen right
collision occurs when when can

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8449-1
00:39:01.416 --> 00:39:02.108
it happen?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8461-0
00:39:03.388 --> 00:39:07.288
If two different elements have
the same keys, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8509-0
00:39:07.298 --> 00:39:11.591
If two different elements have
the same key then also this

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8509-1
00:39:11.591 --> 00:39:16.030
condition can happen or when two
distinct keys K1 and K2 are

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8509-2
00:39:16.030 --> 00:39:20.761
mapped to the same bucket in the
hash table such that H of K1 is

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8509-3
00:39:20.761 --> 00:39:21.998
equal to H of K2.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8526-0
00:39:22.938 --> 00:39:27.378
In this example we saw it 203
hundred 400, all different keys.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8549-0
00:39:28.308 --> 00:39:31.607
But when you update your hash
function, your hash values were

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8549-1
00:39:31.607 --> 00:39:32.618
all zeros for them.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8562-0
00:39:33.368 --> 00:39:36.018
Either this can happen or keep
themselves.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8566-0
00:39:36.028 --> 00:39:38.548
Could also be duplicates, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8581-0
00:39:38.558 --> 00:39:41.949
So in those cases, in both of
these cases, collision will

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8581-1
00:39:41.949 --> 00:39:42.358
happen.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8592-0
00:39:43.908 --> 00:39:46.848
Yeah, that is where that
advantage came.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8614-0
00:39:47.228 --> 00:39:51.129
I should somehow choose the hash
function such that it can

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8614-1
00:39:51.129 --> 00:39:54.568
minimize the collisions as much
as possible, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8625-0
00:39:54.578 --> 00:39:55.828
And what is one way to do that?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8629-0
00:39:56.828 --> 00:39:57.848
You already learned about it.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8644-0
00:39:59.388 --> 00:40:02.208
What is one way to minimize the
collision as much as possible?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8649-0
00:40:03.498 --> 00:40:04.058
Same number.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8657-0
00:40:04.178 --> 00:40:05.338
Uh prime number.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8653-0
00:40:05.098 --> 00:40:06.418
Yeah, exactly.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8663-0
00:40:06.428 --> 00:40:08.288
You will choose yen, your
capital yen.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8678-0
00:40:08.338 --> 00:40:11.228
That is the size of your hash
table to be a prime number.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8694-0
00:40:11.398 --> 00:40:14.348
But just because you choose
prime, it doesn't mean that it

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8694-1
00:40:14.348 --> 00:40:16.048
will completely solve
collisions.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8718-0
00:40:16.418 --> 00:40:19.875
Collision will still happen, but
it'll minimize it and this hash

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8718-1
00:40:19.875 --> 00:40:22.268
function should be fast and easy
to compute.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8728-0
00:40:22.758 --> 00:40:24.558
Yeah, you should have just
modulus function.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8752-0
00:40:24.618 --> 00:40:26.394
A couple of maybe
multiplication, minus,

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8752-1
00:40:26.394 --> 00:40:27.348
subtraction, division.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8777-0
00:40:27.358 --> 00:40:31.057
All that this hash function
should not be a very complex

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8777-1
00:40:31.057 --> 00:40:35.275
function involving, say you know
trigonometry, route and squares

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8777-2
00:40:35.275 --> 00:40:39.299
and so on, because that will be
an overhead in computing just

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8777-3
00:40:39.299 --> 00:40:39.948
the index.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8785-0
00:40:39.958 --> 00:40:42.088
Where is that item should go
right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8792-0
00:40:43.648 --> 00:40:45.558
This collision has to now be
resolved.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8796-0
00:40:45.968 --> 00:40:46.528
We agreed.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8803-0
00:40:46.538 --> 00:40:47.418
What is a hashing?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8810-0
00:40:47.428 --> 00:40:48.498
We understood what it is.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8820-0
00:40:48.828 --> 00:40:51.378
We also saw what is collision,
but this should not happen.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8847-0
00:40:51.428 --> 00:40:54.098
Two people cannot come in,
collate to the same cell, so

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8847-1
00:40:54.098 --> 00:40:56.769
I'll have to resolve this
somehow, and that is the next

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8847-2
00:40:56.769 --> 00:40:57.198
one hour.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8859-0
00:40:58.128 --> 00:41:02.278
Yeah, collision handling or
collision resolution strategies.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8867-0
00:41:02.828 --> 00:41:04.468
There are several ways to deal
with this.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8873-0
00:41:04.958 --> 00:41:06.278
One is called separate chaining.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8881-0
00:41:07.588 --> 00:41:09.528
Yeah, another is called open
addressing.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8887-0
00:41:10.988 --> 00:41:11.838
Very important.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8895-0
00:41:12.388 --> 00:41:15.473
This separate chaining has
another name called open

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8895-1
00:41:15.473 --> 00:41:15.948
hashing.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8911-0
00:41:17.808 --> 00:41:22.480
And this open addressing has
another name called as closed

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8911-1
00:41:22.480 --> 00:41:23.668
hashing, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8923-0
00:41:24.898 --> 00:41:26.808
Can you give some examples of a
good hash function?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8925-0
00:41:26.818 --> 00:41:26.978
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8939-0
00:41:26.988 --> 00:41:31.261
Anything that involves a prime
number is a good hash function,

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8939-1
00:41:31.261 --> 00:41:31.668
right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8957-0
00:41:31.678 --> 00:41:33.835
And which is also easy to
compute, for example the ones

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8957-1
00:41:33.835 --> 00:41:35.068
that we were dealing here right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8972-0
00:41:35.418 --> 00:41:38.348
Like K, modern is a decently
good I know hash function.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8978-0
00:41:38.358 --> 00:41:39.548
It's very quick to compute.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8992-0
00:41:40.258 --> 00:41:42.954
You know you can directly do it
in your, you know, just with the

c665b3ae-097f-4446-a5df-1f0f9956fc9a/8992-1
00:41:42.954 --> 00:41:43.328
register.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9001-0
00:41:43.458 --> 00:41:44.288
No need of anything.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9020-0
00:41:44.738 --> 00:41:48.377
And then it also has no value
which is A1, not one as a prime

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9020-1
00:41:48.377 --> 00:41:48.788
number.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9041-0
00:41:49.198 --> 00:41:51.947
Whereas if you choose N as
hundred, that is bad because it

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9041-1
00:41:51.947 --> 00:41:53.718
will result in a lot more
collisions.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9043-0
00:41:54.928 --> 00:41:55.048
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9049-0
00:41:56.558 --> 00:41:57.188
So these names.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9051-0
00:41:57.198 --> 00:41:57.888
Be careful, guys.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9064-0
00:41:57.898 --> 00:42:00.406
Yeah, a lot of students confuse
open hashing with open

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9064-1
00:42:00.406 --> 00:42:00.908
addressing.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9072-0
00:42:00.918 --> 00:42:03.378
No, just go with these names.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9076-0
00:42:03.388 --> 00:42:03.688
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9091-0
00:42:03.698 --> 00:42:06.488
If you call separate chaining,
you'll have to call it open

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9091-1
00:42:06.488 --> 00:42:07.008
addressing.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9102-0
00:42:07.508 --> 00:42:11.120
If you call these as open
hashing, this is closed hashing,

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9102-1
00:42:11.120 --> 00:42:11.488
right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9116-0
00:42:12.818 --> 00:42:15.398
So in separate training, you
don't have any sub cases.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9137-0
00:42:15.598 --> 00:42:18.930
It is only one technique,
whereas in open addressing or

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9137-1
00:42:18.930 --> 00:42:21.548
closed hashing there are C3 sub
techniques.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9159-0
00:42:22.058 --> 00:42:25.921
You can either do linear probing
or you can do quadratic probing,

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9159-1
00:42:25.921 --> 00:42:28.028
or you can do double hashing
right.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9167-0
00:42:28.038 --> 00:42:30.858
All the three is under open
addressing.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9169-0
00:42:31.758 --> 00:42:32.308
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9190-0
00:42:32.458 --> 00:42:34.659
So Manish has a question, what
should be an optimal value for

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9190-1
00:42:34.659 --> 00:42:35.618
the prime number to choose?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9197-0
00:42:35.628 --> 00:42:36.868
So that depends on the domain.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9200-0
00:42:37.158 --> 00:42:37.468
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9223-0
00:42:37.478 --> 00:42:40.267
So how many keys you are
expecting and what type of

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9223-1
00:42:40.267 --> 00:42:43.218
application you're using and
what is the suitable yen?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9231-0
00:42:43.488 --> 00:42:44.738
Yeah, it should not be very
small.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9239-0
00:42:44.748 --> 00:42:46.798
It should not be very large,
right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9266-0
00:42:47.048 --> 00:42:49.917
And we will also have some
discussions later in the class

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9266-1
00:42:49.917 --> 00:42:52.785
today like what happens when
that table is almost getting

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9266-2
00:42:52.785 --> 00:42:53.478
filled, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9270-0
00:42:53.488 --> 00:42:54.158
What should we do?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9297-0
00:42:54.388 --> 00:42:57.105
Because if you have taken a
wrong choice, if you have taken

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9297-1
00:42:57.105 --> 00:42:59.958
a small prime number right, then
what do we go about it later?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9303-0
00:43:00.348 --> 00:43:01.468
Yeah, we'll discuss about all
that.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9306-0
00:43:03.368 --> 00:43:03.998
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9308-0
00:43:04.228 --> 00:43:04.518
Cool.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9316-0
00:43:04.528 --> 00:43:06.018
So now let's look at separate
chaining.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9324-0
00:43:06.128 --> 00:43:06.918
Yeah, so far, so good.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9328-0
00:43:06.928 --> 00:43:07.418
All of you.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9337-0
00:43:07.528 --> 00:43:09.048
Do you understand what we are
trying to do?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9349-0
00:43:10.118 --> 00:43:13.148
Hashing collisions and now how
do you resolve the collision?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9368-0
00:43:13.618 --> 00:43:16.848
Either you separate or go for
open and separate chaining is

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9368-1
00:43:16.848 --> 00:43:18.678
what now we are going to look
at.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9376-0
00:43:20.918 --> 00:43:22.208
So what does this operate?
Chaining.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9380-0
00:43:22.218 --> 00:43:22.398
OK.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9387-0
00:43:22.408 --> 00:43:23.678
It's a very, very simple
technique.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9398-0
00:43:24.618 --> 00:43:28.728
Colliding item is placed in a
linked list right single line?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9404-0
00:43:30.538 --> 00:43:31.248
Same process.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9412-0
00:43:31.258 --> 00:43:32.708
You have a set of keys coming
in.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9421-0
00:43:33.258 --> 00:43:35.458
You pass each key to the hash
function.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9458-0
00:43:36.288 --> 00:43:40.877
What you get is called as the
hash value and go to that value

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9458-1
00:43:40.877 --> 00:43:45.613
right if it is empty, go ahead
and create a linked list and put

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9458-2
00:43:45.613 --> 00:43:48.278
that link list items address
there.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9479-0
00:43:49.848 --> 00:43:54.990
So technically in this separate
chaining mechanism, RMI actual

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9479-1
00:43:54.990 --> 00:43:57.928
items there inside my bucket
array.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9484-0
00:44:00.248 --> 00:44:00.388
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9494-0
00:44:02.098 --> 00:44:02.278
No.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9488-0
00:44:02.278 --> 00:44:02.808
Is it there?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9495-0
00:44:03.038 --> 00:44:03.748
No, not at all.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9500-0
00:44:03.758 --> 00:44:05.608
It's there outside, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9502-0
00:44:06.228 --> 00:44:06.548
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9524-0
00:44:06.558 --> 00:44:09.004
So there was also another
question where do we use hash

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9524-1
00:44:09.004 --> 00:44:11.058
table practically in most
applications, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9542-0
00:44:11.288 --> 00:44:14.242
You want a lot of quick
searches, then hash table is

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9542-1
00:44:14.242 --> 00:44:15.078
your way right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9556-0
00:44:15.088 --> 00:44:17.958
Because you are not going to
search the complete array.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9566-0
00:44:18.228 --> 00:44:20.678
Rather, you would quickly
calculate the hash value.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9576-0
00:44:20.888 --> 00:44:23.998
You will go to that cell and
only check there, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9585-0
00:44:24.008 --> 00:44:26.248
So it has a lot of advantages
and you know.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9615-0
00:44:28.118 --> 00:44:30.673
So yeah, so each cell in the
array stores a pointer that

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9615-1
00:44:30.673 --> 00:44:33.498
points to a linked list of items
that are mapped to that cell.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9643-0
00:44:34.498 --> 00:44:37.821
Meaning, what can we tell so
about this three items, what can

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9643-1
00:44:37.821 --> 00:44:41.144
we comment about these three
there is one commonality between

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9643-2
00:44:41.144 --> 00:44:42.538
these three, what is that?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9647-0
00:44:45.868 --> 00:44:46.028
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9648-0
00:44:47.128 --> 00:44:47.358
He.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9651-0
00:44:49.988 --> 00:44:50.438
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9656-0
00:44:50.448 --> 00:44:50.978
What was that?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9661-0
00:44:50.988 --> 00:44:51.308
So we.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9663-0
00:44:52.278 --> 00:44:52.718
He.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9670-0
00:44:54.348 --> 00:44:54.618
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9681-0
00:44:54.618 --> 00:44:55.138
The similar.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9673-0
00:44:54.628 --> 00:44:55.078
Come again?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9691-0
00:44:55.088 --> 00:44:59.448
Is it really a key or is it the
hashed value? Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9702-0
00:44:59.158 --> 00:45:01.428
Uh has value has finished?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9697-0
00:45:01.458 --> 00:45:01.948
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9728-0
00:45:02.038 --> 00:45:06.191
So these but but you were on
another angle right there could

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9707-0
00:45:02.078 --> 00:45:02.608
That's really.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9736-0
00:45:04.928 --> 00:45:08.288
But but but both both thing is
correct.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9728-1
00:45:06.191 --> 00:45:08.098
be all the three items same.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9734-0
00:45:08.838 --> 00:45:09.678
Yeah, both are correct.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9740-0
00:45:09.688 --> 00:45:10.288
Exactly right.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9767-0
00:45:10.298 --> 00:45:13.920
We saw about these line right
collision can happen when

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9767-1
00:45:13.920 --> 00:45:17.930
multiple items have the same key
or their hash value are same

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9767-2
00:45:17.930 --> 00:45:18.318
right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9793-0
00:45:18.328 --> 00:45:21.685
Either there is a case where all
these items themselves are

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9793-1
00:45:21.685 --> 00:45:24.875
exactly the same, meaning
duplicate data, or these items

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9793-2
00:45:24.875 --> 00:45:25.938
could be different.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9816-0
00:45:26.288 --> 00:45:30.159
But after I applied the hash
function, the hashed value for

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9816-1
00:45:30.159 --> 00:45:33.128
all of them has resulted in this
file, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9820-0
00:45:33.138 --> 00:45:33.888
That is what this means.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9834-0
00:45:35.648 --> 00:45:37.178
So let's go ahead and do some
other ways.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9844-0
00:45:37.188 --> 00:45:39.158
It is a null like all these
1011.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9857-0
00:45:39.168 --> 00:45:42.298
You know these places are all
null, so let's you know.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9868-0
00:45:43.048 --> 00:45:45.539
Of course, this requires
additional memory apart from the

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9868-1
00:45:45.539 --> 00:45:46.098
table, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9882-0
00:45:46.108 --> 00:45:48.958
So in this case now I have this
bucket array.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9888-0
00:45:49.468 --> 00:45:50.858
I have the hash function.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9896-0
00:45:51.148 --> 00:45:54.248
I have this whole additional
space for linked list also.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9908-0
00:45:56.128 --> 00:45:58.018
There's a question no for you.
Separate chaining.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9938-0
00:45:58.208 --> 00:46:01.018
Insert the elements using
separate chaining in this order

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9938-1
00:46:01.018 --> 00:46:03.876
into an initially empty hash
table using the hash function

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9938-2
00:46:03.876 --> 00:46:05.378
hash of K is equal to K mod 13.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9953-0
00:46:05.768 --> 00:46:10.808
If I were you, the moment I read
till here, I will note down.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9958-0
00:46:10.818 --> 00:46:12.208
What is this 13?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9961-0
00:46:12.218 --> 00:46:12.678
What is this?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9982-0
00:46:15.058 --> 00:46:17.608
This conveys the yeah prime
number.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9980-0
00:46:15.378 --> 00:46:15.918
Prime number.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9981-0
00:46:15.498 --> 00:46:15.998
Prime number.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9985-0
00:46:15.628 --> 00:46:16.298
Trying to move.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/9996-0
00:46:17.618 --> 00:46:19.868
Yeah, but what exactly is this
in our use case?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10014-0
00:46:19.878 --> 00:46:23.088
Yeah, it is exactly this.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10016-0
00:46:20.738 --> 00:46:22.428
Can minus one buckets, yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10018-0
00:46:22.408 --> 00:46:22.588
And.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10020-0
00:46:23.098 --> 00:46:24.568
Then this is capital yen.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10024-0
00:46:24.698 --> 00:46:25.548
Yeah, very good.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10028-0
00:46:25.558 --> 00:46:26.248
SURENDRA was right.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10042-0
00:46:26.258 --> 00:46:30.088
This is capital N which denotes
the capacity of my bucket array.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10063-0
00:46:30.598 --> 00:46:34.318
So if this is 13, I'm going to
have my cells from zero to 12.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10079-0
00:46:35.178 --> 00:46:38.008
Show your work step by step and
we have been given some keys.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10091-0
00:46:38.618 --> 00:46:42.748
So the very first step is to
calculate the hash value, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10099-0
00:46:43.078 --> 00:46:44.038
Can you real quick do that?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10131-0
00:46:46.108 --> 00:46:49.684
Hash function is already given,
so this K is 90 then it is 41

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10114-0
00:46:46.928 --> 00:46:47.628
So so.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10131-1
00:46:49.684 --> 00:46:51.068
then it is 36 and so on.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10134-0
00:46:52.388 --> 00:46:53.108
So 12.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10141-0
00:46:54.788 --> 00:46:55.058
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10144-0
00:46:55.068 --> 00:46:56.078
What was twelve?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10148-0
00:46:56.188 --> 00:46:56.678
I didn't get that.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10186-0
00:46:58.898 --> 00:47:03.803
To 13 is your capital N yeah, 13
is your capital N meaning you

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10163-0
00:46:59.918 --> 00:47:00.708
And then 12.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10174-0
00:47:02.868 --> 00:47:03.058
On.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10186-1
00:47:03.803 --> 00:47:08.631
have cells going from zero to
12, but 13 slots are available,

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10186-2
00:47:08.631 --> 00:47:09.098
right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10198-0
00:47:11.548 --> 00:47:15.658
So this this data structure is
created by US Pranav.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10207-0
00:47:15.958 --> 00:47:17.808
So this is a array data
structure.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10225-0
00:47:17.818 --> 00:47:21.462
This full is a linked list, so
we are only creating this using

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10225-1
00:47:21.462 --> 00:47:23.198
two different data structures.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10239-0
00:47:24.368 --> 00:47:26.648
Yeah, it is not one out of the
box 1.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10237-0
00:47:25.068 --> 00:47:25.398
Please.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10246-0
00:47:27.728 --> 00:47:28.198
Have.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10270-0
00:47:28.848 --> 00:47:33.135
Can someone quickly tell me
these hashed values 90 mod 1341

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10270-1
00:47:33.135 --> 00:47:34.278
mod 1336 mod 13?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10294-0
00:47:34.768 --> 00:47:39.358
Yeah, so 1212205.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10297-0
00:47:35.518 --> 00:47:40.648
No, switch to 10 by two, but.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10299-0
00:47:38.768 --> 00:47:41.158
Yeah, 12 to 10/5 to 12 to 10.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10298-0
00:47:41.908 --> 00:47:42.198
Umm.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10311-0
00:47:42.768 --> 00:47:46.778
Yeah, this is the hash value
right now.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10329-0
00:47:46.788 --> 00:47:49.792
We will be going ahead and, you
know, storing these using our

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10329-1
00:47:49.792 --> 00:47:50.858
linked list and so on.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10350-0
00:47:51.268 --> 00:47:53.599
So Sriram had a question, is
there any order to be maintained

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10350-1
00:47:53.599 --> 00:47:55.178
when we are storing the data in
language?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10356-0
00:47:55.188 --> 00:47:55.838
No, not at all.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10363-0
00:47:56.168 --> 00:47:58.008
Yeah, that that hardly matters.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10387-0
00:47:58.018 --> 00:48:01.318
Yeah, based on the way the keys
came in and based on the

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10387-1
00:48:01.318 --> 00:48:02.998
insertion sequence, it is it.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10401-0
00:48:03.468 --> 00:48:07.318
So in between these two there is
no relation, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10404-0
00:48:05.738 --> 00:48:06.438
First one to you.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10421-0
00:48:07.328 --> 00:48:10.750
So this item is not related to
this or this item is not related

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10421-1
00:48:10.750 --> 00:48:11.178
to this.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10435-0
00:48:11.568 --> 00:48:14.875
The only commonalities they all
ultimately pointed or collided

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10435-1
00:48:14.875 --> 00:48:15.558
to this cell.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10437-0
00:48:16.908 --> 00:48:17.538
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10441-0
00:48:17.628 --> 00:48:18.458
Yeah, someone has.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10449-0
00:48:18.468 --> 00:48:19.758
Uh, yeah, you can also mute.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10475-0
00:48:19.768 --> 00:48:22.997
I mean, if someone is uh, you
know, unmuted, you can just

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10475-1
00:48:22.997 --> 00:48:26.338
maybe ping them or, you know,
try to mute them. No problem.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10483-0
00:48:26.348 --> 00:48:28.158
Yeah, I don't have a problem
with that.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10486-0
00:48:29.988 --> 00:48:30.418
Right.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10488-0
00:48:30.428 --> 00:48:30.738
Cool.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10520-0
00:48:30.958 --> 00:48:34.732
So the similar structure we have
seen somewhere and they're also

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10520-1
00:48:34.732 --> 00:48:38.507
we had told there is no relation
between this item and this item

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10520-2
00:48:38.507 --> 00:48:39.088
and so on.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10530-0
00:48:39.418 --> 00:48:40.378
What was that concept?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10533-0
00:48:39.978 --> 00:48:41.398
Exit adjacency list.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10534-0
00:48:42.418 --> 00:48:42.758
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10537-0
00:48:42.768 --> 00:48:43.678
Perfect, very good.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10540-0
00:48:47.268 --> 00:48:47.598
Cool.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10553-0
00:48:47.608 --> 00:48:50.338
So then let's you know, go ahead
and insert these items.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10571-0
00:48:50.468 --> 00:48:52.741
Please were given hash function
is given you have already

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10571-1
00:48:52.741 --> 00:48:53.878
calculated the hashed values.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10580-0
00:48:54.228 --> 00:48:55.638
So now we will have to insert
it.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10595-0
00:48:56.068 --> 00:48:59.538
So I've created a table with
size 13 going from zero to 12.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10615-0
00:49:00.028 --> 00:49:04.621
I'll have to store these keys in
this hashed value, so 90 goes to

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10615-1
00:49:04.621 --> 00:49:05.248
12 right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10625-0
00:49:05.258 --> 00:49:06.828
Should I directly put this 19
inside this?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10659-0
00:49:07.998 --> 00:49:12.834
No, I'll create a linked list
node and put 90 there and make

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10639-0
00:49:09.598 --> 00:49:09.898
11.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10659-1
00:49:12.834 --> 00:49:17.908
this point to that node because
we are using separate chaining.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10679-0
00:49:18.638 --> 00:49:22.588
Next is 4141 should go to two,
so here I will create a node.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10686-0
00:49:22.598 --> 00:49:23.248
I'll put it there.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10692-0
00:49:23.678 --> 00:49:27.628
3636 should go to 10, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10696-0
00:49:28.848 --> 00:49:29.398
I came here.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10709-0
00:49:29.408 --> 00:49:30.998
It was null so I created this in
a.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10722-0
00:49:31.008 --> 00:49:34.938
Note I inserted it and now 1818
should go to five.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10738-0
00:49:34.988 --> 00:49:38.158
I come here 5 is null so I
create a node.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10746-0
00:49:38.168 --> 00:49:39.818
I make it to point to that 18.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10762-0
00:49:40.668 --> 00:49:43.058
Then you have 2828 is again
going to two.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10767-0
00:49:43.628 --> 00:49:44.378
So I came here.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10802-0
00:49:44.388 --> 00:49:48.912
I see it is non empty, meaning
there is already some element

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10802-1
00:49:48.912 --> 00:49:53.808
who has its hash value as to and
now there is a new element which

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10802-2
00:49:53.808 --> 00:49:54.698
is also two.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10808-0
00:49:54.748 --> 00:49:55.698
So what does that imply?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10813-0
00:49:55.758 --> 00:49:56.568
What has happened here?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10822-0
00:49:57.918 --> 00:49:59.178
What phenomenon has happened?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10825-0
00:50:00.668 --> 00:50:01.088
Collision.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10833-0
00:50:01.688 --> 00:50:02.038
Well, listen.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10845-0
00:50:01.848 --> 00:50:05.898
Great collision has happened, so
I will now create a new Note 28.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10853-0
00:50:06.248 --> 00:50:07.938
I will first traverse from 41.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10857-0
00:50:07.948 --> 00:50:08.638
I'll see.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10863-0
00:50:08.748 --> 00:50:10.338
Is it already connected with
something?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10869-0
00:50:10.348 --> 00:50:10.958
No, it was not.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10882-0
00:50:10.968 --> 00:50:13.838
This was empty, so I made this
point to 28.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10904-0
00:50:14.088 --> 00:50:16.787
That doesn't mean you know there
is a relation between this node,

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10904-1
00:50:16.787 --> 00:50:18.628
and this is only the pointers
are connected.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10907-0
00:50:19.538 --> 00:50:19.678
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10925-0
00:50:20.788 --> 00:50:26.108
And the next one was 1212, again
had a cash value of 12.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10938-0
00:50:26.378 --> 00:50:27.948
So I go to 12, it is non empty.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10947-0
00:50:27.958 --> 00:50:29.968
So I come here, I see 90s there.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10973-0
00:50:30.078 --> 00:50:34.318
It's next part is empty, so I
pointed to a new node which is

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10973-1
00:50:34.318 --> 00:50:37.308
going to have this 54 again
points to two.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10979-0
00:50:37.318 --> 00:50:38.328
I come here collision.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/10993-0
00:50:38.858 --> 00:50:41.668
I come here, 41 is already
there, 20 is already there.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11012-0
00:50:42.058 --> 00:50:45.497
Then this next part will point
to a new node which will have me

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11012-1
00:50:45.497 --> 00:50:45.658
54.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11020-0
00:50:46.508 --> 00:50:48.008
Finally, 1010 goes to 10.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11030-0
00:50:48.448 --> 00:50:50.418
Then it's already having you
know, some values.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11042-0
00:50:50.608 --> 00:50:53.798
So go here, create a new node,
attach it.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11050-0
00:50:54.308 --> 00:50:57.388
So I'm done with the insertion
right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11059-0
00:50:57.688 --> 00:50:59.238
So now I have a question for you
here.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11070-0
00:51:01.618 --> 00:51:03.918
What is the capital N in this
example?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11081-0
00:51:08.048 --> 00:51:09.208
13 umm.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11082-0
00:51:08.058 --> 00:51:09.998
Yeah, team correct.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11096-0
00:51:11.188 --> 00:51:14.951
Now I'm making a statement in
this separate chaining

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11096-1
00:51:14.951 --> 00:51:16.158
mechanism, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11110-0
00:51:16.168 --> 00:51:20.328
I'm claiming that I will be able
to store 10,000 items.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11116-0
00:51:20.868 --> 00:51:21.868
Am I true or false here?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11137-0
00:51:24.048 --> 00:51:29.068
Yeah, in this exact same
example, I can tour 10,000.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11136-0
00:51:27.268 --> 00:51:28.098
Hopefully yes.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11145-0
00:51:30.978 --> 00:51:31.098
Yes.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11150-0
00:51:31.908 --> 00:51:32.408
This will get.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11153-0
00:51:32.718 --> 00:51:33.748
As a link list, yes.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11154-0
00:51:34.508 --> 00:51:34.648
Yes.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11175-0
00:51:35.658 --> 00:51:39.270
Yeah, that is true, because in
separate chaining you are not

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11175-1
00:51:39.270 --> 00:51:40.928
storing in the table at all.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11186-0
00:51:40.998 --> 00:51:44.355
Anyway, these items are stored
outside, so let collisions keep

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11186-1
00:51:44.355 --> 00:51:44.888
happening.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11199-0
00:51:44.898 --> 00:51:46.948
You will keep putting that in
the linked list nodes.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11205-0
00:51:46.958 --> 00:51:48.848
There is no problem, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11216-0
00:51:49.638 --> 00:51:51.788
So, Kapil says, uh, why to
always put that?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11218-0
00:51:51.798 --> 00:51:52.018
Uh.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11237-0
00:51:52.028 --> 00:51:55.208
End of list uh we can add just
as a first entry in the list.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11243-0
00:51:55.218 --> 00:51:56.828
Also, or would that be wrong?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11261-0
00:51:56.898 --> 00:51:59.968
It will not be wrong, but what
if I always already have a

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11261-1
00:51:59.968 --> 00:52:00.498
duplicate?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11279-0
00:52:01.298 --> 00:52:05.405
For example, I wanted to insert
54 if I don't traverse this

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11279-1
00:52:05.405 --> 00:52:05.748
list.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11297-0
00:52:05.758 --> 00:52:09.629
If I just keep on adding in the
beginning, what if there was

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11297-1
00:52:09.629 --> 00:52:10.898
already a 54, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11324-0
00:52:10.998 --> 00:52:15.164
So by traversing this I want to
be sure that that item is not

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11324-1
00:52:15.164 --> 00:52:17.248
there if that exact item right.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11352-0
00:52:17.518 --> 00:52:21.519
So two items colliding to the
same hash value is no problem,

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11352-1
00:52:21.519 --> 00:52:25.324
but if two exact items are the
same then there could be a

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11352-2
00:52:25.324 --> 00:52:26.308
problem, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11371-0
00:52:26.318 --> 00:52:30.158
Most hashing applications will
not allow two people to have

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11371-1
00:52:30.158 --> 00:52:31.758
exactly same item or key.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11383-0
00:52:32.598 --> 00:52:36.288
Hash value is OK, but do we have
two other numbers as same?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11385-0
00:52:36.678 --> 00:52:37.348
No, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11414-0
00:52:37.638 --> 00:52:40.608
So in those cases I don't want
to allow duplicates, so I'll

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11414-1
00:52:40.608 --> 00:52:42.588
traverse here and I'll also do a
check.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11429-0
00:52:42.738 --> 00:52:45.248
Or am I inserting a unique value
or is it already there?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11460-0
00:52:45.498 --> 00:52:49.003
But if you just insert it at the
beginning, then you might lose

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11460-1
00:52:49.003 --> 00:52:52.343
out on such, you know small
checks someone was telling about

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11460-2
00:52:52.343 --> 00:52:54.808
collisions or complexity, which
was correct.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11464-0
00:52:55.278 --> 00:52:55.588
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11470-0
00:52:55.598 --> 00:52:58.208
It's big of north, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11475-0
00:52:59.998 --> 00:53:00.978
So far so good, all of you.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11489-0
00:53:03.958 --> 00:53:06.768
If exact item we have then what
we will not insert right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11494-0
00:53:06.778 --> 00:53:07.258
Yeah, we will not.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11524-0
00:53:07.268 --> 00:53:09.899
We will just throw an error
telling that no, there is some

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11524-1
00:53:09.899 --> 00:53:12.575
problem and we will not insert
it if exactly 2 items have a

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11524-2
00:53:12.575 --> 00:53:12.798
same.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11528-0
00:53:13.858 --> 00:53:14.348
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11532-0
00:53:14.788 --> 00:53:15.708
So this is the same thing.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11551-0
00:53:18.148 --> 00:53:20.771
Uh, I have just put the, you
know, actual diagram from here

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11551-1
00:53:20.771 --> 00:53:21.558
this week created.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11558-0
00:53:25.758 --> 00:53:26.128
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11560-0
00:53:26.138 --> 00:53:26.688
Understood. Kamal.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11564-0
00:53:26.698 --> 00:53:27.198
Yeah, that's fine.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11569-0
00:53:27.208 --> 00:53:27.548
That's fine.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11576-0
00:53:27.558 --> 00:53:28.468
That's how you have to try.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11609-0
00:53:28.478 --> 00:53:30.631
That's the right way of
thinking, but in this case, for

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11609-1
00:53:30.631 --> 00:53:32.900
example, you want to allow
duplicates in your application,

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11609-2
00:53:32.900 --> 00:53:34.708
you are not bothered and that's
the right way.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11629-0
00:53:34.718 --> 00:53:38.077
You can always, you know, add
something to the beginning of

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11629-1
00:53:38.077 --> 00:53:40.148
it, but there is also another
doubt.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11642-0
00:53:41.288 --> 00:53:43.878
These are all singly linked
lists, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11652-0
00:53:44.578 --> 00:53:47.048
So how do you go about doing it?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11687-0
00:53:47.058 --> 00:53:50.410
So firstly you have to come to
two, then take this guy's

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11687-1
00:53:50.410 --> 00:53:54.174
address and modify the new nodes
next part and then you'll have

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11687-2
00:53:54.174 --> 00:53:55.938
to point this to the new node.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11691-0
00:53:56.968 --> 00:53:57.518
Is that correct?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11714-0
00:53:57.528 --> 00:54:00.888
All of you linklist concepts,
even if you want to add in the

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11714-1
00:54:00.888 --> 00:54:03.588
beginning, you can't just
randomly add him here.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11735-0
00:54:03.638 --> 00:54:06.996
You'll have to first take this
40 ones address from here and

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11735-1
00:54:06.996 --> 00:54:08.428
add them in our new nodes.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11740-0
00:54:08.438 --> 00:54:08.998
Next part.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11747-0
00:54:09.008 --> 00:54:11.468
Otherwise you'll lose this whole
link list, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11772-0
00:54:11.478 --> 00:54:14.415
If you just randomly, you know,
put the new nodes address here,

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11772-1
00:54:14.415 --> 00:54:17.168
you'll lose this part, so it
should be really careful doing

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11772-2
00:54:17.168 --> 00:54:17.398
that.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11812-0
00:54:18.508 --> 00:54:21.744
Cool, now we have understood
about insertion and there is no

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11812-1
00:54:21.744 --> 00:54:24.821
limitation you can do any number
of insertion in separate

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11812-2
00:54:24.821 --> 00:54:28.163
chaining because ultimately you
are not using this bucket, you

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11812-3
00:54:28.163 --> 00:54:29.808
are putting it in linked lists.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11820-0
00:54:31.638 --> 00:54:33.408
Right, this is exactly the same,
uh.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11852-0
00:54:33.418 --> 00:54:36.923
Declare an array, initialize it
to null, find the hash key if

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11852-1
00:54:36.923 --> 00:54:40.485
that you know key position is
null then make that point to the

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11852-2
00:54:40.485 --> 00:54:40.768
node.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11863-0
00:54:41.058 --> 00:54:42.828
Otherwise, it means it is a
collision.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11874-0
00:54:43.118 --> 00:54:45.208
So insert the keynote at the end
of the chain.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11883-0
00:54:46.898 --> 00:54:48.148
Now we want to do some searches.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11890-0
00:54:48.738 --> 00:54:50.448
Yeah, my hash table is created.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11904-0
00:54:50.458 --> 00:54:52.478
I want to search for some keys
in that table.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11908-0
00:54:53.478 --> 00:54:54.948
What should they do exactly?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11912-0
00:54:54.958 --> 00:54:56.508
Same concept, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11942-0
00:54:56.958 --> 00:55:01.230
Compute I is equal to H of K,
right meaning whatever key Ki

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11942-1
00:55:01.230 --> 00:55:05.288
want to search, give it again to
the same hash function.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11950-0
00:55:05.358 --> 00:55:06.908
Don't use other hash functions
right.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11962-0
00:55:07.378 --> 00:55:09.398
Whatever you used for insertion,
it is the same thing.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11972-0
00:55:10.258 --> 00:55:12.768
Pass it to the same hash
function.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11992-0
00:55:13.118 --> 00:55:16.591
You will get something called as
H of K which is the hash value,

c665b3ae-097f-4446-a5df-1f0f9956fc9a/11992-1
00:55:16.591 --> 00:55:18.088
or in other words the index.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12001-0
00:55:18.698 --> 00:55:20.148
Go to that particular cell.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12024-0
00:55:20.998 --> 00:55:26.178
If that particular cell is
empty, then what can I say if I

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12024-1
00:55:26.178 --> 00:55:29.778
come here, I get someone's key
as seven.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12033-0
00:55:29.788 --> 00:55:30.798
I come here it is null.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12039-0
00:55:31.158 --> 00:55:33.318
It means definitely there is
nothing here right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12067-0
00:55:33.328 --> 00:55:37.782
So I can tell that key is not
there no key, but if that key is

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12067-1
00:55:37.782 --> 00:55:41.318
not null then if the key exists
return the index.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12090-0
00:55:42.558 --> 00:55:45.377
So basically we have to traverse
that list if it is there, so

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12090-1
00:55:45.377 --> 00:55:46.468
we'll see some examples.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12099-0
00:55:46.478 --> 00:55:48.268
Now let's consider the same
example.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12109-0
00:55:48.658 --> 00:55:50.478
I want to search if 10 is there
or not.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12116-0
00:55:51.798 --> 00:55:52.598
So what should I be doing?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12121-0
00:55:54.108 --> 00:55:55.888
What is 10 mod 13?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12143-0
00:55:57.828 --> 00:56:00.778
Yeah, real quick 10 mod 1310
more 13 is 10 only.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12150-0
00:55:59.658 --> 00:56:01.268
And then anything.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12141-0
00:55:59.708 --> 00:55:59.998
Ohh.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12145-0
00:56:01.908 --> 00:56:02.238
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12160-0
00:56:02.288 --> 00:56:04.118
How is equal to 10 more 13 which
is 10.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12173-0
00:56:04.128 --> 00:56:06.058
So you go to ARAY which is a of
10.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12186-0
00:56:06.548 --> 00:56:08.608
You see, this is not null, so
you have to traverse.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12209-0
00:56:08.968 --> 00:56:12.473
You first go to 3636 is not
equal to 10, so you then again

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12209-1
00:56:12.473 --> 00:56:14.078
traverse 10 is equal to 10.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12214-0
00:56:14.208 --> 00:56:15.178
So search is successful.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12216-0
00:56:15.938 --> 00:56:16.388
Perfect.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12220-0
00:56:16.638 --> 00:56:17.308
What about 20?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12231-0
00:56:18.728 --> 00:56:21.378
What is 20 more 1320 more?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12247-0
00:56:21.388 --> 00:56:25.318
13 is 7, so you come to a of I,
which is a of seven.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12236-0
00:56:21.578 --> 00:56:21.938
7.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12259-0
00:56:25.668 --> 00:56:28.138
You go here, you see directly
here itself.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12261-0
00:56:28.148 --> 00:56:28.758
This is null.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12288-0
00:56:28.988 --> 00:56:32.501
There is no node or linked list
attached to this, so directly

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12288-1
00:56:32.501 --> 00:56:35.618
you can confirm that 20 is not
there in my hash table.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12306-0
00:56:36.028 --> 00:56:38.491
But if it was an array, you
should have done a linear search

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12306-1
00:56:38.491 --> 00:56:39.258
or a binary search.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12314-0
00:56:39.748 --> 00:56:41.508
But here what is the search
complexity?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12321-0
00:56:42.898 --> 00:56:44.308
It's constant here, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12330-0
00:56:44.738 --> 00:56:46.768
In this case, for 20 it is
constant.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12334-0
00:56:46.818 --> 00:56:47.508
You just come here.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12343-0
00:56:47.518 --> 00:56:48.888
You declare the 20 is not there.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12347-0
00:56:49.588 --> 00:56:50.468
What about 15?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12364-0
00:56:51.648 --> 00:56:55.618
What is 15 mod 13 Teen Mod 13 is
2.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12366-0
00:56:54.838 --> 00:56:55.008
2.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12372-0
00:56:56.148 --> 00:56:57.298
You go to a of two.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12386-0
00:56:57.368 --> 00:56:59.808
You realize it is not null, so
you have to traverse.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12407-0
00:57:00.188 --> 00:57:05.378
You go to 4141 is not 1528, is
not 1554 is not 15.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12420-0
00:57:05.488 --> 00:57:09.512
So at this point is when you
declare that 15 is not there,

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12420-1
00:57:09.512 --> 00:57:10.058
correct?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12429-0
00:57:11.218 --> 00:57:12.948
So what is the worst case here?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12437-0
00:57:13.398 --> 00:57:15.448
What is the worst case
complexity of search?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12452-0
00:57:18.528 --> 00:57:20.198
The one who answers gets a
goodie here.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12457-0
00:57:19.188 --> 00:57:19.788
Big open.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12470-0
00:57:20.668 --> 00:57:23.798
Yeah, because N again, correct,
people might go for.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12459-0
00:57:20.958 --> 00:57:21.268
Uh.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12476-0
00:57:23.148 --> 00:57:25.748
Or, uh, ego and so.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12472-0
00:57:25.358 --> 00:57:25.538
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12478-0
00:57:26.688 --> 00:57:27.418
Yeah, that's right.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12514-0
00:57:27.428 --> 00:57:30.618
Because if it is again skewed,
if all my N have colliding and

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12514-1
00:57:30.618 --> 00:57:33.448
of all of them are like this,
then I'll have to end up

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12514-2
00:57:33.448 --> 00:57:34.838
traversing this whole list.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12524-0
00:57:35.068 --> 00:57:37.478
So we go off North is my worst
case.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12535-0
00:57:39.148 --> 00:57:41.438
There's some small differences
for quiz and so on.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12537-0
00:57:41.448 --> 00:57:41.818
Right.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12554-0
00:57:42.188 --> 00:57:44.808
Is a difference between separate
chaining and open addressing.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12575-0
00:57:45.868 --> 00:57:50.012
So in separate chaining, the
keys are stored inside the hash

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12575-1
00:57:50.012 --> 00:57:52.798
table as well as outside the
hash table.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12582-0
00:57:52.808 --> 00:57:53.898
It's a little misleading.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12593-0
00:57:54.268 --> 00:57:56.658
This inside is not the actual
value, it is just.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12602-0
00:57:56.668 --> 00:57:59.618
This addresses the address of
the first node, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12627-0
00:57:59.808 --> 00:58:03.800
Ultimately, this table still has
some data inside them which is

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12627-1
00:58:03.800 --> 00:58:06.608
going to take you to the actual
data, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12633-0
00:58:06.618 --> 00:58:08.058
These addresses are metadata.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12642-0
00:58:08.348 --> 00:58:10.748
It is having something factual.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12661-0
00:58:10.758 --> 00:58:14.268
Keys are outside in the linked
list, but very important

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12661-1
00:58:14.268 --> 00:58:16.148
difference in open addressing.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12676-0
00:58:16.258 --> 00:58:18.659
Open addressing has three
techniques, linear, probing,

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12676-1
00:58:18.659 --> 00:58:20.188
quadratic probing, double
hashing.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12693-0
00:58:20.718 --> 00:58:24.915
In all of them, all the keys are
stored only inside the hash

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12693-1
00:58:24.915 --> 00:58:25.328
table.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12711-0
00:58:26.168 --> 00:58:30.292
No keys present outside the hash
table, and you cannot use any

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12711-1
00:58:30.292 --> 00:58:31.798
extra memory, anything.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12724-0
00:58:31.848 --> 00:58:34.988
The actual array itself will be
used only that should be used.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12731-0
00:58:36.398 --> 00:58:37.528
You have a deletion is easier.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12739-0
00:58:37.538 --> 00:58:39.498
How would you do delete again?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12742-0
00:58:39.508 --> 00:58:40.358
Same concept, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12759-0
00:58:40.608 --> 00:58:43.738
If you want to delete say 10, I
will first try to find him.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12775-0
00:58:43.788 --> 00:58:47.293
If I find him, I'll knock him
off and I'll make that next part

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12775-1
00:58:47.293 --> 00:58:47.738
as null.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12780-0
00:58:48.758 --> 00:58:49.408
Yeah, deletion.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12790-0
00:58:49.418 --> 00:58:51.088
Is it clear for all of you
separate chaining?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12811-0
00:58:51.598 --> 00:58:54.576
Firstly, you will do a search if
you find it, you will go ahead

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12811-1
00:58:54.576 --> 00:58:55.228
and delete it.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12824-0
00:58:56.258 --> 00:58:58.778
If I want to deal this 28, it's
a little tricky, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12843-0
00:58:59.648 --> 00:59:04.393
I love to join this 41 to 54 and
then only delete this 28

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12843-1
00:59:04.393 --> 00:59:05.048
correct?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12868-0
00:59:05.058 --> 00:59:08.957
I cannot just randomly delete
this and keep quiet, so I'll

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12868-1
00:59:08.957 --> 00:59:10.808
have to point the 28th next.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12877-0
00:59:11.758 --> 00:59:14.128
You know, this guy has to become
41 next.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12880-0
00:59:15.738 --> 00:59:15.958
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12885-0
00:59:15.968 --> 00:59:16.788
Are you getting this?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12887-0
00:59:16.858 --> 00:59:17.138
Yes.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12889-0
00:59:17.148 --> 00:59:17.488
No, maybe.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12896-0
00:59:19.588 --> 00:59:20.738
Deletion right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12913-0
00:59:20.808 --> 00:59:23.561
If it's only one like this
deleted if it's the last leaf,

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12913-1
00:59:23.561 --> 00:59:24.178
just deleted.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12929-0
00:59:24.448 --> 00:59:26.538
If it's somewhere in the middle,
and so on, you'll have to.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12934-0
00:59:27.148 --> 00:59:29.198
The simple linked list deletion
concepts.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12936-0
00:59:30.148 --> 00:59:30.738
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12960-0
00:59:30.788 --> 00:59:32.945
So there are a lot of other
differences like these, so you

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12960-1
00:59:32.945 --> 00:59:34.298
can just, you know, go through
them.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12969-0
00:59:34.608 --> 00:59:36.478
And now we'll take a very quick
break.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12995-0
00:59:36.588 --> 00:59:40.809
We'll come back by, say, 5:00
o'clock and we will again resume

c665b3ae-097f-4446-a5df-1f0f9956fc9a/12995-1
00:59:40.809 --> 00:59:44.428
with this open addressing the
three schemes under it.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13007-0
00:59:45.938 --> 00:59:46.978
Yeah, we'll have a look at that.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13020-0
00:59:46.148 --> 00:59:50.154
Yeah, that I have a query
regarding the assignment which

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13020-1
00:59:50.154 --> 00:59:51.208
you have given.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13044-0
00:59:51.708 --> 00:59:57.895
So so yeah, suppose like one of
our teammate, he has uploaded

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13024-0
00:59:51.738 --> 00:59:52.288
Yeah, go ahead.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13044-1
00:59:57.895 --> 01:00:01.588
the assignment zip file from Mac
OS.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13056-0
01:00:01.638 --> 01:00:04.388
And what happened like while
uploading?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13050-0
01:00:02.678 --> 01:00:02.878
Uh-huh.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13074-0
01:00:04.858 --> 01:00:09.162
Like when I when I try to just
verify whether this like file

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13061-0
01:00:04.978 --> 01:00:05.168
Uh-huh.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13074-1
01:00:09.162 --> 01:00:11.208
was uploaded properly or not.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13109-0
01:00:11.478 --> 01:00:15.501
So where we I downloaded it and
in my system I can see there is

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13109-1
01:00:15.501 --> 01:00:17.638
an extra folder with name Mac
OS.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13106-0
01:00:17.368 --> 01:00:18.358
Yeah, that that's fine.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13116-0
01:00:18.368 --> 01:00:19.268
Mac OSX, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13120-0
01:00:19.218 --> 01:00:20.528
That's right, it's fine.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13122-0
01:00:20.208 --> 01:00:20.838
Yeah, that's fine.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13130-0
01:00:20.538 --> 01:00:21.128
No Sir.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13126-0
01:00:20.848 --> 01:00:21.338
That's fine.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13140-0
01:00:21.188 --> 01:00:21.728
That's all OK.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13146-0
01:00:21.518 --> 01:00:22.208
Then you should.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13149-0
01:00:22.658 --> 01:00:23.288
OK. OK.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13158-0
01:00:22.778 --> 01:00:23.678
Yeah, not a problem that.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13160-0
01:00:23.298 --> 01:00:24.508
Thank you. Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13167-0
01:00:25.738 --> 01:00:27.958
Then the file should be PDF or
DOC.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13194-0
01:00:27.968 --> 01:00:31.596
Uh doc filter because in the
assignment it is mentioned

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13194-1
01:00:31.596 --> 01:00:32.438
docks, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13197-0
01:00:32.198 --> 01:00:33.868
Yeah, it was a little bit
confusing.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13213-0
01:00:33.878 --> 01:00:36.018
We we uploaded the docs file
only.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13209-0
01:00:36.538 --> 01:00:36.958
That's what.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13211-0
01:00:36.968 --> 01:00:37.638
That's also fine.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13271-0
01:00:37.648 --> 01:00:41.551
Yeah, as long as it is readable
document it is fine, but the

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13233-0
01:00:41.048 --> 01:00:41.398
Umm.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13271-1
01:00:41.551 --> 01:00:45.711
whole thing should be a zip file
inside that zip file you should

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13271-2
01:00:45.711 --> 01:00:49.870
have one contribution file Excel
file and then either a PDF or a

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13271-3
01:00:49.870 --> 01:00:53.198
doc file and one actual Python
source program. Yep.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13297-0
01:00:53.228 --> 01:00:57.118
So then one more query, the
content like the design

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13297-1
01:00:57.118 --> 01:01:01.531
document, we have 4 pages, OK
the first page and have some

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13290-0
01:00:59.618 --> 01:00:59.798
Uh-huh.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13297-2
01:01:01.531 --> 01:01:02.878
team info and all.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13333-0
01:01:03.048 --> 01:01:06.453
So including that team info
page, it should be 4 page or

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13309-0
01:01:03.478 --> 01:01:03.658
Uh-huh.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13333-1
01:01:06.453 --> 01:01:07.528
excluding that it.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13326-0
01:01:07.298 --> 01:01:08.448
No, no, all that is fine.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13328-0
01:01:08.458 --> 01:01:08.728
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13389-0
01:01:08.738 --> 01:01:11.971
So as long as you know it's not
a very lengthy like 1020 page

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13389-1
01:01:11.971 --> 01:01:15.308
document, we are OK with it like
a little bit here and there is

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13389-2
01:01:15.308 --> 01:01:18.594
still fine like 5 pages, 6 pages
etcetera is OK because anyway

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13389-3
01:01:18.594 --> 01:01:22.036
the first and last like you know
thank you or first page etcetera

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13389-4
01:01:22.036 --> 01:01:22.818
doesn't matter.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13409-0
01:01:23.598 --> 01:01:28.399
So to the point of that is just
to convey that documentation has

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13409-1
01:01:28.399 --> 01:01:31.058
to be precise but yet clear,
right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13423-0
01:01:31.268 --> 01:01:34.763
Like you should not end up
writing, you know, like 50 pages

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13423-1
01:01:34.763 --> 01:01:35.928
of documentation so.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13450-0
01:01:38.538 --> 01:01:42.268
So so today, today the
assignment will like the quiz

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13450-1
01:01:42.268 --> 01:01:44.028
will be published, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13461-0
01:01:44.718 --> 01:01:48.588
Yes, from today 7:00 PM it will
be there till tomorrow.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13468-0
01:01:49.018 --> 01:01:51.468
Uh 11:55 PM I believe.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13519-0
01:01:51.478 --> 01:01:56.241
Let me just go back to that and
let me see, but I had posted as

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13519-1
01:01:56.241 --> 01:02:00.335
announcement because it keeps
changing a lot with some

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13503-0
01:01:59.968 --> 01:02:00.098
Yes.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13519-2
01:02:00.335 --> 01:02:04.876
batches, it still uh next day
night for some batches it is 7

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13519-3
01:02:04.876 --> 01:02:05.248
to 7.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13523-0
01:02:06.078 --> 01:02:07.498
So let me just clarify.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13539-0
01:02:09.618 --> 01:02:10.698
DCD important.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13551-0
01:02:09.638 --> 01:02:13.507
For for all the like the
different subjects that we have

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13551-1
01:02:13.507 --> 01:02:15.408
a a separate link like quiz.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13583-0
01:02:15.468 --> 01:02:19.357
So, but in DSD, we have a link
for assignment but quiz link is

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13583-1
01:02:19.357 --> 01:02:21.518
not present in the left hand
side.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13579-0
01:02:22.408 --> 01:02:22.618
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13585-0
01:02:22.628 --> 01:02:23.458
Yeah, it will become.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13616-0
01:02:23.518 --> 01:02:28.249
Yeah, I have not published it,
so it will be available from

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13609-0
01:02:24.378 --> 01:02:27.418
Worked out OK, got it.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13616-1
01:02:28.249 --> 01:02:31.088
today 7:00 PM to tomorrow, 7:00
PM.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13618-0
01:02:31.098 --> 01:02:31.308
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13629-0
01:02:31.318 --> 01:02:32.678
So it is 7:00 PM for your batch.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13633-0
01:02:32.688 --> 01:02:33.448
Yeah, that's good.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13649-0
01:02:33.598 --> 01:02:36.248
So the quiz will start today
7:00 PM.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13645-0
01:02:34.268 --> 01:02:34.508
OK.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13676-0
01:02:36.578 --> 01:02:40.551
It'll exactly end tomorrow, 7:00
PM, but in that 24 hour window,

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13676-1
01:02:40.551 --> 01:02:44.218
once you start the quiz, it will
be for a smaller duration.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13686-0
01:02:44.348 --> 01:02:46.348
It could be for like 30 minutes.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13695-0
01:02:46.358 --> 01:02:47.638
It could be for 45 minutes.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13703-0
01:02:47.648 --> 01:02:50.118
It could be for one hour, not
more than one hour.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13727-0
01:02:50.128 --> 01:02:53.399
Yeah, it'll either be one hour
or it'll be 30 minutes, or it

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13727-1
01:02:53.399 --> 01:02:54.418
will be 45 minutes.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13737-0
01:02:54.468 --> 01:02:57.188
Or it could be 15 minutes or
whatever, yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13764-0
01:02:57.488 --> 01:03:02.145
And so that the assignment like
since it is a group assignment,

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13764-1
01:03:02.145 --> 01:03:06.148
I can see only like if it is
submitted once, we cannot

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13764-2
01:03:06.148 --> 01:03:07.458
resubmit it again.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13795-0
01:03:07.468 --> 01:03:11.834
Suppose if we want to do some
correction and resubmit that

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13782-0
01:03:10.738 --> 01:03:11.008
Correct.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13795-1
01:03:11.834 --> 01:03:13.758
provision, is there? Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13793-0
01:03:12.688 --> 01:03:14.308
Yeah, there is only one
submission correct.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13798-0
01:03:14.318 --> 01:03:14.708
That's right.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13822-0
01:03:16.368 --> 01:03:18.910
So have you already submitted
and you want to do any

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13812-0
01:03:16.418 --> 01:03:17.098
Uh set?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13822-1
01:03:18.910 --> 01:03:19.678
corrections now?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13839-0
01:03:19.688 --> 01:03:23.788
You mean the doc is fine, PDF is
not needed.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13842-0
01:03:21.408 --> 01:03:23.288
Yeah, he's suppose we want to do
anything.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13852-0
01:03:23.798 --> 01:03:27.098
Doc is fine, but are there other
changes that you want to make?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13864-0
01:03:28.848 --> 01:03:29.648
Not as of now.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13859-0
01:03:30.378 --> 01:03:30.648
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13867-0
01:03:30.658 --> 01:03:31.748
Yeah, there is only one chance.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13878-0
01:03:31.758 --> 01:03:34.148
Yeah, I mean like that's the
right way.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13882-0
01:03:33.178 --> 01:03:33.378
OK.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13897-0
01:03:34.158 --> 01:03:36.618
I mean, otherwise you keep
revising and.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13907-0
01:03:35.648 --> 01:03:39.209
Actually, in course we got since
it was a group assignment, there

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13907-1
01:03:39.209 --> 01:03:41.098
was some multiple like
submission.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13939-0
01:03:41.168 --> 01:03:44.866
It was there till the end of
permission date, so that's why I

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13924-0
01:03:42.888 --> 01:03:43.408
OK, OK.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13939-1
01:03:44.866 --> 01:03:46.238
asked you the question.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13946-0
01:03:46.678 --> 01:03:48.828
No, no, they just one like keep
working on it.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13959-0
01:03:48.838 --> 01:03:51.204
Once you have the final one, you
could just upload that one,

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13959-1
01:03:51.204 --> 01:03:51.398
yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13960-0
01:03:52.558 --> 01:03:52.888
OK.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13981-0
01:03:52.898 --> 01:03:53.648
OK, fine, Sir.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13966-0
01:03:53.318 --> 01:03:53.728
Cool.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13985-0
01:03:53.908 --> 01:03:55.428
And suddenly in the document.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13970-0
01:03:53.918 --> 01:03:54.328
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13987-0
01:03:54.338 --> 01:03:56.418
Sorry you had something? Uh-huh.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13990-0
01:03:56.518 --> 01:03:56.688
Uh.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/13996-0
01:03:57.758 --> 01:03:59.828
Uh, like, do you do you like?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14026-0
01:03:59.838 --> 01:04:02.610
Is is it fine if we just have
the algorithm or do you want the

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14026-1
01:04:02.610 --> 01:04:04.678
pseudo code and the code also in
the document?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14050-0
01:04:05.058 --> 01:04:07.387
No, not the code because code
anyway, you are submitting a

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14050-1
01:04:07.387 --> 01:04:08.888
Python file which we will be
running.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14059-0
01:04:08.078 --> 01:04:09.418
Yeah, PY fine, yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14052-0
01:04:09.338 --> 01:04:09.688
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14080-0
01:04:09.698 --> 01:04:12.808
So you can just, you know, put
the algorithm and you know you

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14080-1
01:04:12.808 --> 01:04:15.768
can analyze it, you can propose
some alternate techniques.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14077-0
01:04:13.938 --> 01:04:14.218
OK.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14094-0
01:04:15.838 --> 01:04:19.220
You can explain why you have,
you know written algorithm that

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14087-0
01:04:16.168 --> 01:04:16.408
OK.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14094-1
01:04:19.220 --> 01:04:19.438
way.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14104-0
01:04:19.448 --> 01:04:21.048
Like what data structures you
used?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14123-0
01:04:21.158 --> 01:04:23.852
Of course, in some questions
already it was told what data

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14123-1
01:04:23.852 --> 01:04:24.628
structure to use.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14147-0
01:04:24.898 --> 01:04:28.012
You can justify why that is the
right data structure to use, or

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14147-1
01:04:28.012 --> 01:04:30.348
why that is not the right data
structure right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14155-0
01:04:30.348 --> 01:04:30.618
OK.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14161-0
01:04:30.358 --> 01:04:34.328
All such you know, things you
can mention, yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14160-0
01:04:33.128 --> 01:04:33.708
Yeah. Thanks.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14211-0
01:04:37.788 --> 01:04:42.480
And actually in in my team there
is one person whom we were not

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14211-1
01:04:42.480 --> 01:04:47.025
able to get in touch with and
later on we found that he has a

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14211-2
01:04:47.025 --> 01:04:49.078
dropped off from the course.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14235-0
01:04:48.878 --> 01:04:52.004
No, that's fine in the in the
contributions, she just put the

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14235-1
01:04:52.004 --> 01:04:53.618
name and put 0% for that person.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14241-0
01:04:53.868 --> 01:04:57.027
Yeah, actually we have a screen
dump of the communication that

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14241-1
01:04:57.027 --> 01:04:57.378
we had.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14262-0
01:04:57.888 --> 01:05:00.258
Can we attach it somewhere or as
a proof or?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14275-0
01:04:59.968 --> 01:05:02.818
You, you you can just copy paste
it inside the Excel sheet.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14269-0
01:05:03.138 --> 01:05:03.828
Excel itself.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14273-0
01:05:03.838 --> 01:05:04.288
OK, Sir.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14301-0
01:05:04.208 --> 01:05:06.526
Yeah, in the Excel itself, just
paste that you know

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14287-0
01:05:04.298 --> 01:05:04.578
Yeah, thank.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14301-1
01:05:06.526 --> 01:05:08.398
communication and put 0% for
that person.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14304-0
01:05:08.408 --> 01:05:10.128
Yeah. Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14299-0
01:05:08.778 --> 01:05:09.368
OK.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14303-0
01:05:09.438 --> 01:05:09.758
Thank you.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14320-0
01:05:12.068 --> 01:05:14.878
And so few people who don't even
reply.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14317-0
01:05:12.498 --> 01:05:12.788
OK.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14339-0
01:05:14.888 --> 01:05:17.968
I mean we have we are not sure
if they have there or not.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14352-0
01:05:18.048 --> 01:05:19.128
We don't have any communication.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14378-0
01:05:18.438 --> 01:05:21.414
Yeah, that's what like if you
have done the work, if someone

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14378-1
01:05:21.414 --> 01:05:24.586
has not contributed, put 0% and
that proof of, you know whatever

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14378-2
01:05:24.586 --> 01:05:26.928
you communicated but you didn't
get a response.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14400-0
01:05:27.238 --> 01:05:29.404
Don't worry about if they are
still in the program or if they

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14400-1
01:05:29.404 --> 01:05:30.208
have left it and so on.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14412-0
01:05:30.548 --> 01:05:34.318
As long as you attach this then
we will take care of it, yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14429-0
01:05:37.078 --> 01:05:39.548
And uh, Kapil has something can
discuss later to PS7.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14446-0
01:05:39.558 --> 01:05:42.739
I have some alternate approach
late point or you would first

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14446-1
01:05:42.739 --> 01:05:44.148
want to check those invent.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14448-0
01:05:44.218 --> 01:05:44.428
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14452-0
01:05:44.438 --> 01:05:45.168
Then only. Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14454-0
01:05:45.178 --> 01:05:45.468
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14477-0
01:05:45.518 --> 01:05:49.128
Alternate you have to mention it
in the document itself now and

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14477-1
01:05:49.128 --> 01:05:52.288
like you don't need to implement
the alternate version.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14508-0
01:05:52.558 --> 01:05:55.577
Yeah, you can just explain that
part, but may not, you know

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14508-1
01:05:55.577 --> 01:05:58.646
upload two Python files and all
that, but that's pretty much

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14508-2
01:05:58.646 --> 01:05:58.898
yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14536-0
01:05:58.948 --> 01:06:03.328
And post evaluation and all that
you could, yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14513-0
01:06:00.048 --> 01:06:00.408
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14530-0
01:06:00.488 --> 01:06:02.698
Uh, I this is said, this is
Kapil.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14548-0
01:06:03.368 --> 01:06:07.247
But what if the alternate
approach sounds better than the

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14548-1
01:06:07.247 --> 01:06:09.388
one mentioned in the assignment?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14578-0
01:06:10.418 --> 01:06:14.059
Ohh like has it already told
some data structure to use or

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14578-1
01:06:14.059 --> 01:06:15.108
what do you mean?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14567-0
01:06:14.958 --> 01:06:15.348
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14593-0
01:06:15.358 --> 01:06:17.318
So it was mentioned to use heap
OK.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14582-0
01:06:17.438 --> 01:06:17.668
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14619-0
01:06:17.678 --> 01:06:20.684
Then you have to use heaps but
in alternate you can tell your

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14619-1
01:06:20.684 --> 01:06:23.788
own approach, but if it has told
heap then adhere to only heap.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14660-0
01:06:24.038 --> 01:06:27.118
Although if it might not be the
best way do with heap in

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14628-0
01:06:24.298 --> 01:06:24.568
OK.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14660-1
01:06:27.118 --> 01:06:30.305
alternate you can just counter
our view telling that yeah,

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14635-0
01:06:27.578 --> 01:06:27.948
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14641-0
01:06:27.958 --> 01:06:28.208
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14664-0
01:06:28.218 --> 01:06:29.568
So that that is what I meant.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14667-0
01:06:29.578 --> 01:06:30.908
Actually, yes.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14660-2
01:06:30.305 --> 01:06:31.008
yeah, got it.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14691-0
01:06:31.018 --> 01:06:34.402
Yeah, so all the assignments
they have been told to user data

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14675-0
01:06:31.968 --> 01:06:32.578
OK. Thanks.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14691-1
01:06:34.402 --> 01:06:37.786
structure to make sure you you
learn about the data structure

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14691-2
01:06:37.786 --> 01:06:38.168
better.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14703-0
01:06:38.458 --> 01:06:40.308
Yeah, it may not be the best way
to do it.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14707-0
01:06:40.798 --> 01:06:41.188
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14711-0
01:06:41.198 --> 01:06:43.038
So that is the purpose.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14721-0
01:06:43.048 --> 01:06:44.438
Yeah, in between someone had
something.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14737-0
01:06:44.448 --> 01:06:47.556
So Ruby, I think, and then, you
know, the ray came in and all

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14737-1
01:06:47.556 --> 01:06:48.458
went in and chain.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14748-0
01:06:48.808 --> 01:06:51.958
So you still have something or
we go ahead, so Ruby.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14754-0
01:06:54.968 --> 01:06:55.398
No, Sir.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14773-0
01:06:55.408 --> 01:06:59.028
It's regarding only that tipping
quick quiz open till night Sir.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14775-0
01:06:59.898 --> 01:07:01.178
OK, that that I will see.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14824-0
01:07:01.188 --> 01:07:04.977
Because the other courses, if
it's still seven and only if I

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14806-0
01:07:02.838 --> 01:07:02.988
No.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14824-1
01:07:04.977 --> 01:07:08.829
keep till 11, then there are,
you know like have had you know

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14824-2
01:07:08.829 --> 01:07:11.128
like why only this course and so
on.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14818-0
01:07:10.128 --> 01:07:11.248
Got it, got it.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14834-0
01:07:11.258 --> 01:07:11.798
Got it, Sir.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14837-0
01:07:11.438 --> 01:07:13.808
So for all the other courses, it
is still 7:00 PM, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14874-0
01:07:14.338 --> 01:07:15.648
Or is it till 11:55?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14861-0
01:07:14.738 --> 01:07:15.968
And make for.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14887-0
01:07:14.838 --> 01:07:18.928
You said for some it was seven,
some 1159.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14865-0
01:07:14.848 --> 01:07:15.778
No phone calls.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14882-0
01:07:15.788 --> 01:07:16.758
It was still 12.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14884-0
01:07:16.238 --> 01:07:18.228
You forecast we have till night.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14894-0
01:07:20.038 --> 01:07:21.968
OK, OK, cool.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14908-0
01:07:21.348 --> 01:07:22.318
First, the US is it?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14901-0
01:07:21.978 --> 01:07:22.778
Let let me see that.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14929-0
01:07:22.788 --> 01:07:25.877
Yeah, I will check that, but it
will be it, it is not visible

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14929-1
01:07:25.877 --> 01:07:28.268
for you now, but it will be
available at seven.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14933-0
01:07:28.378 --> 01:07:29.588
Yeah, so.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14951-0
01:07:31.158 --> 01:07:34.529
Uh, so for alternate approach,
can it be like into

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14951-1
01:07:34.529 --> 01:07:35.918
probabilistic things?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14958-0
01:07:38.018 --> 01:07:39.028
Probabilistic thing.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14972-0
01:07:38.388 --> 01:07:42.878
Or for example, let's say uh,
there is more.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14968-0
01:07:39.038 --> 01:07:39.878
Meaning, what do you mean?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14974-0
01:07:42.888 --> 01:07:43.308
Uh.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14987-0
01:07:43.348 --> 01:07:47.258
Uh, there is a way to solve the
problem more efficiently.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/14999-0
01:07:47.268 --> 01:07:49.688
If we apply probabilistic
algorithms.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15002-0
01:07:50.308 --> 01:07:51.878
No, no, no, it should be only.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15027-0
01:07:51.888 --> 01:07:54.486
From what we learned it it, it
should be some other data

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15027-1
01:07:54.486 --> 01:07:56.218
structure or it should be some
other.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15052-0
01:07:56.228 --> 01:07:59.607
You know algorithmic technique,
not something like probabilistic

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15052-1
01:07:59.607 --> 01:08:02.414
or using randomization or
genetic algorithms, or, you

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15052-2
01:08:02.414 --> 01:08:03.818
know, such advanced things.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15061-0
01:08:04.228 --> 01:08:04.528
OK.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15066-0
01:08:04.368 --> 01:08:06.828
Yeah, it it has to be somewhere
around our own course.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15087-0
01:08:07.068 --> 01:08:09.773
Maybe I used a heap or you could
have used a graph or things like

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15087-1
01:08:09.773 --> 01:08:09.978
that.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15090-0
01:08:10.598 --> 01:08:10.898
OK.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15092-0
01:08:10.778 --> 01:08:10.918
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15095-0
01:08:12.078 --> 01:08:12.488
Cool.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15114-0
01:08:12.288 --> 01:08:16.351
Ah, but but doesn't
PARTHASARATHY today quiz will be

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15108-0
01:08:12.618 --> 01:08:14.258
So we will take one more, yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15114-1
01:08:16.351 --> 01:08:16.888
coming.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15134-0
01:08:16.898 --> 01:08:18.768
Just sorry, I missed the
communication.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15123-0
01:08:18.428 --> 01:08:18.688
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15127-0
01:08:18.698 --> 01:08:19.378
Yeah, it will be.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15139-0
01:08:19.388 --> 01:08:20.858
It will be 7:00 PM today.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15141-0
01:08:20.028 --> 01:08:21.748
Oh, OK, OK.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15144-0
01:08:21.288 --> 01:08:21.458
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15157-0
01:08:22.798 --> 01:08:26.926
So click syllabus for today
would be not till today's

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15157-1
01:08:26.926 --> 01:08:27.538
lecture.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15165-0
01:08:27.548 --> 01:08:29.648
Yeah, it will cover something
till BSD.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15177-0
01:08:30.368 --> 01:08:33.856
Yeah, not hashing and so on
hashing we will have later,

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15177-1
01:08:33.856 --> 01:08:34.168
yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15182-0
01:08:36.388 --> 01:08:36.698
Cool.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15189-0
01:08:36.708 --> 01:08:39.168
I think then we will quickly get
started and.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15201-0
01:08:42.278 --> 01:08:43.978
Let's let me know if you are
still able to see.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15211-0
01:08:55.568 --> 01:08:56.978
OK, I just saw the reaction.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15217-0
01:08:56.988 --> 01:08:58.038
I was waiting for some reply.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15219-0
01:08:58.048 --> 01:08:58.218
Cool.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15221-0
01:08:58.228 --> 01:08:58.538
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15226-0
01:08:58.598 --> 01:08:59.518
So let's go ahead.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15257-0
01:08:59.528 --> 01:09:02.878
So we'll listed about separate
chaining and open addressing and

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15257-1
01:09:02.878 --> 01:09:06.019
now we will go deep into open
addressing, which are those 3

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15257-2
01:09:06.019 --> 01:09:06.438
schemes.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15272-0
01:09:06.608 --> 01:09:09.546
So under open addressing, there
are three and what is the other

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15272-1
01:09:09.546 --> 01:09:10.648
name of open addressing?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15280-0
01:09:12.748 --> 01:09:13.568
You guys remember that?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15285-0
01:09:15.118 --> 01:09:15.798
Closed hashing.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15288-0
01:09:16.398 --> 01:09:17.368
Yeah, close dashing.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15297-0
01:09:17.498 --> 01:09:20.588
The name is closed because the
bucket is closed.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15306-0
01:09:20.678 --> 01:09:22.468
You cannot go outside, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15322-0
01:09:22.478 --> 01:09:25.727
Whatever keys you get, you'll
have to manage it within the

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15322-1
01:09:25.727 --> 01:09:26.718
hash table itself.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15328-0
01:09:26.728 --> 01:09:27.728
You cannot go beyond it.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15336-0
01:09:28.038 --> 01:09:29.588
Yeah, that's the logic for that
name.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15347-0
01:09:30.038 --> 01:09:31.648
So the first one is linear
probing.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15352-0
01:09:32.238 --> 01:09:33.448
So what is the normal word?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15354-0
01:09:33.458 --> 01:09:33.848
Probing.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15368-0
01:09:34.078 --> 01:09:36.958
Yeah, in the normal English
term, what really is probing?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15376-0
01:09:43.008 --> 01:09:43.788
Asking questions.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15379-0
01:09:43.938 --> 01:09:44.148
OK.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15392-0
01:09:44.938 --> 01:09:47.168
Sequential searching, sequential
searching.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15384-0
01:09:44.968 --> 01:09:45.438
Yeah, right.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15396-0
01:09:47.358 --> 01:09:47.998
Investigate.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15393-0
01:09:47.738 --> 01:09:48.618
No probing alone.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15415-0
01:09:48.678 --> 01:09:52.157
Yeah, probing means asking
question or investigating or you

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15415-1
01:09:52.157 --> 01:09:54.418
know, things like that, right,
asking.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15433-0
01:09:55.618 --> 01:09:59.049
And if I do that linearly, that
is linear probing and that is

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15433-1
01:09:59.049 --> 01:10:00.378
what we are going to do.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15451-0
01:10:00.848 --> 01:10:04.013
Linear probing handles
collisions by placing the

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15451-1
01:10:04.013 --> 01:10:07.178
colliding item in the next
available table cell.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15481-0
01:10:07.408 --> 01:10:10.398
Next available meanings are
clearly meaning if the last one

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15481-1
01:10:10.398 --> 01:10:13.638
is, you know, not available, you
will check the first one right.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15496-0
01:10:13.648 --> 01:10:17.625
You're going to check the next
available cell if it is free or

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15496-1
01:10:17.625 --> 01:10:17.878
not.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15503-0
01:10:17.888 --> 01:10:19.338
Meaning we're going to probe it.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15543-0
01:10:20.028 --> 01:10:23.310
Each table cell inspected is
referred to as a probe in this

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15543-1
01:10:23.310 --> 01:10:26.811
method, if we try to insert an
element K, comma B into a bucket

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15543-2
01:10:26.811 --> 01:10:30.038
A of I that is already occupied,
what does it mean if it's

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15543-3
01:10:30.038 --> 01:10:30.968
already occupied?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15546-0
01:10:31.118 --> 01:10:31.328
Right.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15560-0
01:10:33.668 --> 01:10:36.872
Yeah, if something is already
OK, it means collision has

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15560-1
01:10:36.872 --> 01:10:37.378
happened.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15569-0
01:10:38.388 --> 01:10:39.878
Where is equal to each of K.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15602-0
01:10:39.888 --> 01:10:43.434
Then we try the next of I + 1
mod this mod N because we don't

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15602-1
01:10:43.434 --> 01:10:46.865
want to stop at the last, we
want to also continue checking

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15602-2
01:10:46.865 --> 01:10:47.838
in the beginning.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15621-0
01:10:48.568 --> 01:10:51.503
So this process will continue
until we find an empty bucket

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15621-1
01:10:51.503 --> 01:10:53.068
that will accept this new entry.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15643-0
01:10:54.568 --> 01:10:58.036
So insert an item we have K
comma E where K is the key and

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15643-1
01:10:58.036 --> 01:10:58.918
is the element.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15650-0
01:10:59.048 --> 01:11:01.738
This whole thing is that item as
usual.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15664-0
01:11:01.788 --> 01:11:05.588
Use the K and compute the hash
value or the index.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15683-0
01:11:06.238 --> 01:11:09.927
Once you compute that, go to
that AO fi and check if it is

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15683-1
01:11:09.927 --> 01:11:10.928
occupied or not.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15695-0
01:11:11.178 --> 01:11:14.328
If alpha is not occupied then
place the element in a of.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15698-0
01:11:14.338 --> 01:11:15.708
I very good.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15709-0
01:11:15.718 --> 01:11:16.938
No collision, just put it there.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15728-0
01:11:17.988 --> 01:11:20.771
If the offer is already
occupied, if collision has

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15728-1
01:11:20.771 --> 01:11:23.118
happened then try the buckets I
+ 1 model.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15766-0
01:11:23.628 --> 01:11:28.350
If this is also occupied then
try I + 2 mod N and so on until

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15766-1
01:11:28.350 --> 01:11:32.996
we find an empty bucket in a
that can accept the new item or

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15766-2
01:11:32.996 --> 01:11:35.738
we have inspected the entire
array.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15784-0
01:11:36.208 --> 01:11:39.443
It is I plus N minus one mod N
we have inspected, meaning you

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15784-1
01:11:39.443 --> 01:11:40.748
have done a whole circle.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15802-0
01:11:40.758 --> 01:11:43.191
You are again back to that you
have not, you know, found an

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15802-1
01:11:43.191 --> 01:11:43.678
empty place.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15824-0
01:11:44.048 --> 01:11:47.874
Then you cannot insert this item
right and like you are separate

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15824-1
01:11:47.874 --> 01:11:49.758
chaining here, there is a limit.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15832-0
01:11:50.898 --> 01:11:52.728
That limit is nothing but your
capital.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15852-0
01:11:53.708 --> 01:11:57.267
If you have a array of size 10,
your bucket of size 10, you

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15852-1
01:11:57.267 --> 01:11:58.988
cannot insert more than that.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15872-0
01:12:01.538 --> 01:12:04.926
Right, probe each table cell
inspector to place the item is

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15872-1
01:12:04.926 --> 01:12:06.168
referred as the probe.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15895-0
01:12:06.178 --> 01:12:08.687
We already know that
disadvantage something is there,

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15895-1
01:12:08.687 --> 01:12:11.708
we will come back after learning
what the disadvantage is right.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15927-0
01:12:11.718 --> 01:12:14.735
Firstly, what is this insert the
keys using linear probing in

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15927-1
01:12:14.735 --> 01:12:17.703
this order into the hash table
using hash function H of K is

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15927-2
01:12:17.703 --> 01:12:18.628
equal to K mode 13.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15933-0
01:12:19.158 --> 01:12:19.828
Show your work.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15939-0
01:12:19.838 --> 01:12:22.598
Step-by-step keys are given real
quick.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15955-0
01:12:23.628 --> 01:12:24.868
Let me know the hashed values.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15954-0
01:12:24.258 --> 01:12:24.888
529.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15962-0
01:12:27.138 --> 01:12:27.318
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16002-0
01:12:28.088 --> 01:12:34.703
Flight 95 arrived, values itself
52957 then that it's the

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15985-0
01:12:33.168 --> 01:12:33.348
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16002-1
01:12:34.703 --> 01:12:37.668
contrary place in six and.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/15993-0
01:12:37.188 --> 01:12:37.618
No, no, no.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16003-0
01:12:37.628 --> 01:12:39.258
That we will, that we will do.
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16013-0
01:12:39.268 --> 01:12:41.158
So this is the hash values
right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16028-0
01:12:41.208 --> 01:12:45.797
And now I have 13 which is our
capital N which is the capacity,

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16028-1
01:12:45.797 --> 01:12:46.228
right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16056-0
01:12:46.318 --> 01:12:50.704
So what we are planning to do is
we will first create a bucket

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16056-1
01:12:50.704 --> 01:12:53.838
going from zero to 12 which is
this 13 done.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16067-0
01:12:54.248 --> 01:12:57.368
Now we plan to insert them 18.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16085-0
01:12:57.378 --> 01:13:00.233
Has this fires hashed value 41
has two, so all of you got the

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16085-1
01:13:00.233 --> 01:13:01.108
hash concept right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16098-0
01:13:01.118 --> 01:13:03.568
I mean Rajesh quickly, you know,
told the hash value.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16129-0
01:13:03.578 --> 01:13:07.851
I have also shown the answer
here, but all that you have done

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16129-1
01:13:07.851 --> 01:13:11.298
is 18 more 1341 Mod 1322 Mod 13
and so on, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16139-0
01:13:11.348 --> 01:13:12.988
Simple stuff, no MFDS.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16143-0
01:13:13.898 --> 01:13:14.698
This is all basic.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16167-0
01:13:14.708 --> 01:13:19.269
You know modulus SO18 mod, you
know 18 mod 13 give you 5, so

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16167-1
01:13:19.269 --> 01:13:21.138
we'll have to go to five.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16190-0
01:13:21.668 --> 01:13:24.617
I check if it is empty or not,
it is empty so I can just go

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16190-1
01:13:24.617 --> 01:13:26.338
ahead and put this eight in
there.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16199-0
01:13:27.578 --> 01:13:29.408
So for that, there's no
collusion.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16218-0
01:13:29.598 --> 01:13:33.488
All happy case 41 is going to no
collusion.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16225-0
01:13:34.958 --> 01:13:36.028
21 should go to 9.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16227-0
01:13:36.038 --> 01:13:36.268
I go.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16231-0
01:13:36.278 --> 01:13:36.718
There it is.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16234-0
01:13:36.728 --> 01:13:37.128
Empty.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16242-0
01:13:37.138 --> 01:13:39.418
I go put it there, no problem.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16259-0
01:13:39.788 --> 01:13:43.278
44 should go to five and I come
here and check that is occupied.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16285-0
01:13:43.648 --> 01:13:47.334
So collision has happened and
this is where linear probing

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16285-1
01:13:47.334 --> 01:13:51.333
came into action, where you went
to the next cell and you asked

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16285-2
01:13:51.333 --> 01:13:51.958
or probed.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16290-0
01:13:51.968 --> 01:13:52.478
Is that empty?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16294-0
01:13:53.318 --> 01:13:54.148
And it was empty.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16308-0
01:13:54.158 --> 01:13:56.018
So you have actually put the 44
here.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16315-0
01:13:57.628 --> 01:13:59.318
5959 can go to 7.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16327-0
01:13:59.328 --> 01:14:01.528
It is already empty, so you'll
put that 59 there.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16335-0
01:14:02.188 --> 01:14:03.338
32 should go to six.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16341-0
01:14:04.838 --> 01:14:06.568
It comes to six what has
happened?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16343-0
01:14:06.678 --> 01:14:07.078
Collision.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16358-0
01:14:08.228 --> 01:14:11.338
So you probe the next cell that
is also having an item.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16362-0
01:14:11.348 --> 01:14:12.318
So again collision.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16374-0
01:14:12.828 --> 01:14:16.058
So you again probe the next
cell, it is empty.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16380-0
01:14:16.108 --> 01:14:17.668
So you put that item 32 here.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16391-0
01:14:19.638 --> 01:14:20.988
And then 31 is for five.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16398-0
01:14:20.998 --> 01:14:24.058
Again here collision linear
probe.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16438-0
01:14:24.068 --> 01:14:28.321
Check here collision check here
in seven collision check here in

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16438-1
01:14:28.321 --> 01:14:32.443
eight collision check here in
nine collision 10 is it free you

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16438-2
01:14:32.443 --> 01:14:36.303
will put that 31 here finally 73
again collision collision

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16438-3
01:14:36.303 --> 01:14:36.958
collision.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16440-0
01:14:38.158 --> 01:14:38.618
Put it here.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16446-0
01:14:39.688 --> 01:14:41.588
Yeah, that's it.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16450-0
01:14:41.598 --> 01:14:42.668
In session is completed.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16465-0
01:14:42.978 --> 01:14:46.508
So now you how many more items
can be inserted in this

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16465-1
01:14:46.508 --> 01:14:47.728
particular example.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16483-0
01:14:50.238 --> 01:14:52.188
Maximum how many more can insert
here?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16504-0
01:14:51.478 --> 01:14:55.488
Maximum typing 30.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16487-0
01:14:52.938 --> 01:14:53.158
By.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16494-0
01:14:53.608 --> 01:14:53.858
Are you?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16488-0
01:14:54.368 --> 01:14:54.848
Five.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16498-0
01:14:54.898 --> 01:14:56.218
Yeah, because only five more are
left.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16502-0
01:14:56.228 --> 01:14:56.538
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16507-0
01:14:56.548 --> 01:14:57.438
Beyond that, I cannot.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16523-0
01:14:57.648 --> 01:15:00.557
It's like, you know, that is why
this is called as closed

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16523-1
01:15:00.557 --> 01:15:00.958
hashing.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16534-0
01:15:00.968 --> 01:15:03.098
I cannot use any other linked
list or anything.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16536-0
01:15:03.408 --> 01:15:03.958
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16545-0
01:15:04.028 --> 01:15:05.638
So what will happen if ARAY gets
filled?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16547-0
01:15:05.648 --> 01:15:05.768
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16554-0
01:15:05.778 --> 01:15:06.578
Then you cannot insert.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16580-0
01:15:06.588 --> 01:15:09.483
You will throw an error that you
know you cannot insert, but that

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16580-1
01:15:09.483 --> 01:15:11.808
is the you know, next concept we
will later look at.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16592-0
01:15:12.738 --> 01:15:15.168
Do you should never let the hash
table get full.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16600-0
01:15:15.888 --> 01:15:17.138
This is telling something like.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16609-0
01:15:17.148 --> 01:15:18.638
You know what is my hard disk?
Gets filled?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16626-0
01:15:19.168 --> 01:15:22.208
Yeah, if your hard disk is
getting filled, then you know

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16626-1
01:15:22.208 --> 01:15:23.008
warning, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16639-0
01:15:23.018 --> 01:15:25.198
You know that, OK, 90% is filled
or so on.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16644-0
01:15:25.368 --> 01:15:26.748
So you will do something else.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16655-0
01:15:27.128 --> 01:15:28.448
Yeah, you will maybe take a
backup.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16695-0
01:15:28.458 --> 01:15:31.479
You'll make it free or you will
buy a bigger hard disk so that

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16695-1
01:15:31.479 --> 01:15:34.405
we will do later if all cells
are occupied on the right side

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16687-0
01:15:32.868 --> 01:15:33.068
That.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16695-2
01:15:34.405 --> 01:15:36.228
of five, will it occupy in left
side?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16703-0
01:15:36.238 --> 01:15:37.788
Yes, that is why we have this
answer.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16711-0
01:15:40.138 --> 01:15:41.248
Modeless right.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16753-0
01:15:41.518 --> 01:15:44.826
So if all of these are occupied,
then also what we will do is if

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16753-1
01:15:44.826 --> 01:15:48.032
12, you know we will check 12 if
12 is also Cupid mean we will

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16753-2
01:15:48.032 --> 01:15:50.628
again go back and check in zero
and one and so on.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16757-0
01:15:51.708 --> 01:15:52.038
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16759-0
01:15:52.048 --> 01:15:52.628
Circular cool.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16764-0
01:15:53.588 --> 01:15:54.458
Yeah, someone had a question.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16766-0
01:15:59.728 --> 01:15:59.908
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16775-0
01:16:02.918 --> 01:16:03.868
It only says Sir.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16782-0
01:16:03.878 --> 01:16:05.628
How is this different from
regular right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16796-0
01:16:05.858 --> 01:16:10.100
So in regular array there is no
calculation of hashed value,

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16796-1
01:16:10.100 --> 01:16:10.518
right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16819-0
01:16:10.868 --> 01:16:14.670
If I want to now search for 18
in a normal array, I will go

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16819-1
01:16:14.670 --> 01:16:16.318
search starting from zero.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16837-0
01:16:16.618 --> 01:16:20.981
I'll have to search where 18 is,
but here I'll put 18 to the hash

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16837-1
01:16:20.981 --> 01:16:21.378
value.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16850-0
01:16:21.708 --> 01:16:23.838
I mean hash function, I'll get
fires answer.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16854-0
01:16:23.918 --> 01:16:24.748
I'll directly go there.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16862-0
01:16:24.758 --> 01:16:25.458
I'll get that answer.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16873-0
01:16:25.768 --> 01:16:29.258
If not, I will linearly probe
and check where it is, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16882-0
01:16:29.268 --> 01:16:31.488
So this is not a regular array,
correct?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16898-0
01:16:31.578 --> 01:16:34.968
So where a key is going is
determined by the hashed value.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16909-0
01:16:36.128 --> 01:16:39.478
But this way we can assign it to
the key, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16925-0
01:16:39.688 --> 01:16:43.908
What does it mean Shanshan
meaning to the right? Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16952-0
01:16:42.198 --> 01:16:50.719
So so if I if I, uh like we have
a three values or linked with

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16952-1
01:16:50.719 --> 01:16:53.018
585 key for here.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16946-0
01:16:51.028 --> 01:16:51.298
Correct.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16963-0
01:16:52.388 --> 01:16:53.848
Uh-huh. Correct.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16976-0
01:16:53.228 --> 01:16:57.202
But if I if I see I if I see
this output, I cannot determine

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16976-1
01:16:57.202 --> 01:16:59.548
which is actually linked with
file.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16978-0
01:17:00.468 --> 01:17:00.728
Correct.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/16987-0
01:17:02.428 --> 01:17:05.018
Well, for me this is not.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17013-0
01:17:05.088 --> 01:17:08.616
I mean, I don't find it useful
because if I want to see what

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17013-1
01:17:08.616 --> 01:17:12.086
exactly is linked with five
using only the below diagram, I

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17013-2
01:17:12.086 --> 01:17:12.318
can.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17021-0
01:17:12.328 --> 01:17:13.538
I can see only 18.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17034-0
01:17:13.898 --> 01:17:15.048
I will not say the rest.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17030-0
01:17:14.118 --> 01:17:16.338
Yeah, that's correct.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17032-0
01:17:16.348 --> 01:17:16.618
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17061-0
01:17:16.668 --> 01:17:19.090
So if you want to see or
visualize, then separate

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17061-1
01:17:19.090 --> 01:17:22.142
chaining is the technique, but
separate chaining has a problem

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17061-2
01:17:22.142 --> 01:17:23.208
of extra space, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17082-0
01:17:23.218 --> 01:17:26.818
If I don't want to use extra
space, I want to fit it in the

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17082-1
01:17:26.818 --> 01:17:28.018
given bucket itself.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17088-0
01:17:28.108 --> 01:17:29.978
Then I have to somehow manage,
right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17099-0
01:17:30.188 --> 01:17:32.178
So then this is 1 technique.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17110-0
01:17:31.648 --> 01:17:31.798
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17114-0
01:17:32.228 --> 01:17:33.918
So in all the other two also you
will not.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17191-0
01:17:32.868 --> 01:17:37.039
And even for even for searching,
Sir, we have to search that

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17191-1
01:17:37.039 --> 01:17:41.142
complete if the any element is
not found, we have to search

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17191-2
01:17:41.142 --> 01:17:45.450
that complete list because we
don't know that which element is

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17142-0
01:17:41.788 --> 01:17:41.968
Uh-huh.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17191-3
01:17:45.450 --> 01:17:49.348
related with any other key or it
is all of the same key.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17163-0
01:17:47.378 --> 01:17:48.018
No, no, no, no.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17175-0
01:17:48.028 --> 01:17:48.808
We we will go there.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17179-0
01:17:48.818 --> 01:17:49.508
We will go there.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17181-0
01:17:49.778 --> 01:17:50.068
No, no.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17189-0
01:17:50.078 --> 01:17:51.348
This is a very beautiful
concept.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17394-0
01:17:50.198 --> 01:17:52.338
Uh yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17203-0
01:17:51.358 --> 01:17:53.988
We will learn that we need not
search the whole array.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17208-0
01:17:53.998 --> 01:17:54.688
That is the point.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17222-0
01:17:54.738 --> 01:17:57.157
If we search the whole array
then it becomes like an array

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17222-1
01:17:57.157 --> 01:17:57.608
only right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17229-0
01:17:57.618 --> 01:17:58.568
Then why do we need this?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17238-0
01:17:58.858 --> 01:18:00.528
So we need not search the whole
array.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17260-0
01:18:00.598 --> 01:18:03.682
There is a, you know, special
concept there, but so far is

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17260-1
01:18:03.682 --> 01:18:05.668
insertion clear for all of you,
yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17269-0
01:18:08.008 --> 01:18:08.758
SURENDRA is right.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17297-0
01:18:08.768 --> 01:18:12.728
Number of you know elements that
I can insert in a linear probing

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17297-1
01:18:12.728 --> 01:18:15.608
is not greater than what most
north only right.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17306-0
01:18:16.878 --> 01:18:19.108
So we will now look at insertion
is clear now.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17319-0
01:18:19.198 --> 01:18:22.228
So now we will also look at this
disadvantage, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17327-0
01:18:22.238 --> 01:18:23.968
Let's again do this insertion
quickly.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17368-0
01:18:24.518 --> 01:18:28.950
So far, you know I had inserted
result 41 and then you know you

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17368-1
01:18:28.950 --> 01:18:33.036
had this 44 who had collided
with five and he did a linear

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17368-2
01:18:33.036 --> 01:18:34.768
probe and he went to six.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17371-0
01:18:35.358 --> 01:18:36.088
So far so good.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17373-0
01:18:36.098 --> 01:18:36.308
OK.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17383-0
01:18:37.778 --> 01:18:40.048
What was this 44th legitimate
position?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17387-0
01:18:41.408 --> 01:18:41.568
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17401-0
01:18:42.838 --> 01:18:44.568
Where was the deserving to
fight?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17399-0
01:18:43.368 --> 01:18:43.628
Play.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17406-0
01:18:44.368 --> 01:18:44.728
Fine.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17412-0
01:18:45.208 --> 01:18:45.558
5.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17408-0
01:18:45.518 --> 01:18:46.628
But where did he now go?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17417-0
01:18:47.058 --> 01:18:47.638
He went to six.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17435-0
01:18:48.768 --> 01:18:53.346
By doing so, he has actually
taken the place of someone else

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17435-1
01:18:53.346 --> 01:18:56.198
who will deserve the position of
six.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17464-0
01:18:56.318 --> 01:19:00.174
Do you agree now when this 32
comes, 32 has is deserved

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17464-1
01:19:00.174 --> 01:19:04.375
position as six when he comes he
will collide with this guy,

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17464-2
01:19:04.375 --> 01:19:04.788
right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17471-0
01:19:06.388 --> 01:19:07.658
So this is what happened here,
right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17475-0
01:19:07.668 --> 01:19:08.428
He collided here.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17496-0
01:19:08.438 --> 01:19:12.479
He collided here and he kept on
going and this 32 went and took

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17496-1
01:19:12.479 --> 01:19:13.868
the position of eight.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17506-0
01:19:14.868 --> 01:19:16.998
What was the legitimate place
for this?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17516-0
01:19:16.998 --> 01:19:18.678
Eight who deserved that eighth
position?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17527-0
01:19:18.748 --> 01:19:22.278
This 73 but when 73 came someone
else is here.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17539-0
01:19:22.668 --> 01:19:24.788
So he again keeps probing and he
goes here.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17568-0
01:19:25.628 --> 01:19:29.557
So can I tell that these
collisions because of this

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17568-1
01:19:29.557 --> 01:19:34.318
linear probing concept go and
occupy someone else's legitimate

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17568-2
01:19:34.318 --> 01:19:37.568
position, causing again future
collisions?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17572-0
01:19:38.478 --> 01:19:38.968
Is that correct?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17614-0
01:19:40.718 --> 01:19:43.713
Yes, no, this 44 and this 32,
they are going and occupying

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17587-0
01:19:41.808 --> 01:19:42.218
Yes, Sir.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17614-1
01:19:43.713 --> 01:19:46.709
someone else's and that guy
comes, he will also again call

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17614-2
01:19:46.709 --> 01:19:49.248
it and he'll go and take someone
else's position.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17635-0
01:19:49.438 --> 01:19:52.218
So this chain will keep on
continuing and that is what is

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17635-1
01:19:52.218 --> 01:19:54.328
this disadvantage which was
mentioned here?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17684-0
01:19:54.738 --> 01:19:58.450
Yeah, this is called as primary
clustering colliding items lump

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17684-1
01:19:58.450 --> 01:20:01.582
together, causing future
collisions to cause a longer

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17684-2
01:20:01.582 --> 01:20:04.888
sequence of probes during
insertion again and again they

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17684-3
01:20:04.888 --> 01:20:08.368
will go take someone else's and
they will again cost future

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17684-4
01:20:08.368 --> 01:20:09.528
collision and so on.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17690-0
01:20:09.798 --> 01:20:11.898
This will keep happening, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17699-0
01:20:11.908 --> 01:20:15.198
So this is called US primary
clustering.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17705-0
01:20:15.208 --> 01:20:16.558
This happens in linear probing.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17717-0
01:20:18.108 --> 01:20:19.348
Yeah, insertion all of you
clear.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17738-0
01:20:20.758 --> 01:20:23.570
If a list of the keys are given,
if the hash function and table

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17738-1
01:20:23.570 --> 01:20:25.548
are given, will you be able to
do insertion?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17744-0
01:20:25.938 --> 01:20:27.988
This is the example, yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17775-0
01:20:30.468 --> 01:20:34.112
This is more space efficient,
but this has this, you know

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17775-1
01:20:34.112 --> 01:20:37.380
problem of you can only
accommodate a capital N you

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17775-2
01:20:37.380 --> 01:20:39.328
cannot do more than that right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17785-0
01:20:40.668 --> 01:20:42.098
So now we will go for the
search.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17789-0
01:20:42.108 --> 01:20:42.418
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17791-0
01:20:42.428 --> 01:20:42.578
No.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17801-0
01:20:42.588 --> 01:20:43.608
Slowly we will go for the
search.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17805-0
01:20:44.868 --> 01:20:45.468
How do you search?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17823-0
01:20:48.398 --> 01:20:50.908
As usual, take the key, put it
in the hash function.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17836-0
01:20:51.658 --> 01:20:54.548
The hash function will give you
the hash value or the index.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17839-0
01:20:54.858 --> 01:20:55.578
Go to that cell.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17851-0
01:20:57.378 --> 01:21:01.178
Robe consecutive locations until
one of the following occurs.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17859-0
01:21:02.138 --> 01:21:02.578
What is it?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17874-0
01:21:03.748 --> 01:21:07.768
An item with the key case found,
then return key present.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17882-0
01:21:09.048 --> 01:21:11.838
An empty cell is found, then
return no such key.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17900-0
01:21:13.738 --> 01:21:17.098
N cells have been unsuccessfully
probed, then return.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17904-0
01:21:17.108 --> 01:21:17.618
No such key.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17909-0
01:21:19.068 --> 01:21:19.718
Is this clear?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17912-0
01:21:19.968 --> 01:21:20.358
All of you.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17944-0
01:21:21.778 --> 01:21:25.934
So there are three cases after
you find out your hash value,

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17944-1
01:21:25.934 --> 01:21:29.954
you will go start looking from
that A of I position either

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17944-2
01:21:29.954 --> 01:21:31.658
three things will happen.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17952-0
01:21:32.008 --> 01:21:33.148
Either that key will be found.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17960-0
01:21:34.768 --> 01:21:36.038
You have to probe again, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17974-0
01:21:36.048 --> 01:21:37.798
You will not just look for that
one cell alone.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17978-0
01:21:37.808 --> 01:21:39.678
You'll keep probing you later.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17999-0
01:21:39.688 --> 01:21:43.745
Find that key or if you find an
empty cell, you will tell that

c665b3ae-097f-4446-a5df-1f0f9956fc9a/17999-1
01:21:43.745 --> 01:21:44.518
no such key.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18009-0
01:21:44.848 --> 01:21:46.818
You will not go to the end of
the array, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18034-0
01:21:46.828 --> 01:21:49.351
So Ruby in an array you don't
know that you'll have to start

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18034-1
01:21:49.351 --> 01:21:50.178
and go till the end.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18059-0
01:21:50.648 --> 01:21:53.581
But here if I find an empty cell
in between somewhere, I will

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18059-1
01:21:53.581 --> 01:21:56.088
just stop my algorithm and I'll
say it is not there.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18091-0
01:21:56.998 --> 01:22:01.650
Yeah, but if the complete array
is full and there is no empty

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18091-1
01:22:01.650 --> 01:22:06.602
cell, also there is no key also,
then you will again have that no

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18091-2
01:22:06.602 --> 01:22:07.278
such key.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18097-0
01:22:07.548 --> 01:22:08.578
Let's take some examples.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18103-0
01:22:08.588 --> 01:22:09.448
It'll be even more clear.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18117-0
01:22:10.448 --> 01:22:12.679
Consider the following hash
table, the one that we just

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18117-1
01:22:12.679 --> 01:22:12.998
created.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18123-0
01:22:13.598 --> 01:22:14.898
Hash function is given to us.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18126-0
01:22:15.438 --> 01:22:16.028
Search Oregon.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18135-0
01:22:16.038 --> 01:22:17.378
Find both are the same
operations.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18150-0
01:22:18.258 --> 01:22:21.308
Find 183157 so 3 examples have
been given.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18160-0
01:22:22.218 --> 01:22:23.318
Firstly, let do for 18.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18164-0
01:22:24.088 --> 01:22:24.858
How will you do that?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18177-0
01:22:25.288 --> 01:22:27.818
First you will put it for you
know your hash function.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18185-0
01:22:28.138 --> 01:22:30.028
You'll get 18 mod 13 as five.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18193-0
01:22:30.628 --> 01:22:31.558
Look at your file.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18205-0
01:22:32.088 --> 01:22:34.708
18 is equal to 18, so it is
success you have got it.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18225-0
01:22:36.508 --> 01:22:40.345
Yeah, there are some question
also while searching the

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18225-1
01:22:40.345 --> 01:22:42.578
inherent hash key of a key with.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18229-0
01:22:42.588 --> 01:22:43.718
What is ANIKET?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18231-0
01:22:43.788 --> 01:22:44.148
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18236-0
01:22:44.158 --> 01:22:45.798
What was that anyway?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18255-0
01:22:45.808 --> 01:22:47.828
We will cover this and then we
will go there anisha.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18260-0
01:22:48.258 --> 01:22:50.758
So 18 successful perfect 31.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18282-0
01:22:52.848 --> 01:22:56.578
31 Mod 13 is also five, so look
at your file.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18299-0
01:22:56.708 --> 01:22:59.638
Your 18 is not equal to 31, so
look at you.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18328-0
01:22:59.648 --> 01:23:07.418
Of 644 is not 3159 is not 3132,
is not 3122, is not 3131 is 31.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18333-0
01:23:07.608 --> 01:23:08.258
So you got it.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18355-0
01:23:08.548 --> 01:23:11.696
So at the 10th location you got
it as success and this is the

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18355-1
01:23:11.696 --> 01:23:13.118
location where that item is.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18359-0
01:23:13.488 --> 01:23:14.468
What about 57?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18365-0
01:23:16.528 --> 01:23:17.118
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18368-0
01:23:17.188 --> 01:23:18.588
What is 57 mod 13?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18375-0
01:23:20.728 --> 01:23:21.258
Real quick.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18380-0
01:23:21.648 --> 01:23:23.078
Play 5 again.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18381-0
01:23:23.598 --> 01:23:24.048
For you again.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18389-0
01:23:24.068 --> 01:23:24.268
No.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18394-0
01:23:24.818 --> 01:23:26.788
So you will start probing from
here, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18418-0
01:23:27.078 --> 01:23:32.362
So 57 is not 1844, not 57, and
you'll keep probing till here 73

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18418-1
01:23:32.362 --> 01:23:33.188
is not 47.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18427-0
01:23:33.478 --> 01:23:36.458
You'll probe the next cell and
this is empty.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18437-0
01:23:36.848 --> 01:23:38.208
So now you will tell this is not
there.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18444-0
01:23:39.548 --> 01:23:40.678
You are real quick, SURBHI.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18452-0
01:23:40.688 --> 01:23:42.038
Yeah, there are three cases.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18461-0
01:23:42.648 --> 01:23:44.208
You will compute the hashed
value.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18467-0
01:23:44.218 --> 01:23:45.378
You will go to that cell.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18482-0
01:23:45.648 --> 01:23:48.898
You'll do consecutive probing
until one of this happens.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18498-0
01:23:50.208 --> 01:23:52.978
Either the key is found or it is
not found.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18522-0
01:23:53.388 --> 01:23:56.430
Meaning, when there is an empty
cell, right when there's an

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18522-1
01:23:56.430 --> 01:23:59.524
empty cell, you will stop your
algorithm and say this is not

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18522-2
01:23:59.524 --> 01:23:59.828
there.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18548-0
01:24:00.218 --> 01:24:02.864
That is where there is an
important difference between an

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18548-1
01:24:02.864 --> 01:24:05.328
array and this right in an
array, you cannot do that.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18557-0
01:24:05.338 --> 01:24:07.418
You'll have to, you know, keep
searching.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18577-0
01:24:08.098 --> 01:24:11.300
But here, if there is an empty
cell, you will stop your

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18577-1
01:24:11.300 --> 01:24:13.588
algorithm and say there is no
such key.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18580-0
01:24:14.808 --> 01:24:15.378
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18619-0
01:24:15.558 --> 01:24:19.405
Otherwise, there can be a case
where all the N items itself are

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18619-1
01:24:19.405 --> 01:24:23.072
filled, and even then we don't
have a key, so even there the

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18619-2
01:24:23.072 --> 01:24:26.438
complexity is big of end due to
probing said yes, yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18631-0
01:24:28.398 --> 01:24:29.458
So let's you know, check this.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18639-0
01:24:31.198 --> 01:24:33.368
I wanted to search for a team
again.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18647-0
01:24:33.378 --> 01:24:34.708
I applied the same hash
function.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18656-0
01:24:34.718 --> 01:24:35.968
I got the hash value S5.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18661-0
01:24:35.978 --> 01:24:37.078
I went to a of five.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18671-0
01:24:37.258 --> 01:24:39.248
I got the key so search is
successful.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18699-0
01:24:40.018 --> 01:24:45.484
I want to search for 3131 more
13 is again 5I go here it is not

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18699-1
01:24:45.484 --> 01:24:47.278
31 so I keep probing.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18712-0
01:24:47.708 --> 01:24:50.418
I keep probing here and finally
I went to 31.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18721-0
01:24:50.428 --> 01:24:52.208
I got that so search is
successful.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18744-0
01:24:52.988 --> 01:24:57.338
Now I look for 5757 mod 13 is
also again 5, but 18 is not

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18744-1
01:24:57.338 --> 01:24:58.238
equal to 57.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18754-0
01:24:58.248 --> 01:25:00.778
So look for a of six, then a of
seven.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18758-0
01:25:00.788 --> 01:25:01.698
So keep doing that.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18776-0
01:25:02.048 --> 01:25:06.238
You went till A of 11 which is
7373 is not equal to 57.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18802-0
01:25:06.708 --> 01:25:09.639
Then you hit an empty cell the
moment you see an empty cell,

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18802-1
01:25:09.639 --> 01:25:11.898
you can confidently tell that 57
is not there.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18810-0
01:25:12.428 --> 01:25:13.938
Why can you confidently tell
this?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18837-0
01:25:14.368 --> 01:25:17.605
Because if 57 was there, it
would have collided and it would

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18837-1
01:25:17.605 --> 01:25:20.736
have been somewhere here,
otherwise it would have collided

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18837-2
01:25:20.736 --> 01:25:21.638
all these places.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18844-0
01:25:21.648 --> 01:25:22.628
It would have got inserted here.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18862-0
01:25:23.548 --> 01:25:25.799
Right, it cannot be the case
that this is empty and then this

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18862-1
01:25:25.799 --> 01:25:26.308
has gone here.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18866-0
01:25:27.358 --> 01:25:28.138
Got it.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18871-0
01:25:28.148 --> 01:25:29.088
Anyways, getting this point.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18875-0
01:25:30.648 --> 01:25:31.018
Sort of.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18884-0
01:25:31.028 --> 01:25:32.418
Somebody has removed that key.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18929-0
01:25:32.258 --> 01:25:37.696
But but if if this complete
array is full in that case for

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18897-0
01:25:32.428 --> 01:25:33.448
If you deleted the key.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18929-1
01:25:37.696 --> 01:25:41.198
57 it will search till till 4th
cell.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18923-0
01:25:41.578 --> 01:25:41.938
Correct.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18936-0
01:25:41.978 --> 01:25:43.048
Yeah, that goes through this.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18951-0
01:25:43.058 --> 01:25:46.135
The third you know, case if N
cells have been unsuccessfully

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18944-0
01:25:43.238 --> 01:25:43.718
That's it.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18951-1
01:25:46.135 --> 01:25:46.488
proved.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18966-0
01:25:46.538 --> 01:25:49.568
Of course, complexity is again,
we go again, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18970-0
01:25:48.698 --> 01:25:49.698
Yeah, that's the thing.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18971-0
01:25:50.158 --> 01:25:51.028
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18983-0
01:25:51.108 --> 01:25:53.428
At the end, all these cases are
big of north only.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18999-0
01:25:53.478 --> 01:25:55.969
Yeah, the whole of hashing
concept is big O of N in the

c665b3ae-097f-4446-a5df-1f0f9956fc9a/18999-1
01:25:55.969 --> 01:25:56.458
worst case.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19002-0
01:25:57.428 --> 01:25:57.568
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19014-0
01:25:59.018 --> 01:26:01.308
But you believe you should not
have that?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19025-0
01:26:01.618 --> 01:26:03.598
Yeah, a little later, we will
look at that.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19054-0
01:26:03.818 --> 01:26:06.999
You will never allow a hash
table to be fully filled, so it

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19054-1
01:26:06.999 --> 01:26:09.438
is very rare that you go into
the worst case.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19061-0
01:26:10.818 --> 01:26:11.808
What about key 25?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19071-0
01:26:11.818 --> 01:26:13.528
Yeah, you again just quickly try
that. Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19078-0
01:26:13.538 --> 01:26:14.778
What is 25 mod 13?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19082-0
01:26:16.588 --> 01:26:17.538
Yeah, real quick, yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19087-0
01:26:20.718 --> 01:26:20.938
Well.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19091-0
01:26:21.698 --> 01:26:22.478
Yeah, 12.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19112-0
01:26:22.898 --> 01:26:25.591
You directly go to 1212 is
empty, so you declare that 25 is

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19112-1
01:26:25.591 --> 01:26:26.848
not there, which is correct.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19123-0
01:26:27.028 --> 01:26:30.108
25 is not there in this hash
table right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19132-0
01:26:31.368 --> 01:26:33.628
This this is the algorithm and
perfect.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19151-0
01:26:33.748 --> 01:26:37.376
So now let's take one of the you
know edge cases of this

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19151-1
01:26:37.376 --> 01:26:39.858
algorithm, I want to delete
something.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19161-0
01:26:41.108 --> 01:26:43.518
Yeah, for delete again as usual.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19191-0
01:26:43.628 --> 01:26:46.822
I don't know if the key that you
will give me is there or not, so

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19191-1
01:26:46.822 --> 01:26:49.968
I should first do a search if it
is there then I will delete it.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19204-0
01:26:51.608 --> 01:26:53.838
Consider the following hash
table and the hash function.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19213-0
01:26:53.848 --> 01:26:55.458
I've been given the same hash
table.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19245-0
01:26:55.888 --> 01:26:59.916
I've been told to delete 1818
mod 13 is 5, I go to five, I

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19245-1
01:26:59.916 --> 01:27:04.285
find that 18 is present, so I'll
delete it and it became empty.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19245-2
01:27:04.285 --> 01:27:04.558
Now.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19252-0
01:27:06.048 --> 01:27:06.798
Yeah, so far, so good.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19258-0
01:27:06.808 --> 01:27:08.738
All of you deletion.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19275-0
01:27:10.268 --> 01:27:13.197
You first search for it and once
you search it, you will go ahead

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19275-1
01:27:13.197 --> 01:27:13.818
and delete it.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19278-0
01:27:14.348 --> 01:27:14.978
You deleted it.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19283-0
01:27:15.788 --> 01:27:17.288
No, you will tell me.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19294-0
01:27:19.508 --> 01:27:22.048
What is I'm going to do a
search.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19304-0
01:27:22.278 --> 01:27:23.558
I'm going to do a search on 31.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19318-0
01:27:24.908 --> 01:27:25.948
What is 31 Watt?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19324-0
01:27:25.958 --> 01:27:29.708
133130 is fine, correct?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19328-0
01:27:30.568 --> 01:27:31.228
We go to five.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19338-0
01:27:31.978 --> 01:27:33.488
What did the search algorithm
say?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19346-0
01:27:33.498 --> 01:27:35.298
Whenever you find an empty cell,
what will happen?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19351-0
01:27:36.468 --> 01:27:37.238
Yeah, exactly.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19361-0
01:27:37.248 --> 01:27:38.348
That's what we're doing for a
week.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19378-0
01:27:38.358 --> 01:27:42.218
Yeah, we are searching for 31
now, 31 more, 13 is 5.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19395-0
01:27:42.688 --> 01:27:46.528
I go to this particular cell and
I see that this is empty.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19408-0
01:27:47.018 --> 01:27:49.788
So what did the search algorithm
say when a cell is empty?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19417-0
01:27:51.988 --> 01:27:52.328
Anyone.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19415-0
01:27:53.068 --> 01:27:53.698
Stop.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19435-0
01:27:53.748 --> 01:27:54.578
Stop there itself.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19442-0
01:27:54.208 --> 01:27:56.808
Yeah, they told to stop and he
told to stop and tell that that

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19444-0
01:27:56.128 --> 01:27:56.388
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19442-1
01:27:56.808 --> 01:27:57.758
algorithm is not there.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19457-0
01:27:57.828 --> 01:28:00.358
I mean that element is not
there, so I stop my search.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19465-0
01:28:00.638 --> 01:28:01.958
I tell that 31 is not there.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19474-0
01:28:02.348 --> 01:28:03.458
What is 31 there in this?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19481-0
01:28:05.358 --> 01:28:06.038
Yes, it is here.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19483-0
01:28:05.928 --> 01:28:06.048
Yes.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19490-0
01:28:07.378 --> 01:28:08.618
So there is some conflict here.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19499-0
01:28:09.488 --> 01:28:10.698
There is some problem happening.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19521-0
01:28:10.768 --> 01:28:14.775
If I delete something randomly
it would cause problems for the

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19521-1
01:28:14.775 --> 01:28:17.128
items who had collided on that
cell.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19548-0
01:28:18.198 --> 01:28:19.668
Yeah, key not phone, but
actually keys.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19558-0
01:28:19.678 --> 01:28:23.497
There pretty one is here because
31 had collided with that 18 and

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19558-1
01:28:23.497 --> 01:28:25.638
he kept on probing and he went
here.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19565-0
01:28:27.108 --> 01:28:27.808
So what do we do now?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19569-0
01:28:29.028 --> 01:28:29.418
Right.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19594-0
01:28:29.888 --> 01:28:32.602
So there are plenty of
solutions, but I want to just

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19594-1
01:28:32.602 --> 01:28:35.572
give you the solution which is a
very old one, but a very

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19594-2
01:28:35.572 --> 01:28:36.238
powerful one.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19603-0
01:28:36.688 --> 01:28:38.978
Yeah, just see what people have
proposed.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19617-0
01:28:39.108 --> 01:28:43.608
Yeah, cannot just delete the key
we want bring.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19646-0
01:28:43.618 --> 01:28:47.413
So might make it impossible to
retrieve any key K during whose

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19646-1
01:28:47.413 --> 01:28:50.846
insertion we had probed this
slot and found it occupied,

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19646-2
01:28:50.846 --> 01:28:51.208
right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19668-0
01:28:51.218 --> 01:28:54.368
Similar to our example 18 was
there and because of that 18

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19668-1
01:28:54.368 --> 01:28:56.878
this 31 got probed and he went
somewhere else.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19682-0
01:28:57.178 --> 01:29:00.501
Now if you delete this 18, then
later the search algorithm will

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19682-1
01:29:00.501 --> 01:29:00.968
not work.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19699-0
01:29:01.378 --> 01:29:06.254
So use a special value available
when you delete a key from a

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19699-1
01:29:06.254 --> 01:29:06.648
slot.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19704-0
01:29:07.558 --> 01:29:08.178
What are you doing?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19711-0
01:29:08.808 --> 01:29:10.398
You delete a value you choose.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19731-0
01:29:10.458 --> 01:29:13.764
Don't leave it empty, but put a
marker there, maybe a dollar,

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19731-1
01:29:13.764 --> 01:29:15.258
maybe a person, some symbol.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19735-0
01:29:15.348 --> 01:29:15.668
Right.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19744-0
01:29:15.868 --> 01:29:18.228
You can also put it as available
now.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19755-0
01:29:19.338 --> 01:29:22.654
This available will be
interpreted in different ways by

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19755-1
01:29:22.654 --> 01:29:23.898
different algorithms.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19788-0
01:29:25.688 --> 01:29:30.243
Search would treat available as
though the slot holds a key that

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19788-1
01:29:30.243 --> 01:29:33.886
is not match the one being
searched for and it will

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19788-2
01:29:33.886 --> 01:29:35.148
continue to probe.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19794-0
01:29:36.098 --> 01:29:36.868
There's actually.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19798-0
01:29:36.878 --> 01:29:37.778
Is there any element there?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19805-0
01:29:39.968 --> 01:29:41.528
Yeah, real quick, simple and
others.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19810-0
01:29:43.618 --> 01:29:44.108
Exactly.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19816-0
01:29:44.118 --> 01:29:45.208
This is a placeholder, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19821-0
01:29:44.348 --> 01:29:44.548
Yes.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19824-0
01:29:45.598 --> 01:29:46.808
Actually it is not there right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19875-0
01:29:46.818 --> 01:29:50.281
I deleted it so there is no
element physically there, but I

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19875-1
01:29:50.281 --> 01:29:53.918
put a marker there so when the
search algorithm comes, when it

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19875-2
01:29:53.918 --> 01:29:57.440
sees something like that, it
will imagine that there is some

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19875-3
01:29:57.440 --> 01:30:00.788
number here but that is not the
one that I'm looking for.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19903-0
01:30:01.018 --> 01:30:04.491
So it will continue to search,
whereas when a insert algorithm

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19903-1
01:30:04.491 --> 01:30:07.688
comes, it knows available means
it is actually available.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19917-0
01:30:07.858 --> 01:30:11.328
So little inserted there, so
let's see the example again.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19936-0
01:30:11.338 --> 01:30:15.391
Same case I want to delete 18
but now after deleting 18 I'll

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19936-1
01:30:15.391 --> 01:30:16.188
put it as a.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19970-0
01:30:17.578 --> 01:30:21.355
So now when a search algorithm
works great available, treat

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19970-1
01:30:21.355 --> 01:30:25.258
this A as though the slot holds
a key that does not match the

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19970-2
01:30:25.258 --> 01:30:27.588
one being searched for and
continue.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/19982-0
01:30:27.758 --> 01:30:28.828
So I'll continue to probe.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20002-0
01:30:28.838 --> 01:30:33.128
44 is not 3149, is not 31, and
so on, and I will get this 31.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20010-0
01:30:33.258 --> 01:30:33.848
So I'm happy.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20038-0
01:30:34.598 --> 01:30:37.937
Whereas if I now want to again
insert an element, let's say I

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20038-1
01:30:37.937 --> 01:30:40.468
want to insert 5757 is not there
in this list.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20052-0
01:30:40.748 --> 01:30:43.588
What is 57 mod 13 again 5?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20064-0
01:30:44.268 --> 01:30:47.028
So he will directly come and use
this slot, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20079-0
01:30:49.128 --> 01:30:51.462
All that this is actually
available, there is nothing

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20079-1
01:30:51.462 --> 01:30:51.678
here.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20093-0
01:30:51.988 --> 01:30:55.828
So he will insert 57 here and he
will use that location.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20104-0
01:30:56.988 --> 01:30:59.438
Can't it be achieved after uh
place adjustment?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20111-0
01:30:59.488 --> 01:31:00.438
So that's the problem, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20119-0
01:31:00.448 --> 01:31:01.918
I need to do a lot of
adjustments.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20138-0
01:31:01.928 --> 01:31:05.206
I don't know how many of them
you know got probed or, you

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20138-1
01:31:05.206 --> 01:31:06.958
know, collided because of this.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20166-0
01:31:07.168 --> 01:31:10.875
So it's a very simple way that
just put a search algorithm will

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20166-1
01:31:10.875 --> 01:31:14.408
treat it as it is occupied, but
not the one I'm looking for.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20195-0
01:31:14.498 --> 01:31:18.316
So I will keep probing again and
insert will actually use that

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20195-1
01:31:18.316 --> 01:31:21.408
and he will use it as though it
is an empty space.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20201-0
01:31:23.078 --> 01:31:24.658
How did you guys understand
this?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20211-0
01:31:24.668 --> 01:31:26.928
What we did, it's a very simple
solution.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20227-0
01:31:26.938 --> 01:31:30.133
Yeah, two algorithms will
interpret the same thing in

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20227-1
01:31:30.133 --> 01:31:31.258
different fashions.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20237-0
01:31:31.418 --> 01:31:33.938
What does this concept in
computer science I mean?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20257-0
01:31:33.948 --> 01:31:37.950
Not exactly this, but you can
modify the interpretations or

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20257-1
01:31:37.950 --> 01:31:41.418
you know operations, behaviors
and all that. Right.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20264-0
01:31:43.148 --> 01:31:44.378
OK, I don't want to deviate.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20276-0
01:31:44.468 --> 01:31:46.388
Then I will end up teaching
something else.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20287-0
01:31:46.868 --> 01:31:50.834
But yeah, this is all like, you
know, polymorphism and stuff,

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20287-1
01:31:50.834 --> 01:31:51.218
right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20291-0
01:31:51.268 --> 01:31:51.768
Yeah, very good.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20294-0
01:31:52.838 --> 01:31:53.228
Cool.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20305-0
01:31:53.238 --> 01:31:57.928
That being said, that is about,
you know, linear probing, right.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20313-0
01:31:58.358 --> 01:32:01.088
So now let's talk about load
factor.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20319-0
01:32:01.098 --> 01:32:01.968
Yeah, there are two more.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20321-0
01:32:01.978 --> 01:32:02.248
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20343-0
01:32:02.258 --> 01:32:05.444
So as I told, there is something
called, as you know, quadratic

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20343-1
01:32:05.444 --> 01:32:06.788
probing and double hashing.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20358-0
01:32:07.058 --> 01:32:10.048
But that is not there in your
syllabus for mid semester.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20389-0
01:32:10.438 --> 01:32:13.640
So I don't want to confuse you
by now itself covering all that

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20389-1
01:32:13.640 --> 01:32:16.741
and we don't have a lot of time
also we just have another 20

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20389-2
01:32:16.741 --> 01:32:17.148
minutes.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20414-0
01:32:17.358 --> 01:32:20.641
So we will pause it and we will
do that later to submit up

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20414-1
01:32:20.641 --> 01:32:22.978
search and delete will not use
the space.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20423-0
01:32:22.988 --> 01:32:24.938
Uh insert will uh use the space?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20442-0
01:32:24.948 --> 01:32:28.090
Exactly correct, but search and
will delete will actually

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20442-1
01:32:28.090 --> 01:32:31.178
interpret it as though there is
some key there, correct?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20477-0
01:32:31.188 --> 01:32:33.789
Otherwise, the search algorithm
would have failed, so it'll

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20477-1
01:32:33.789 --> 01:32:36.564
assume there is some key here,
but not the one I'm looking for,

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20477-2
01:32:36.564 --> 01:32:38.168
so it will go ahead and keep
search.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20489-0
01:32:39.308 --> 01:32:42.627
But so now let's discuss about
this very small concept called

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20489-1
01:32:42.627 --> 01:32:42.948
loads.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20512-0
01:32:44.568 --> 01:32:48.656
Suppose that the bucket arrays
of capacity capital N and there

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20512-1
01:32:48.656 --> 01:32:50.928
are yen entries in the hash
table.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20523-0
01:32:51.018 --> 01:32:52.878
So capital N is always capacity.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20538-0
01:32:53.688 --> 01:32:56.668
But a small N is the number of
entries in the hash table.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20554-0
01:32:57.818 --> 01:33:01.758
So load factor is defined as
Lambda which is given by small

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20554-1
01:33:01.758 --> 01:33:03.268
north by capital right.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20582-0
01:33:04.268 --> 01:33:07.846
This load factor has to be kept
below a small constant,

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20582-1
01:33:07.846 --> 01:33:11.168
preferably below one, and
usually it is .75 or 75%.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20625-0
01:33:11.988 --> 01:33:15.910
So in databases, have you done
something like this where if

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20625-1
01:33:15.910 --> 01:33:19.963
your database is almost getting
full, you try to immediately,

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20625-2
01:33:19.963 --> 01:33:23.754
you know, attach more storage
right database as a service

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20625-3
01:33:23.754 --> 01:33:27.088
people have been doing all that
these days, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20633-0
01:33:29.358 --> 01:33:29.718
Yes. No.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20641-0
01:33:30.238 --> 01:33:31.298
Is it load balancing?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20637-0
01:33:31.898 --> 01:33:32.318
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20643-0
01:33:32.328 --> 01:33:33.368
Something like that, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20667-0
01:33:33.458 --> 01:33:36.612
So when you feel that you are,
you know, almost hitting the

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20667-1
01:33:36.612 --> 01:33:38.768
threshold, you add more
resources to it.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20675-0
01:33:38.978 --> 01:33:40.288
That's what we are telling here.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20690-0
01:33:40.598 --> 01:33:44.678
We are telling here that if a
hash table is completely filled,

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20690-1
01:33:44.678 --> 01:33:46.168
there are two problems.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20710-0
01:33:46.758 --> 01:33:50.031
The first problem is you cannot
insert anymore if you are using

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20710-1
01:33:50.031 --> 01:33:51.208
open addressing, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20760-0
01:33:51.218 --> 01:33:54.503
If you are either using your
linear probing, quadratic

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20760-1
01:33:54.503 --> 01:33:58.385
probing, or your double hashing,
capital N is the threshold, you

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20760-2
01:33:58.385 --> 01:34:02.088
cannot go beyond that separate
chaining you can, but here you

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20760-3
01:34:02.088 --> 01:34:05.851
can't, but somehow you have to
insert more items than what you

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20760-4
01:34:05.851 --> 01:34:06.448
do, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20769-0
01:34:06.458 --> 01:34:07.098
So there is a problem.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20809-0
01:34:08.248 --> 01:34:11.405
The second problem is the one
that's where we had brought in

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20809-1
01:34:11.405 --> 01:34:14.718
where you told that if the coal
hash table is filled, then what

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20809-2
01:34:14.718 --> 01:34:17.358
are the difference between a
normal array in this?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20824-0
01:34:17.828 --> 01:34:20.773
Because in both of them you are
ending up searching the whole

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20824-1
01:34:20.773 --> 01:34:22.008
you know structure, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20845-0
01:34:23.518 --> 01:34:27.022
So what we want to do is we want
to always keep only 75% as

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20845-1
01:34:27.022 --> 01:34:27.898
filled maximum.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20865-0
01:34:29.478 --> 01:34:34.423
So after every insert, after
every insert you will calculate

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20865-1
01:34:34.423 --> 01:34:37.018
Lambda right after every insert.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20891-0
01:34:37.028 --> 01:34:40.563
This small end is increasing, so
this whole Lambda is also

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20891-1
01:34:40.563 --> 01:34:43.798
increasing and you will check if
it is less than 75%.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20900-0
01:34:44.348 --> 01:34:45.958
It's less than 75% is OK.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20917-0
01:34:46.438 --> 01:34:51.308
Otherwise you will do something
called as rehashing whenever we

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20917-1
01:34:51.308 --> 01:34:52.298
add elements.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20939-0
01:34:52.308 --> 01:34:55.719
It is important to keep the load
factor below a specified

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20939-1
01:34:55.719 --> 01:34:58.778
constant, so increase the size
of the bucket array.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20967-0
01:34:58.788 --> 01:35:02.199
Basically, if it is going above
that constant then increase the

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20967-1
01:35:02.199 --> 01:35:05.663
size of the bucket array, double
the size of the original array,

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20967-2
01:35:05.663 --> 01:35:07.688
meaning immediately you'll
double it.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20982-0
01:35:07.698 --> 01:35:09.588
You will not increase it by one
or two and so on.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20999-0
01:35:09.898 --> 01:35:13.401
You will double it, but while
doubling it, that new number

c665b3ae-097f-4446-a5df-1f0f9956fc9a/20999-1
01:35:13.401 --> 01:35:15.658
might not be a prime number,
correct?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21047-0
01:35:15.668 --> 01:35:19.758
For example, if capital N is 13,
double that of 13 is 26, but 26

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21047-1
01:35:19.758 --> 01:35:23.533
is not a prime number, so you
will choose the nearest prime

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21047-2
01:35:23.533 --> 01:35:27.119
number next to prime number,
change the hash function to

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21047-3
01:35:27.119 --> 01:35:28.378
match this new size.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21090-0
01:35:29.078 --> 01:35:32.548
Since this capital N has now
changed, the whole hash function

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21090-1
01:35:32.548 --> 01:35:35.459
will now change then
reperforming the whole hashing

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21090-2
01:35:35.459 --> 01:35:38.873
right, insert all the existing
hash table elements into this

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21090-3
01:35:38.873 --> 01:35:41.448
new bucket array using the new
hash function.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21103-0
01:35:42.808 --> 01:35:46.900
Such a size increase and hash
table rebuild is called as

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21103-1
01:35:46.900 --> 01:35:47.618
rehashing.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21110-0
01:35:48.408 --> 01:35:49.208
Yeah, we'll take an example.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21118-0
01:35:51.138 --> 01:35:52.748
So read this question properly.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21128-0
01:35:53.138 --> 01:35:54.878
What is the load factor of this
hash table?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21139-0
01:35:55.838 --> 01:35:57.798
Can you real quick tell me the
load factor of this?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21150-0
01:35:59.938 --> 01:36:02.018
Or I mean.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21179-0
01:36:01.488 --> 01:36:06.708
Yeah, Lambda is equal to what is
small in here 12345.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21152-0
01:36:01.988 --> 01:36:02.528
.7.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21168-0
01:36:04.098 --> 01:36:04.838
Sorry, I have.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21180-0
01:36:06.308 --> 01:36:07.088
By by 7.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21181-0
01:36:06.708 --> 01:36:08.048
Data .71.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21186-0
01:36:10.358 --> 01:36:11.048
My telephone.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21190-0
01:36:11.118 --> 01:36:12.018
That's it, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21209-0
01:36:12.398 --> 01:36:16.519
Elements of the hash table are
rehashed into another hash table

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21209-1
01:36:16.519 --> 01:36:17.228
of size 17.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21212-0
01:36:17.238 --> 01:36:18.068
So what does the 17?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21238-0
01:36:20.098 --> 01:36:25.324
The 17 is the new hash value,
you know size or new capacity,

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21230-0
01:36:23.678 --> 01:36:24.468
New capital N.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21238-1
01:36:25.324 --> 01:36:25.838
right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21237-0
01:36:25.538 --> 01:36:27.498
Next next prime number.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21240-0
01:36:26.978 --> 01:36:28.488
Right, right.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21247-0
01:36:29.588 --> 01:36:30.598
So how did we get that?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21278-0
01:36:30.608 --> 01:36:34.368
So basically we took seven and
seven into two was 14 for us,

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21278-1
01:36:34.368 --> 01:36:38.128
but 14 is not Prime, 15 is not
Prime, 16 is not Prime, 17 is

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21278-2
01:36:38.128 --> 01:36:38.498
prime.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21294-0
01:36:38.618 --> 01:36:42.901
So we took that and now the new
hash function has become xmod

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21294-1
01:36:42.901 --> 01:36:43.108
17.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21306-0
01:36:43.958 --> 01:36:45.578
So we have to rehash this whole
thing.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21319-0
01:36:46.718 --> 01:36:49.228
Technically, there's still some
.71 only right.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21339-0
01:36:49.238 --> 01:36:52.024
It is less than 75, but we have
been told to rehash so we are

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21339-1
01:36:52.024 --> 01:36:52.698
going to do it.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21344-0
01:36:54.198 --> 01:36:54.758
How do we do that?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21350-0
01:36:56.278 --> 01:36:57.448
Very, very important.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21373-0
01:36:57.998 --> 01:37:02.357
A lot of students will recreate
this table with, say, 02, you

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21373-1
01:37:02.357 --> 01:37:04.888
know, 16 or plays, as you know,
17.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21385-0
01:37:05.218 --> 01:37:06.748
But they will just copy the six
here.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21396-0
01:37:06.758 --> 01:37:08.758
They'll just copy this and so
on, which is completely wrong.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21411-0
01:37:09.738 --> 01:37:12.123
Yeah, you cannot copy it,
because now the whole hash

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21411-1
01:37:12.123 --> 01:37:13.068
function has changed.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21450-0
01:37:13.888 --> 01:37:18.835
So you have to apply the new
hash function of again game mode

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21450-1
01:37:18.835 --> 01:37:24.101
17, so 6 mod 17 the six only, so
that will go to the index 6 like

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21450-2
01:37:24.101 --> 01:37:25.458
15 will go to 15.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21466-0
01:37:25.468 --> 01:37:28.798
Mod 17 is 15 only, so it'll go
to the 15th index and so on.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21472-0
01:37:29.148 --> 01:37:30.498
So now for this one.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21479-0
01:37:30.508 --> 01:37:31.078
What is Lambda?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21488-0
01:37:32.418 --> 01:37:33.948
Is this 6 by 17?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21495-0
01:37:34.968 --> 01:37:35.448
Is that right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21505-0
01:37:36.878 --> 01:37:38.108
If I buy something, sorry.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21508-0
01:37:38.168 --> 01:37:38.278
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21515-0
01:37:38.208 --> 01:37:39.058
By by 17.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21525-0
01:37:39.428 --> 01:37:43.628
So which is way less than your,
you know previous case who?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21531-0
01:37:43.638 --> 01:37:45.028
This is your rehashing.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21546-0
01:37:45.298 --> 01:37:47.715
So rehashing every time it
crosses threshold value,

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21546-1
01:37:47.715 --> 01:37:49.388
wouldn't it be a performance
issue?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21574-0
01:37:49.398 --> 01:37:52.045
Yes, it'll be so that is why you
need to choose a very careful

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21574-1
01:37:52.045 --> 01:37:53.348
yen value for your application.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21586-0
01:37:54.028 --> 01:37:56.198
If you're randomly choose some
prime number, it will be a

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21586-1
01:37:56.198 --> 01:37:56.498
problem.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21653-0
01:37:57.198 --> 01:38:00.816
You need to be very careful on
what is my expected load and

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21653-1
01:38:00.816 --> 01:38:04.556
what is it that I'm going to
store here and depending on that

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21653-2
01:38:04.556 --> 01:38:07.993
you will choose your yen and
also when you are rehashing

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21653-3
01:38:07.993 --> 01:38:11.732
immediately you are going to do
end size and if that is not a

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21653-4
01:38:11.732 --> 01:38:14.748
prime you will go to the next
nearest prime cool.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21668-0
01:38:15.058 --> 01:38:18.135
It is very unlikely that
immediately this bigger size

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21668-1
01:38:18.135 --> 01:38:19.788
will also get filled correct.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21682-0
01:38:19.798 --> 01:38:22.917
For example, here there's only
seven, but now this has become

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21682-1
01:38:22.917 --> 01:38:23.068
17.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21696-0
01:38:24.088 --> 01:38:27.299
So the next time when I need
rehashing, what will be the next

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21696-1
01:38:27.299 --> 01:38:27.558
size?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21713-0
01:38:29.518 --> 01:38:34.088
Yeah, 17 tools are and the
nearest prime and so on.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21717-0
01:38:34.148 --> 01:38:34.488
Right.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21729-0
01:38:34.598 --> 01:38:36.928
So this will, you know, go
bigger and bigger.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21732-0
01:38:35.738 --> 01:38:35.938
30.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21738-0
01:38:36.938 --> 01:38:38.778
So you are not doing every other
day, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21740-0
01:38:39.708 --> 01:38:40.078
Cool.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21743-0
01:38:40.468 --> 01:38:40.988
Yeah, go ahead.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21749-0
01:38:44.568 --> 01:38:45.208
You have some questions.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21781-0
01:38:49.178 --> 01:38:53.541
To this .7 this is .3 you have
reduced your Lambda value 2

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21781-1
01:38:53.541 --> 01:38:57.978
lesser one usually N is not
known in advance for hash table

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21781-2
01:38:57.978 --> 01:38:59.088
data structure.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21785-0
01:38:59.098 --> 01:38:59.448
Yes.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21789-0
01:38:59.458 --> 01:39:00.528
No, not known.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21852-0
01:39:00.538 --> 01:39:04.232
Meaning we have to determine
that right when you are going to

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21852-1
01:39:04.232 --> 01:39:07.808
use it hash table for your own
use case, you'll have to 1st

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21852-2
01:39:07.808 --> 01:39:11.205
talk to, you know, domain
experts on what is it that I'm

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21852-3
01:39:11.205 --> 01:39:15.138
planning to store here and is it
like a streaming data that keeps

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21852-4
01:39:15.138 --> 01:39:18.475
coming if it's a streaming data
then this is a bad data

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21852-5
01:39:18.475 --> 01:39:19.488
structure, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21865-0
01:39:19.618 --> 01:39:23.068
Should not use hash table to do
all that right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21922-0
01:39:23.078 --> 01:39:27.232
So it depends on what type of
data you are storing and what is

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21922-1
01:39:27.232 --> 01:39:31.320
the probability N and domain
experts will tell you that N and

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21922-2
01:39:31.320 --> 01:39:35.474
again as I told from then you
are going to 2 NA little greater

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21922-3
01:39:35.474 --> 01:39:39.628
than two N based on prime, then
again 2 N from that and so on.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21938-0
01:39:39.838 --> 01:39:42.138
So you're not going to keep
doing it, so that's fine.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21935-0
01:39:43.338 --> 01:39:43.638
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21948-0
01:39:43.648 --> 01:39:45.188
So like so for example.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21951-0
01:39:45.198 --> 01:39:45.408
So.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21969-0
01:39:45.418 --> 01:39:49.188
So in system design like uh,
based on the capacity, this can

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21969-1
01:39:49.188 --> 01:39:49.868
be decided.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21973-0
01:39:50.258 --> 01:39:50.498
Correct.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22016-0
01:39:50.278 --> 01:39:54.052
But when it comes to like the
data structure like the data

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22016-1
01:39:54.052 --> 01:39:57.890
types, basically that we have in
a programming language for

c665b3ae-097f-4446-a5df-1f0f9956fc9a/21991-0
01:39:55.988 --> 01:39:56.208
Uh-huh.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22016-2
01:39:57.890 --> 01:40:01.985
example, we have like hash table
or like dictionary right which

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22012-0
01:40:01.848 --> 01:40:02.138
Correct.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22016-3
01:40:01.985 --> 01:40:03.648
are anyways using hashing.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22043-0
01:40:03.778 --> 01:40:08.277
So in those like data types we
we do not have the known

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22018-0
01:40:04.198 --> 01:40:04.518
Correct.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22043-1
01:40:08.277 --> 01:40:10.768
capacity known in advance here.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22039-0
01:40:09.108 --> 01:40:11.448
A control over it, correct?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22060-0
01:40:11.598 --> 01:40:14.545
So that is because these
programming language hash table

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22060-1
01:40:14.545 --> 01:40:17.338
implementations will
automatically take care of this.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22065-0
01:40:18.318 --> 01:40:18.928
You get it right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22079-0
01:40:18.938 --> 01:40:21.448
Just like, uh, an analogy would
be your CPU usage.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22122-0
01:40:21.898 --> 01:40:25.809
When your CPU is almost hitting
90 threshold and so on, it will

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22122-1
01:40:25.809 --> 01:40:29.476
automatically, you know, kill
certain processes and it will

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22122-2
01:40:29.476 --> 01:40:33.081
bring the you know processor or
I mean CPU usage to around

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22122-3
01:40:33.081 --> 01:40:33.448
6070%.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22137-0
01:40:33.458 --> 01:40:37.990
Again like that your inbuilt
things that Python offers or say

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22137-1
01:40:37.990 --> 01:40:38.868
Java offers.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22158-0
01:40:39.318 --> 01:40:42.242
They already know that your hash
table is getting filled, so they

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22158-1
01:40:42.242 --> 01:40:44.458
will be internally able to
rehash certain things.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22161-0
01:40:45.488 --> 01:40:45.648
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22177-0
01:40:46.778 --> 01:40:49.573
So if you're directly using a
library, then you don't need any

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22177-1
01:40:49.573 --> 01:40:49.928
of this.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22196-0
01:40:50.318 --> 01:40:53.057
Yeah, but this course is all
about what is the actual

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22196-1
01:40:53.057 --> 01:40:55.848
fundamental principle of these
data structures, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22223-0
01:40:55.858 --> 01:40:59.285
If you directly use a hash set
or a hash table or a hash map,

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22223-1
01:40:59.285 --> 01:41:01.938
then you need to just you know,
start using it.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22238-0
01:41:01.988 --> 01:41:04.814
You don't need to worry about
these intricacies of Lambda and

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22238-1
01:41:04.814 --> 01:41:05.088
so on.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22250-0
01:41:07.358 --> 01:41:07.518
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22247-0
01:41:08.408 --> 01:41:08.918
Uh said.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22255-0
01:41:08.968 --> 01:41:09.978
Uh, just one more thing.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22261-0
01:41:10.818 --> 01:41:10.998
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22294-0
01:41:10.888 --> 01:41:16.370
So what is the significance of
converting the size from 7 to 17

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22294-1
01:41:16.370 --> 01:41:21.252
like uh, even though our
requirement has been fulfilling

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22294-2
01:41:21.252 --> 01:41:23.908
when we are taking it as seven.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22309-0
01:41:23.918 --> 01:41:25.578
So I mean.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22305-0
01:41:25.218 --> 01:41:26.588
No, it is not seven, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22341-0
01:41:26.598 --> 01:41:29.754
I mean it's slowly your
requirement is going down like

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22341-1
01:41:29.754 --> 01:41:33.141
you are in the hazard of when
two more new items come here

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22341-2
01:41:33.141 --> 01:41:36.068
then your whole hash table will
get filled, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22355-0
01:41:36.118 --> 01:41:37.798
So it's a very precautious
mether.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22347-0
01:41:36.268 --> 01:41:36.778
OK.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22360-0
01:41:36.788 --> 01:41:37.178
OK.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22362-0
01:41:37.188 --> 01:41:39.178
OK, cool.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22391-0
01:41:38.178 --> 01:41:42.252
So when it is 75% full, you want
to proactively increase the size

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22365-0
01:41:39.188 --> 01:41:39.358
Cool.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22381-0
01:41:39.368 --> 01:41:41.618
Got it, Sir. Umm.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22391-1
01:41:42.252 --> 01:41:44.968
rather than waiting for this to
get filled.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22409-0
01:41:45.098 --> 01:41:48.503
And then you know, not having
space to insert anything in hash

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22407-0
01:41:47.428 --> 01:41:47.788
OK.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22409-1
01:41:48.503 --> 01:41:48.828
table.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22418-0
01:41:49.198 --> 01:41:51.078
So you're proactively creating a
new table.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22416-0
01:41:50.248 --> 01:41:50.588
OK.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22428-0
01:41:52.838 --> 01:41:54.648
Uh, so, uh, just follow up
questions, Sir.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22434-0
01:41:54.658 --> 01:41:56.188
So uh is that any?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22454-0
01:41:56.198 --> 01:42:01.888
Uh, static value that it should
get changed with certain amount.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22476-0
01:42:02.118 --> 01:42:07.268
That amount is actually fixed or
like OK .75 rounds.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22459-0
01:42:02.648 --> 01:42:02.788
Yes.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22505-0
01:42:05.048 --> 01:42:09.858
Yeah, .75 right, 75%, yeah,
around 75%.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22479-0
01:42:07.358 --> 01:42:07.908
Fine, fine.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22481-0
01:42:07.918 --> 01:42:08.288
OK.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22487-0
01:42:08.298 --> 01:42:08.808
Thank you, Sir.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22495-0
01:42:08.818 --> 01:42:09.168
Thank you.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22500-0
01:42:09.938 --> 01:42:10.408
Got it.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22502-0
01:42:10.978 --> 01:42:11.418
Got it.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22510-0
01:42:11.468 --> 01:42:11.898
Thank you, Sir.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22515-0
01:42:11.488 --> 01:42:15.328
All that being said, yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22529-0
01:42:15.338 --> 01:42:19.008
So as we already saw, for all of
them, we go of N only right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22543-0
01:42:19.018 --> 01:42:21.968
That is the complexity, but it
has its own advantages, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22582-0
01:42:22.278 --> 01:42:26.219
So you can do quickly searches
and you know things like that

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22582-1
01:42:26.219 --> 01:42:30.096
and applications someone was
asking so DNS resolutions like

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22582-2
01:42:30.096 --> 01:42:33.068
google.com is actually not
google.com, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22594-0
01:42:33.078 --> 01:42:35.648
It's actually an IP address, so
those could also be.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22611-0
01:42:35.658 --> 01:42:37.871
You know the address can serve
as the key and you know things

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22611-1
01:42:37.871 --> 01:42:38.228
like that.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22618-0
01:42:38.718 --> 01:42:40.908
You can use password
verification using.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22629-0
01:42:41.428 --> 01:42:44.608
You know, hashing compilers also
use them internally.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22634-0
01:42:45.178 --> 01:42:47.208
Online spell checking tools,
right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22665-0
01:42:47.218 --> 01:42:50.954
Any spell checker tools for a
correct spelling, you can, you

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22665-1
01:42:50.954 --> 01:42:54.752
know, calculate the hash value
and keep it for anything which

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22665-2
01:42:54.752 --> 01:42:56.038
is similar but wrong.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22674-0
01:42:56.398 --> 01:42:59.008
It's hashed value will be
different, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22691-0
01:42:59.018 --> 01:43:01.288
So it'll be able to give you
some red lines and so on.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22707-0
01:43:01.298 --> 01:43:04.448
And you know, it's way beyond
all this, but it uses somewhere,

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22707-1
01:43:04.448 --> 01:43:05.348
you know, hashing.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22714-0
01:43:05.478 --> 01:43:06.308
So I've given it.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22724-0
01:43:06.578 --> 01:43:10.902
You can explore more about it,
pattern matching and plagiarism,

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22724-1
01:43:10.902 --> 01:43:11.308
right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22755-0
01:43:11.498 --> 01:43:14.847
So for example, if two people
have submitted an assignment and

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22755-1
01:43:14.847 --> 01:43:18.302
their hashed values are exactly
the same, then what does it mean

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22755-2
01:43:18.302 --> 01:43:18.568
then?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22769-0
01:43:18.578 --> 01:43:19.948
It means the key itself is the
same.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22786-0
01:43:20.888 --> 01:43:24.107
If the key itself is the same,
it means two people have exactly

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22786-1
01:43:24.107 --> 01:43:26.018
submitted the same document,
correct?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22795-0
01:43:28.168 --> 01:43:29.668
Yes, no. Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22802-0
01:43:28.308 --> 01:43:28.898
Alright so.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22829-0
01:43:29.678 --> 01:43:32.971
So in some ways I mean I'm just
throwing some ideas to you, but

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22829-1
01:43:32.971 --> 01:43:36.316
plagiarism check and all that is
way more than, you know, just a

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22829-2
01:43:36.316 --> 01:43:36.728
hashing.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22862-0
01:43:37.038 --> 01:43:40.538
You will learn about these in
your upcoming courses in you

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22862-1
01:43:40.538 --> 01:43:44.157
know your information retrieval
or NLP and all that, but you

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22862-2
01:43:44.157 --> 01:43:47.658
could also use certain data
structures like these in them.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22871-0
01:43:48.678 --> 01:43:50.308
So I'm just, you know, throwing
those.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22893-0
01:43:50.938 --> 01:43:53.948
So the journey so far, what all
we have done right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22930-0
01:43:53.838 --> 01:43:58.402
Senator, I have one question
that might be silly, but why we

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22900-0
01:43:54.138 --> 01:43:56.348
So can someone, yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22930-1
01:43:58.402 --> 01:44:02.817
cannot imply this hashing
technique in error also like 75%

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22930-2
01:44:02.817 --> 01:44:06.858
then error will increase size of
error will increase.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22945-0
01:44:07.968 --> 01:44:08.708
Something like that.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22936-0
01:44:08.168 --> 01:44:09.058
Size of error.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22949-0
01:44:09.068 --> 01:44:10.138
Meaning, what do you mean by
that?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22952-0
01:44:10.218 --> 01:44:12.028
It it it it it it?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22974-0
01:44:12.378 --> 01:44:16.078
Sorry Eric, size of Arabic
countries.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22967-0
01:44:13.878 --> 01:44:14.958
Yeah, that is what we are doing,
right.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22978-0
01:44:17.188 --> 01:44:18.298
Yeah, that is what we are doing.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22997-0
01:44:18.308 --> 01:44:22.803
I mean when it hits 70%, we are
going to automatically change

c665b3ae-097f-4446-a5df-1f0f9956fc9a/22997-1
01:44:22.803 --> 01:44:23.818
yen to two NF.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23005-0
01:44:23.828 --> 01:44:24.728
2 N is not a prime.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23019-0
01:44:24.738 --> 01:44:27.699
The next nearest prime so
automatically this whole new

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23019-1
01:44:27.699 --> 01:44:28.938
table will get created.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23022-0
01:44:28.948 --> 01:44:29.748
Rehashing will happen.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23026-0
01:44:31.958 --> 01:44:32.178
Who?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23050-0
01:44:32.188 --> 01:44:36.633
Why they are not studying in the
error data databases like sorry

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23050-1
01:44:36.633 --> 01:44:39.848
data, data structure in error
data structures?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23074-0
01:44:40.938 --> 01:44:44.018
Why we are calling this is a
hashing in hashing.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23070-0
01:44:44.778 --> 01:44:45.298
No in ARAY.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23084-0
01:44:45.308 --> 01:44:48.513
Also, we are doing and that is
what is called your array list,

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23084-1
01:44:48.513 --> 01:44:48.818
right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23100-0
01:44:48.828 --> 01:44:51.368
So there is a concept called
array list in your programming

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23100-1
01:44:51.368 --> 01:44:52.088
languages, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23111-0
01:44:52.458 --> 01:44:53.508
They call that an array.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23130-0
01:44:53.518 --> 01:44:57.431
List can grow or expand in array
list there is no problem of

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23120-0
01:44:54.238 --> 01:44:54.488
Oops.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23130-1
01:44:57.431 --> 01:44:58.458
capital N right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23149-0
01:44:58.468 --> 01:45:01.298
It can keep growing, so that is
what they do in an array list.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23151-0
01:45:01.348 --> 01:45:02.148
Array also can grow.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23173-0
01:45:04.218 --> 01:45:05.398
OK, together think of.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23181-0
01:45:04.388 --> 01:45:07.318
So in your amortized analysis
class in webinar, this was

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23181-1
01:45:07.318 --> 01:45:08.038
covered right.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23194-0
01:45:08.908 --> 01:45:11.718
If you hit a threshold in an
array also you can extend it.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23208-0
01:45:12.168 --> 01:45:15.878
You can double the size and then
we spoke about amortization.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23222-0
01:45:16.248 --> 01:45:19.598
Yeah, this someone remember that
I did not take the class.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23228-0
01:45:18.778 --> 01:45:18.918
Yes.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23229-0
01:45:19.608 --> 01:45:20.568
It was in the webinar.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23242-0
01:45:22.758 --> 01:45:24.028
Yeah, in area also you can do
that.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23265-0
01:45:24.038 --> 01:45:27.100
You can actually double the size
and keep doing that, but in

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23265-1
01:45:27.100 --> 01:45:29.008
array for search there is no
benefit.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23293-0
01:45:29.018 --> 01:45:32.273
You'll have to still search all
the elements, but here if I want

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23293-1
01:45:32.273 --> 01:45:35.127
to search for a key six, I'm not
going to start from the

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23293-2
01:45:35.127 --> 01:45:35.628
beginning.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23307-0
01:45:35.678 --> 01:45:38.568
I'm going to directly do 6 mod
17 and 6.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23324-0
01:45:38.578 --> 01:45:41.319
Mod 17 is 6 only directly come
here and check if that is the

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23324-1
01:45:41.319 --> 01:45:41.948
answer or not.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23334-0
01:45:41.998 --> 01:45:45.088
I mean the element that I'm
looking or not, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23361-0
01:45:46.868 --> 01:45:49.108
So it is helping us in the
search part, yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23348-0
01:45:47.258 --> 01:45:47.828
Yes, Sir.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23357-0
01:45:47.898 --> 01:45:48.648
What did you think?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23359-0
01:45:48.658 --> 01:45:48.778
You.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23362-0
01:45:49.858 --> 01:45:50.198
Yes, yes.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23377-0
01:45:51.848 --> 01:45:54.208
For real quick will tell me what
all we have done so far.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23384-0
01:45:56.888 --> 01:45:58.088
Yeah, maybe one person.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23386-0
01:45:58.098 --> 01:45:58.528
One class?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23389-0
01:46:00.138 --> 01:46:00.368
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23394-0
01:46:00.378 --> 01:46:01.238
First class, what did we do?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23421-0
01:46:05.838 --> 01:46:08.329
OK, let me really quickly you
know, tell you so first class we

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23426-0
01:46:07.898 --> 01:46:08.758
Order of growth.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23421-1
01:46:08.329 --> 01:46:09.358
didn't do array and so on.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23436-0
01:46:09.398 --> 01:46:12.168
Yeah, we actually, yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23431-0
01:46:09.798 --> 01:46:11.248
I go, I'll go ahead.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23437-0
01:46:11.758 --> 01:46:12.918
Teams you don't quote.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23440-0
01:46:14.268 --> 01:46:14.638
Right.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23473-0
01:46:15.108 --> 01:46:18.919
So firstly we got a motivation
towards why is data structures

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23451-0
01:46:15.288 --> 01:46:15.608
Uh.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23473-1
01:46:18.919 --> 01:46:22.668
and algorithms important, and we
you know to get from there.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23493-0
01:46:22.678 --> 01:46:25.999
We told if one person is solving
a problem and another is not,

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23493-1
01:46:25.999 --> 01:46:27.528
then there is a clear winner.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23512-0
01:46:28.378 --> 01:46:31.218
But if multiple people are
solving the same problem, then

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23512-1
01:46:31.218 --> 01:46:33.128
there is a problem of which is
better.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23518-0
01:46:34.078 --> 01:46:36.008
Better meaning based on time and
space.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23545-0
01:46:36.438 --> 01:46:39.649
So we told time complexity,
space complexity, order of

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23545-1
01:46:39.649 --> 01:46:42.977
growth, pseudo code and how do
you, you know, derive the

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23545-2
01:46:42.977 --> 01:46:45.138
complexity using pseudo code,
right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23552-0
01:46:45.148 --> 01:46:47.088
There is something called
accounting primitives.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23560-0
01:46:47.358 --> 01:46:48.408
You will count the primitives.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23563-0
01:46:48.418 --> 01:46:49.238
You will simplify it.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23573-0
01:46:49.248 --> 01:46:50.628
You will ignore the lower order
term.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23585-0
01:46:50.638 --> 01:46:52.968
You will cancel the constant and
what you get.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23594-0
01:46:52.978 --> 01:46:55.708
You will put it in your
asymptotic notation.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23597-0
01:46:55.778 --> 01:46:56.048
We go.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23615-0
01:46:57.068 --> 01:46:59.911
Yeah, this was all the first
class and then we went to the

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23615-1
01:46:59.911 --> 01:47:00.538
second class.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23634-0
01:47:00.548 --> 01:47:04.114
We started learning about some
small tricks and myths and about

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23634-1
01:47:04.114 --> 01:47:05.898
if there is one loop, it is yen.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23646-0
01:47:05.908 --> 01:47:07.658
If it is 2 loops, it is North
Square.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23655-0
01:47:07.748 --> 01:47:09.218
If it is 3 loops, it's N cube.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23660-0
01:47:09.228 --> 01:47:10.178
All that is wrong.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23668-0
01:47:10.688 --> 01:47:12.758
It all depends on the body of
the loop.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23675-0
01:47:12.768 --> 01:47:13.758
What if I have a break?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23683-0
01:47:13.828 --> 01:47:15.598
What if I have a continue right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23687-0
01:47:15.608 --> 01:47:16.238
Things like that.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23713-0
01:47:16.508 --> 01:47:19.955
So we told don't go by just
crude logic algorithm analysis

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23713-1
01:47:19.955 --> 01:47:22.468
is a very systematic step by
step process.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23734-0
01:47:22.848 --> 01:47:26.620
If a code is given, you'll have
to analyze it line by line and

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23734-1
01:47:26.620 --> 01:47:27.938
then try to derive it.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23762-0
01:47:28.568 --> 01:47:30.771
And we also told if there is,
you know there is a type of

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23762-1
01:47:30.771 --> 01:47:33.278
algorithm called recursion where
you call itself again and again.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23802-0
01:47:33.288 --> 01:47:36.713
There's a base case and all
that, so if it is a normal

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23802-1
01:47:36.713 --> 01:47:40.699
iterative algorithm, you could
just write the pseudocode, count

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23802-2
01:47:40.699 --> 01:47:44.560
the primitives, see how many
times it executes, summarize it,

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23802-3
01:47:44.560 --> 01:47:45.308
simplify it.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23807-0
01:47:45.358 --> 01:47:45.988
Get that, Sir.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23835-0
01:47:46.338 --> 01:47:49.382
But if it is a recursive
algorithm, you might have to

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23835-1
01:47:49.382 --> 01:47:52.651
create something called as a
recurrence relation and that

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23835-2
01:47:52.651 --> 01:47:55.188
recurrence relation has to be
solved, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23862-0
01:47:55.198 --> 01:47:59.399
You can either use your
substitution method or you can

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23862-1
01:47:59.399 --> 01:48:04.058
use the ADOC tree method or you
can use the masters theorem.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23874-0
01:48:04.148 --> 01:48:06.811
Masters Theorem had a lot of sub
cases and all those things

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23874-1
01:48:06.811 --> 01:48:07.078
right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23880-0
01:48:07.388 --> 01:48:08.418
This is all we had learned.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23897-0
01:48:08.768 --> 01:48:11.386
And then in the third class, we
got started with linear data

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23897-1
01:48:11.386 --> 01:48:11.858
structures.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23907-0
01:48:12.248 --> 01:48:13.898
We told what is an array, what
is the stack?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23913-0
01:48:13.908 --> 01:48:14.738
What is a queue?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23919-0
01:48:14.858 --> 01:48:16.478
Whether what principle does
stack follow?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23946-0
01:48:19.138 --> 01:48:24.766
Yeah, stack last in, first out,
right leaf and Q follows first

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23946-1
01:48:24.766 --> 01:48:25.928
in first out.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23960-0
01:48:26.188 --> 01:48:26.618
Boston.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23954-0
01:48:26.298 --> 01:48:27.888
So for all of them, we learned
operations.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23962-0
01:48:27.898 --> 01:48:28.608
What is tall?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23995-0
01:48:28.618 --> 01:48:31.396
You know top what is, you know,
NQ, what is dequeue, what is

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23995-1
01:48:31.396 --> 01:48:34.174
pushing, what is popping, how
can you implement a stack or a

c665b3ae-097f-4446-a5df-1f0f9956fc9a/23995-2
01:48:34.174 --> 01:48:34.448
queue.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24008-0
01:48:34.508 --> 01:48:37.568
You can either use array or you
can use a linked list.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24042-0
01:48:37.798 --> 01:48:40.850
Then we learned linked list,
doubly linked list all those

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24042-1
01:48:40.850 --> 01:48:43.849
properties and we closed that
day and then in the fourth

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24042-2
01:48:43.849 --> 01:48:46.638
session we told not about
nonlinear data structures.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24085-0
01:48:46.648 --> 01:48:49.964
If you want to represent the org
structure, not all of them are

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24085-1
01:48:49.964 --> 01:48:53.279
linear, there is a relationship
between the you know parent and

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24085-2
01:48:53.279 --> 01:48:56.388
child, so that was about trees
and about a lot of different

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24085-3
01:48:56.388 --> 01:48:57.528
types of trees, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24091-0
01:48:58.368 --> 01:48:59.948
Binary tree proper binary tree.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24098-0
01:48:59.958 --> 01:49:01.898
Perfect binary tree complete
binary tree.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24164-0
01:49:01.968 --> 01:49:05.117
A lot of properties around them
about inorder traversal,

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24164-1
01:49:05.117 --> 01:49:08.598
preorder traversal, postorder
traversal, all that we looked at

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24164-2
01:49:08.598 --> 01:49:11.969
and then we put a constraint on
the traversals or I mean the

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24164-3
01:49:11.969 --> 01:49:15.450
tree itself and told that if the
parent nodes are greater than

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24164-4
01:49:15.450 --> 01:49:17.218
the children, it is a Max sleep.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24178-0
01:49:17.518 --> 01:49:21.186
If the parent nodes are smaller
than the children, it is min

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24178-1
01:49:21.186 --> 01:49:21.908
heap, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24193-0
01:49:21.918 --> 01:49:25.408
We learned about they property
is, you know, shape property.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24196-0
01:49:25.418 --> 01:49:26.128
He property.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24201-0
01:49:26.318 --> 01:49:26.978
What is heaps?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24210-0
01:49:26.988 --> 01:49:27.888
How to do insertion?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24225-0
01:49:27.898 --> 01:49:31.458
What does he P fication EP
fication is just the umbrella

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24225-1
01:49:31.458 --> 01:49:32.208
name, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24234-0
01:49:32.218 --> 01:49:33.308
All that you are doing this.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24245-0
01:49:33.318 --> 01:49:36.128
It's a process for converting a
non heap into a heap.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24328-0
01:49:36.458 --> 01:49:39.913
Either you can use Max Heapify
or min epiphany and then we also

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24328-1
01:49:39.913 --> 01:49:43.422
learned about some applications
of heaps before that we inserted

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24328-2
01:49:43.422 --> 01:49:46.769
things into heap and we learned
principles like you know down

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24328-3
01:49:46.769 --> 01:49:50.224
heap bubbling up, heap bubbling
and about you know applications

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24328-4
01:49:50.224 --> 01:49:53.139
of heap which is heap sort
whatever numbers are given

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24328-5
01:49:53.139 --> 01:49:56.270
create a heap then delete
everything as a result what you

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24328-6
01:49:56.270 --> 01:49:57.458
get is a sorted order.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24387-0
01:49:58.798 --> 01:50:02.195
Then we learned priority queues,
which is also at another

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24387-1
01:50:02.195 --> 01:50:05.884
application of heap and then we
stopped about keeps and we got

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24387-2
01:50:05.884 --> 01:50:09.574
into graphs for a network type
of a data structure where there

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24387-3
01:50:09.574 --> 01:50:12.971
is no actual routed you know
three where there can be any

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24387-4
01:50:12.971 --> 01:50:15.548
number of routes or there is no
connection.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24384-0
01:50:13.308 --> 01:50:13.578
Is that?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24409-0
01:50:15.558 --> 01:50:17.829
As you know parent child where
it is more like a network

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24404-0
01:50:17.558 --> 01:50:17.948
Of them.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24409-1
01:50:17.829 --> 01:50:18.228
structure.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24433-0
01:50:17.958 --> 01:50:20.278
Enough have you with me now.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24411-0
01:50:19.318 --> 01:50:19.748
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24421-0
01:50:19.798 --> 01:50:20.688
And he was late.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24437-0
01:50:21.108 --> 01:50:21.818
Interview.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24426-0
01:50:21.428 --> 01:50:21.708
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24429-0
01:50:21.718 --> 01:50:22.158
Who's that?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24436-0
01:50:22.168 --> 01:50:22.798
Who's unmuted?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24445-0
01:50:23.118 --> 01:50:25.048
Yeah, huh.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24446-0
01:50:25.108 --> 01:50:26.198
How can you please mute?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24450-0
01:50:28.558 --> 01:50:28.718
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24452-0
01:50:30.248 --> 01:50:30.598
Cool.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24474-0
01:50:30.608 --> 01:50:33.928
Uh, so then we got started with,
you know, graphs like where it's

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24474-1
01:50:33.928 --> 01:50:35.638
a network type of data
structure.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24486-0
01:50:35.868 --> 01:50:37.678
And we saw both a lot of
terminologies.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24494-0
01:50:37.688 --> 01:50:39.358
Again, like you know what is
adjacent edge?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24502-0
01:50:39.368 --> 01:50:40.938
What is, you know, a subgraph?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24506-0
01:50:40.948 --> 01:50:41.558
What is degree?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24516-0
01:50:41.568 --> 01:50:42.938
What is, you know, all those
things.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24532-0
01:50:43.228 --> 01:50:47.398
And we also learned about the
types of graph traversal right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24537-0
01:50:47.408 --> 01:50:48.748
You can do it using BFS.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24564-0
01:50:48.798 --> 01:50:52.883
You can do it using DFS or you
know, although there are also

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24564-1
01:50:52.883 --> 01:50:55.428
directed undirected edges and so
one.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24580-0
01:50:55.858 --> 01:51:00.248
But we have also not done a lot
of things about directed graphs.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24587-0
01:51:00.738 --> 01:51:02.728
Directed graphs are always
interesting, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24609-0
01:51:03.078 --> 01:51:06.439
So there's a possibility that I
can go to a place, but I cannot

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24609-1
01:51:06.439 --> 01:51:08.068
go to some other places, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24619-0
01:51:08.078 --> 01:51:09.568
More like a one way, two way and
so on.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24637-0
01:51:09.998 --> 01:51:12.963
So we will explore more about
graphs in the later part of the

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24637-1
01:51:12.963 --> 01:51:13.298
course.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24657-0
01:51:13.618 --> 01:51:16.562
We will learn algorithms like
you know, shortest path like

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24657-1
01:51:16.562 --> 01:51:18.958
minimum spanning tree, a lot
more things right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24668-0
01:51:18.968 --> 01:51:21.648
We will learn that later, but
for now we just spoke.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24679-0
01:51:21.658 --> 01:51:23.368
What is a graph as a data
structure?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24697-0
01:51:24.068 --> 01:51:27.117
And then we learned about BST
which is putting some clauses

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24697-1
01:51:27.117 --> 01:51:28.438
believing it will help us.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24733-0
01:51:28.948 --> 01:51:32.418
All smaller values go to left,
all greater values go to right

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24733-1
01:51:32.418 --> 01:51:35.553
that follows in every level,
every node and you know we

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24733-2
01:51:35.553 --> 01:51:38.688
learned about insertions,
deletions today and all that.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24736-0
01:51:39.038 --> 01:51:40.088
But that's skewed.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24740-0
01:51:40.098 --> 01:51:41.008
Ness was a problem.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24747-0
01:51:41.078 --> 01:51:42.308
He could still not help us.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24754-0
01:51:42.398 --> 01:51:43.858
Complexity became big of yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24758-0
01:51:44.828 --> 01:51:44.988
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24771-0
01:51:46.488 --> 01:51:50.283
Maybe then finally completed BSD
and learned about what is

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24771-1
01:51:50.283 --> 01:51:50.798
hashing?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24774-0
01:51:50.808 --> 01:51:51.838
What is collision?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24780-0
01:51:51.968 --> 01:51:52.968
How do you resolve collision?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24785-0
01:51:52.978 --> 01:51:53.918
What is separate chaining?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24804-0
01:51:53.928 --> 01:51:56.791
What is linear probing, so
quadratic probing and double

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24804-1
01:51:56.791 --> 01:51:58.938
hashing is also like linear
probing only.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24817-0
01:51:58.948 --> 01:52:02.218
It follows the same principles,
but it's a very small concept.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24830-0
01:52:02.228 --> 01:52:04.938
We will take it up after the mid
semester exam.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24899-0
01:52:05.878 --> 01:52:09.497
Apart from this you had UH-2
webinars in the first webinar we

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24899-1
01:52:09.497 --> 01:52:12.649
spoke about, you know
applications of stacks and also

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24899-2
01:52:12.649 --> 01:52:16.093
about you know, how do you
convert expressions or evaluate

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24899-3
01:52:16.093 --> 01:52:19.362
expressions and what is
amortized analysis and you know

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24899-4
01:52:19.362 --> 01:52:22.923
in the second one we also, you
know learned more about trees

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24899-5
01:52:22.923 --> 01:52:25.258
and about you know also
selection sort.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24919-0
01:52:25.268 --> 01:52:28.210
I believe how did you learn
about selection sort in the

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24919-1
01:52:28.210 --> 01:52:28.998
second webinar?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24926-0
01:52:30.638 --> 01:52:31.148
He is so.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24921-0
01:52:30.688 --> 01:52:30.828
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24925-0
01:52:30.688 --> 01:52:31.088
Yes, yes.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24935-0
01:52:31.688 --> 01:52:31.828
Yes.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24923-0
01:52:31.978 --> 01:52:32.158
Uh.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24927-0
01:52:32.358 --> 01:52:32.778
Perfect.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24929-0
01:52:32.788 --> 01:52:33.108
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24948-0
01:52:33.118 --> 01:52:34.108
So I wish I had taken that.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24952-0
01:52:33.468 --> 01:52:34.508
The Sudoku was given.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24950-0
01:52:35.288 --> 01:52:35.638
OK.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24954-0
01:52:35.648 --> 01:52:36.498
OK, perfect.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24962-0
01:52:36.828 --> 01:52:38.758
And then yeah, that's where we
are.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24983-0
01:52:38.808 --> 01:52:42.869
So we are now going to take a
break for our uh mid semester

c665b3ae-097f-4446-a5df-1f0f9956fc9a/24983-1
01:52:42.869 --> 01:52:44.358
exam and all the rest.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25019-0
01:52:45.208 --> 01:52:49.052
So the mid semester exam, so the
portions for mid semester exam

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25019-1
01:52:49.052 --> 01:52:52.775
will be till what we covered
today including the webinars and

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25019-2
01:52:52.775 --> 01:52:55.298
but I will put a very clear
announcement.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25054-0
01:52:55.308 --> 01:52:58.556
Yeah, I'll also check with
Professor again and I'll put an

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25054-1
01:52:58.556 --> 01:53:02.025
announcement maybe by tomorrow
on what exactly is the portion,

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25054-2
01:53:02.025 --> 01:53:04.558
but it'll be till what we have
covered today.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25059-0
01:53:05.188 --> 01:53:06.098
Do you have an eye on it?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25068-0
01:53:06.988 --> 01:53:09.108
And a sample paper or a past
paper.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25078-0
01:53:09.118 --> 01:53:10.348
Uh, and so on will be uploaded.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25086-0
01:53:11.798 --> 01:53:13.728
Uh, tomorrow again, with the
same announcement.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25099-0
01:53:13.738 --> 01:53:16.438
I'll also be posting some
papers, but a word of caution.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25103-0
01:53:17.508 --> 01:53:17.858
Uh.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25111-0
01:53:17.868 --> 01:53:20.318
For a lot of past few years.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25118-0
01:53:20.378 --> 01:53:23.208
Uh, the exam has been online
mode.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25120-0
01:53:24.058 --> 01:53:24.728
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25131-0
01:53:24.858 --> 01:53:28.118
So the mid semester exam EC2
right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25165-0
01:53:28.128 --> 01:53:32.513
That was also open book for the
last few semesters, so I'll be

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25165-1
01:53:32.513 --> 01:53:36.759
uploading some past papers, but
don't get confused with that

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25165-2
01:53:36.759 --> 01:53:38.708
because now it is different.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25177-0
01:53:38.718 --> 01:53:41.328
Right now it is going to be a
closed book exam, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25185-0
01:53:42.878 --> 01:53:44.408
Traditionally, it was closed
book.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25202-0
01:53:44.458 --> 01:53:48.043
I mean always bits Pilani
follows mid semester is closed

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25202-1
01:53:48.043 --> 01:53:49.868
book final exam is open book.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25233-0
01:53:49.928 --> 01:53:53.256
That is the way it has been
always working, but during the

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25233-1
01:53:53.256 --> 01:53:56.866
COVID when it all became online
and things like that, how could

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25233-2
01:53:56.866 --> 01:53:58.558
you ensure closed book, right.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25244-0
01:53:58.768 --> 01:54:01.868
So that is why mid semester also
became open book.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25253-0
01:54:01.878 --> 01:54:05.038
But now we are back to our
traditional technique, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25267-0
01:54:05.228 --> 01:54:06.778
So it will be a closed book
exam.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25302-0
01:54:06.968 --> 01:54:09.777
It will be online, but at the
Institute as end, but again for

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25302-1
01:54:09.777 --> 01:54:12.768
those folks who are not in India
and so on, there is you know you

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25302-2
01:54:12.768 --> 01:54:14.218
will get separate communication.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25306-0
01:54:14.228 --> 01:54:15.158
Don't worry about that.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25313-0
01:54:15.568 --> 01:54:16.958
You will get things from them.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25332-0
01:54:17.008 --> 01:54:21.018
Yeah, it will be a subjective
exam, meaning it is not MCQ.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25367-0
01:54:21.148 --> 01:54:24.958
It will be a written exam where
you either type it in the tool

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25367-1
01:54:24.958 --> 01:54:28.527
or you write it in a four sheets
and take a photograph and

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25367-2
01:54:28.527 --> 01:54:29.858
weightage will be 30%.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25376-0
01:54:30.218 --> 01:54:31.998
At least in our course will not
confuse.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25388-0
01:54:32.028 --> 01:54:33.518
Will not go with percentage and
all that.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25403-0
01:54:33.568 --> 01:54:36.773
The example we were 30 marks
there will not be any options in

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25403-1
01:54:36.773 --> 01:54:37.238
the exam.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25409-0
01:54:37.248 --> 01:54:38.018
It'll be attend.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25441-0
01:54:38.028 --> 01:54:41.275
All right, it will be exactly
summing it for 30 marks, the

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25441-1
01:54:41.275 --> 01:54:44.907
duration will be 2 hours and you
might get a few more minutes for

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25441-2
01:54:44.907 --> 01:54:45.678
upload, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25451-0
01:54:46.068 --> 01:54:47.688
So two hour, 10 minutes or so.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25469-0
01:54:47.698 --> 01:54:50.814
I'm not very sure about that,
but the paper will be designed

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25469-1
01:54:50.814 --> 01:54:52.398
keeping in mind 2 hours, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25490-0
01:54:54.508 --> 01:54:57.576
So if there is any question,
should we put in a discussion

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25490-1
01:54:57.576 --> 01:54:58.928
forum or email to Duchess?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25492-0
01:54:58.938 --> 01:54:59.138
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25513-0
01:54:59.148 --> 01:55:04.105
So while preparing inside our
section again this is a lot of

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25513-1
01:55:04.105 --> 01:55:06.218
confusion with your batch.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25530-0
01:55:06.228 --> 01:55:08.861
I have not faced this for a long
time, but certainly again this

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25530-1
01:55:08.861 --> 01:55:09.478
has cropped up.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25534-0
01:55:09.648 --> 01:55:10.498
So again repeat.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25549-0
01:55:10.508 --> 01:55:13.562
So just let me know once you're
able to see this browser real

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25549-1
01:55:13.562 --> 01:55:13.858
quick.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25569-0
01:55:15.848 --> 01:55:18.526
Once you are able to go to our
course, there will be a

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25563-0
01:55:16.288 --> 01:55:16.408
Yes.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25569-1
01:55:18.526 --> 01:55:19.598
discussion forum here.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25573-0
01:55:20.108 --> 01:55:21.068
Don't use this.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25622-0
01:55:21.078 --> 01:55:24.495
Yeah, so this discussion forum
is for assignments or for any

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25622-1
01:55:24.495 --> 01:55:28.024
emergency stuff like, you know,
you don't get the sample paper

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25622-2
01:55:28.024 --> 01:55:31.553
and you know some generic topic
which is helpful for the whole

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25622-3
01:55:31.553 --> 01:55:34.298
batch only then you have to use
this discussion.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25639-0
01:55:34.828 --> 01:55:38.703
Otherwise, go into our section,
go into Section 1, which is our

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25639-1
01:55:38.703 --> 01:55:39.188
section.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25660-0
01:55:40.048 --> 01:55:43.132
Once you're going to discussion,
there will be another discussion

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25660-1
01:55:43.132 --> 01:55:45.468
inside that which is only for
our section, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25677-0
01:55:45.528 --> 01:55:48.768
So use these to ask your
questions and I'll be answering.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25696-0
01:55:48.938 --> 01:55:50.923
And if at all there is
something, just feel free to

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25696-1
01:55:50.923 --> 01:55:52.488
directly, you know, write to me
as well.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25702-0
01:55:52.978 --> 01:55:54.608
Yeah, I'll also be available.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25730-0
01:55:54.618 --> 01:55:58.336
So you can put that, but during
the exam during the exam in the

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25730-1
01:55:58.336 --> 01:56:01.531
paper, if you have any questions
and so on, you cannot

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25730-2
01:56:01.531 --> 01:56:02.228
communicate.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25754-0
01:56:02.598 --> 01:56:04.974
Yeah, you will not be able to
use discussion or write to, you

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25754-1
01:56:04.974 --> 01:56:06.048
know, email and any of that.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25799-0
01:56:06.278 --> 01:56:10.004
You will assume something and
you will write the assumption in

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25799-1
01:56:10.004 --> 01:56:13.552
the answer sheet that this is
what I'm assuming and this is

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25799-2
01:56:13.552 --> 01:56:17.160
what I'm solving, but 99% you
will not not have any need for

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25799-3
01:56:17.160 --> 01:56:17.988
assumptions 1.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25841-0
01:56:18.308 --> 01:56:21.477
The question will be very clear
and it'll hopefully not have any

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25841-1
01:56:21.477 --> 01:56:24.452
mistakes also, but if at all
there is something, assume that

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25841-2
01:56:24.452 --> 01:56:27.426
this is what is given in the
question and go ahead and solve

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25841-3
01:56:27.426 --> 01:56:28.158
it in that way.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25844-0
01:56:29.078 --> 01:56:29.268
Cool.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25853-0
01:56:30.948 --> 01:56:32.958
So that's pretty much I had.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25863-0
01:56:33.128 --> 01:56:35.048
So there are some exercises as
usual.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25878-0
01:56:35.058 --> 01:56:38.500
So in these exercises there are
something related to this

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25878-1
01:56:38.500 --> 01:56:40.578
quadratic probing or other
things.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25892-0
01:56:40.588 --> 01:56:43.038
So you can leave those for the
time being.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25913-0
01:56:43.048 --> 01:56:45.684
Like these options are not yet
covered in the class, you can

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25913-1
01:56:45.684 --> 01:56:48.278
just focus on linear probing and
separate chaining for now.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25915-0
01:56:49.948 --> 01:56:50.178
Right.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25924-0
01:56:50.188 --> 01:56:52.338
So that being said, so all the
very best. Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25951-0
01:56:52.388 --> 01:56:56.365
So it's your first maybe exam
with bits WILP, so it'll be

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25951-1
01:56:56.365 --> 01:57:00.068
interesting, so prepare well and
give your best shot.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25962-0
01:57:00.618 --> 01:57:03.668
And yeah, so do we have an
option for questions?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25967-0
01:57:03.678 --> 01:57:04.978
No, no alternate questions.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25980-0
01:57:04.988 --> 01:57:08.048
Yeah, you'll have exactly the
person paper summing up.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25989-0
01:57:08.058 --> 01:57:09.568
For 30 marks, you'll have to
attend all.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/25991-0
01:57:10.638 --> 01:57:11.008
Yeah.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/26008-0
01:57:11.018 --> 01:57:12.788
And the questions will be for a
different marks.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/26016-0
01:57:13.098 --> 01:57:14.968
They'll all not be for the same
marks.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/26029-0
01:57:15.158 --> 01:57:17.368
It can be like, you know, 31
Mark questions.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/26049-0
01:57:17.378 --> 01:57:20.409
It can be 15-2 more questions or
it can be 2 marks, 3 marks, 5

c665b3ae-097f-4446-a5df-1f0f9956fc9a/26049-1
01:57:20.409 --> 01:57:20.698
marks.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/26059-0
01:57:20.708 --> 01:57:23.408
It can be one single question or
any combination.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/26075-0
01:57:23.718 --> 01:57:27.266
You will have to attend all
questions and that will sum to

c665b3ae-097f-4446-a5df-1f0f9956fc9a/26075-1
01:57:27.266 --> 01:57:28.228
30 marks, right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/26094-0
01:57:28.758 --> 01:57:30.878
So that being said, so go ahead.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/26088-0
01:57:28.938 --> 01:57:29.618
Sir, do we need to?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/26112-0
01:57:31.218 --> 01:57:34.607
So do we need to carry mobile
for scanning the paper which we

c665b3ae-097f-4446-a5df-1f0f9956fc9a/26112-1
01:57:34.607 --> 01:57:36.028
are writing and upload it?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/26140-0
01:57:37.078 --> 01:57:40.266
Uh, I'm not really sure about
these operations because now I

c665b3ae-097f-4446-a5df-1f0f9956fc9a/26140-1
01:57:40.266 --> 01:57:43.402
heard that, you know, there is a
new vendor for the example

c665b3ae-097f-4446-a5df-1f0f9956fc9a/26140-2
01:57:43.402 --> 01:57:43.768
portal.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/26153-0
01:57:43.778 --> 01:57:46.248
There is physical exams where
you go to center and so on.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/26203-0
01:57:46.638 --> 01:57:49.240
I would suggest carry your
mobile phone and take the best

c665b3ae-097f-4446-a5df-1f0f9956fc9a/26203-1
01:57:49.240 --> 01:57:52.066
call during the exam like there
will be individual letters and

c665b3ae-097f-4446-a5df-1f0f9956fc9a/26203-2
01:57:52.066 --> 01:57:54.982
they will assist you on you know
how to go about it and you know

c665b3ae-097f-4446-a5df-1f0f9956fc9a/26200-0
01:57:54.868 --> 01:57:55.228
OK so.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/26203-3
01:57:54.982 --> 01:57:56.508
if mobiles are allowed and so
on.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/26224-0
01:57:56.738 --> 01:58:00.557
But go prepared with all your
resources and if I were you, I

c665b3ae-097f-4446-a5df-1f0f9956fc9a/26224-1
01:58:00.557 --> 01:58:02.748
will take like 5000 a four
sheets.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/26246-0
01:58:03.078 --> 01:58:05.988
I will maybe write my name or
print my name roll number like

c665b3ae-097f-4446-a5df-1f0f9956fc9a/26246-1
01:58:05.988 --> 01:58:07.658
you have two exams per day,
right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/26263-0
01:58:07.928 --> 01:58:10.398
So you will at least need say
3044 sheets.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/26276-0
01:58:10.828 --> 01:58:14.888
So all that is a one minute is
still a saving right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/26303-0
01:58:14.998 --> 01:58:18.069
You may not keep writing your
name and rule number in every

c665b3ae-097f-4446-a5df-1f0f9956fc9a/26303-1
01:58:18.069 --> 01:58:21.038
sheet, so try to do all these
things like a pre work and.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/26311-0
01:58:22.898 --> 01:58:24.368
Go enjoy writing the exam.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/26322-0
01:58:24.378 --> 01:58:26.578
Yeah, I would only suggest that,
yeah, don't.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/26332-0
01:58:27.078 --> 01:58:29.438
You know, take it as a you can
take.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/26347-0
01:58:29.448 --> 01:58:31.920
Don't take it very personally
that you know I mean exam and so

c665b3ae-097f-4446-a5df-1f0f9956fc9a/26347-1
01:58:31.920 --> 01:58:32.038
on.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/26353-0
01:58:32.208 --> 01:58:33.358
Sheets will not be provided.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/26359-0
01:58:33.528 --> 01:58:34.578
I'm not really sure.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/26364-0
01:58:34.808 --> 01:58:35.878
Be prepared again.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/26389-0
01:58:35.888 --> 01:58:39.113
The same thing like this is not
happening on campus, so just

c665b3ae-097f-4446-a5df-1f0f9956fc9a/26389-1
01:58:39.113 --> 01:58:42.338
carry your own sheets, carry
mobile phone, laptop, all that.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/26401-0
01:58:42.348 --> 01:58:44.328
And if at all there is something
you can, you know, use that.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/26422-0
01:58:44.708 --> 01:58:48.378
So do that part and we will not
be having any classes till your

c665b3ae-097f-4446-a5df-1f0f9956fc9a/26422-1
01:58:48.378 --> 01:58:49.238
exams complete.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/26437-0
01:58:49.448 --> 01:58:52.275
So we will again be meeting
somewhere in mid February only,

c665b3ae-097f-4446-a5df-1f0f9956fc9a/26437-1
01:58:52.275 --> 01:58:52.558
right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/26447-0
01:58:53.008 --> 01:58:54.898
We have the next week as two
subjects.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/26468-0
01:58:55.088 --> 01:58:58.126
The week after that is again 2
subjects and the week after that

c665b3ae-097f-4446-a5df-1f0f9956fc9a/26468-1
01:58:58.126 --> 01:58:58.838
will be makeup.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/26470-0
01:58:59.048 --> 01:58:59.548
Exams.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/26508-0
01:58:59.998 --> 01:59:03.631
So we will meet only after three
more weeks, which is like more

c665b3ae-097f-4446-a5df-1f0f9956fc9a/26508-1
01:59:03.631 --> 01:59:07.264
than you know exactly after one
month is what the 4th week from

c665b3ae-097f-4446-a5df-1f0f9956fc9a/26508-2
01:59:07.264 --> 01:59:09.478
now is when we will be meeting,
right?

c665b3ae-097f-4446-a5df-1f0f9956fc9a/26513-0
01:59:09.488 --> 01:59:10.078
Yeah, Feb 10.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/26515-0
01:59:10.168 --> 01:59:11.758
Perfect, right.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/26529-0
01:59:12.148 --> 01:59:14.678
So that's, uh, pretty much that
I had.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/26542-0
01:59:14.688 --> 01:59:17.818
So all the best and you know,
I'll just stop the recording.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/26546-0
01:59:17.028 --> 01:59:17.418
Excuse.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/26556-0
01:59:17.828 --> 01:59:19.178
I'll still be there for some
time.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/26554-0
01:59:18.208 --> 01:59:18.838
Excuse me, Sir.

c665b3ae-097f-4446-a5df-1f0f9956fc9a/26561-0
01:59:20.238 --> 01:59:21.228
Yes, Sir.